// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx.proto

#include "polarx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
constexpr ClientMessages::ClientMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClientMessagesDefaultTypeInternal {
  constexpr ClientMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientMessagesDefaultTypeInternal() {}
  union {
    ClientMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientMessagesDefaultTypeInternal _ClientMessages_default_instance_;
constexpr ServerMessages::ServerMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerMessagesDefaultTypeInternal {
  constexpr ServerMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerMessagesDefaultTypeInternal() {}
  union {
    ServerMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerMessagesDefaultTypeInternal _ServerMessages_default_instance_;
constexpr Ok::Ok(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OkDefaultTypeInternal {
  constexpr OkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OkDefaultTypeInternal() {}
  union {
    Ok _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OkDefaultTypeInternal _Ok_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sql_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , severity_(0)

  , code_(0u){}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
}  // namespace PolarXRPC
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_polarx_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_polarx_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_polarx_2eproto = nullptr;

const uint32_t TableStruct_polarx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::ClientMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::ServerMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Ok, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Ok, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Ok, msg_),
  0,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Error, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Error, severity_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Error, code_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Error, sql_state_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Error, msg_),
  2,
  3,
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PolarXRPC::ClientMessages)},
  { 6, -1, -1, sizeof(::PolarXRPC::ServerMessages)},
  { 12, 19, -1, sizeof(::PolarXRPC::Ok)},
  { 20, 30, -1, sizeof(::PolarXRPC::Error)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::_ClientMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::_ServerMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::_Ok_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::_Error_default_instance_),
};

const char descriptor_table_protodef_polarx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014polarx.proto\022\tPolarXRPC\"\224\004\n\016ClientMess"
  "ages\"\201\004\n\004Type\022\030\n\024CON_CAPABILITIES_GET\020\001\022"
  "\030\n\024CON_CAPABILITIES_SET\020\002\022\r\n\tCON_CLOSE\020\003"
  "\022\033\n\027SESS_AUTHENTICATE_START\020\004\022\036\n\032SESS_AU"
  "THENTICATE_CONTINUE\020\005\022\016\n\nSESS_RESET\020\006\022\016\n"
  "\nSESS_CLOSE\020\007\022\024\n\020SQL_STMT_EXECUTE\020\014\022\r\n\tC"
  "RUD_FIND\020\021\022\017\n\013CRUD_INSERT\020\022\022\017\n\013CRUD_UPDA"
  "TE\020\023\022\017\n\013CRUD_DELETE\020\024\022\017\n\013EXPECT_OPEN\020\030\022\020"
  "\n\014EXPECT_CLOSE\020\031\022\022\n\016EXEC_PLAN_READ\020d\022\014\n\010"
  "EXEC_SQL\020e\022\014\n\010SESS_NEW\020n\022\r\n\tSESS_KILL\020o\022"
  "\017\n\013TOKEN_OFFER\020p\022\013\n\007GET_TSO\020q\022\013\n\007AUTO_SP"
  "\020s\022 \n\034FILE_OPERATION_GET_FILE_INFO\020t\022%\n!"
  "FILE_OPERATION_TRANSFER_FILE_DATA\020u\022\036\n\032F"
  "ILE_OPERATION_FILE_MANAGE\020v\022\013\n\007MSG_MAX\020\177"
  "\"\207\004\n\016ServerMessages\"\364\003\n\004Type\022\006\n\002OK\020\000\022\t\n\005"
  "ERROR\020\001\022\025\n\021CONN_CAPABILITIES\020\002\022\036\n\032SESS_A"
  "UTHENTICATE_CONTINUE\020\003\022\030\n\024SESS_AUTHENTIC"
  "ATE_OK\020\004\022\n\n\006NOTICE\020\013\022\036\n\032RESULTSET_COLUMN"
  "_META_DATA\020\014\022\021\n\rRESULTSET_ROW\020\r\022\030\n\024RESUL"
  "TSET_FETCH_DONE\020\016\022\035\n\031RESULTSET_FETCH_SUS"
  "PENDED\020\017\022(\n$RESULTSET_FETCH_DONE_MORE_RE"
  "SULTSETS\020\020\022\027\n\023SQL_STMT_EXECUTE_OK\020\021\022(\n$R"
  "ESULTSET_FETCH_DONE_MORE_OUT_PARAMS\020\022\022\030\n"
  "\024RESULTSET_TOKEN_DONE\020\023\022\021\n\rRESULTSET_TSO"
  "\020\024\022\023\n\017RESULTSET_CHUNK\020\025\022\036\n\032RESULTSET_GET"
  "_FILE_INFO_OK\020\026\022#\n\037RESULTSET_TRANSFER_FI"
  "LE_DATA_OK\020\027\022\034\n\030RESULTSET_FILE_MANAGE_OK"
  "\020\030\"\021\n\002Ok\022\013\n\003msg\030\001 \001(\t\"\213\001\n\005Error\0222\n\010sever"
  "ity\030\001 \001(\0162\031.PolarXRPC.Error.Severity:\005ER"
  "ROR\022\014\n\004code\030\002 \002(\r\022\021\n\tsql_state\030\004 \002(\t\022\013\n\003"
  "msg\030\003 \002(\t\" \n\010Severity\022\t\n\005ERROR\020\000\022\t\n\005FATA"
  "L\020\001B\031\n\027com.mysql.cj.x.protobuf"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_polarx_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polarx_2eproto = {
  false, false, 1270, descriptor_table_protodef_polarx_2eproto, "polarx.proto", 
  &descriptor_table_polarx_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_polarx_2eproto::offsets,
  file_level_metadata_polarx_2eproto, file_level_enum_descriptors_polarx_2eproto, file_level_service_descriptors_polarx_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_polarx_2eproto_getter() {
  return &descriptor_table_polarx_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_polarx_2eproto(&descriptor_table_polarx_2eproto);
namespace PolarXRPC {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessages_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_2eproto);
  return file_level_enum_descriptors_polarx_2eproto[0];
}
bool ClientMessages_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 12:
    case 17:
    case 18:
    case 19:
    case 20:
    case 24:
    case 25:
    case 100:
    case 101:
    case 110:
    case 111:
    case 112:
    case 113:
    case 115:
    case 116:
    case 117:
    case 118:
    case 127:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientMessages_Type ClientMessages::CON_CAPABILITIES_GET;
constexpr ClientMessages_Type ClientMessages::CON_CAPABILITIES_SET;
constexpr ClientMessages_Type ClientMessages::CON_CLOSE;
constexpr ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_START;
constexpr ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_CONTINUE;
constexpr ClientMessages_Type ClientMessages::SESS_RESET;
constexpr ClientMessages_Type ClientMessages::SESS_CLOSE;
constexpr ClientMessages_Type ClientMessages::SQL_STMT_EXECUTE;
constexpr ClientMessages_Type ClientMessages::CRUD_FIND;
constexpr ClientMessages_Type ClientMessages::CRUD_INSERT;
constexpr ClientMessages_Type ClientMessages::CRUD_UPDATE;
constexpr ClientMessages_Type ClientMessages::CRUD_DELETE;
constexpr ClientMessages_Type ClientMessages::EXPECT_OPEN;
constexpr ClientMessages_Type ClientMessages::EXPECT_CLOSE;
constexpr ClientMessages_Type ClientMessages::EXEC_PLAN_READ;
constexpr ClientMessages_Type ClientMessages::EXEC_SQL;
constexpr ClientMessages_Type ClientMessages::SESS_NEW;
constexpr ClientMessages_Type ClientMessages::SESS_KILL;
constexpr ClientMessages_Type ClientMessages::TOKEN_OFFER;
constexpr ClientMessages_Type ClientMessages::GET_TSO;
constexpr ClientMessages_Type ClientMessages::AUTO_SP;
constexpr ClientMessages_Type ClientMessages::FILE_OPERATION_GET_FILE_INFO;
constexpr ClientMessages_Type ClientMessages::FILE_OPERATION_TRANSFER_FILE_DATA;
constexpr ClientMessages_Type ClientMessages::FILE_OPERATION_FILE_MANAGE;
constexpr ClientMessages_Type ClientMessages::MSG_MAX;
constexpr ClientMessages_Type ClientMessages::Type_MIN;
constexpr ClientMessages_Type ClientMessages::Type_MAX;
constexpr int ClientMessages::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessages_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_2eproto);
  return file_level_enum_descriptors_polarx_2eproto[1];
}
bool ServerMessages_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerMessages_Type ServerMessages::OK;
constexpr ServerMessages_Type ServerMessages::ERROR;
constexpr ServerMessages_Type ServerMessages::CONN_CAPABILITIES;
constexpr ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_CONTINUE;
constexpr ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_OK;
constexpr ServerMessages_Type ServerMessages::NOTICE;
constexpr ServerMessages_Type ServerMessages::RESULTSET_COLUMN_META_DATA;
constexpr ServerMessages_Type ServerMessages::RESULTSET_ROW;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_SUSPENDED;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_RESULTSETS;
constexpr ServerMessages_Type ServerMessages::SQL_STMT_EXECUTE_OK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
constexpr ServerMessages_Type ServerMessages::RESULTSET_TOKEN_DONE;
constexpr ServerMessages_Type ServerMessages::RESULTSET_TSO;
constexpr ServerMessages_Type ServerMessages::RESULTSET_CHUNK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_GET_FILE_INFO_OK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_TRANSFER_FILE_DATA_OK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FILE_MANAGE_OK;
constexpr ServerMessages_Type ServerMessages::Type_MIN;
constexpr ServerMessages_Type ServerMessages::Type_MAX;
constexpr int ServerMessages::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_2eproto);
  return file_level_enum_descriptors_polarx_2eproto[2];
}
bool Error_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Error_Severity Error::ERROR;
constexpr Error_Severity Error::FATAL;
constexpr Error_Severity Error::Severity_MIN;
constexpr Error_Severity Error::Severity_MAX;
constexpr int Error::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ClientMessages::_Internal {
 public:
};

ClientMessages::ClientMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.ClientMessages)
}
ClientMessages::ClientMessages(const ClientMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.ClientMessages)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessages::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientMessages::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_2eproto_getter, &descriptor_table_polarx_2eproto_once,
      file_level_metadata_polarx_2eproto[0]);
}

// ===================================================================

class ServerMessages::_Internal {
 public:
};

ServerMessages::ServerMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.ServerMessages)
}
ServerMessages::ServerMessages(const ServerMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.ServerMessages)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessages::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ServerMessages::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_2eproto_getter, &descriptor_table_polarx_2eproto_once,
      file_level_metadata_polarx_2eproto[1]);
}

// ===================================================================

class Ok::_Internal {
 public:
  using HasBits = decltype(std::declval<Ok>()._has_bits_);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Ok::Ok(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Ok)
}
Ok::Ok(const Ok& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Ok)
}

inline void Ok::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ok::~Ok() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Ok)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ok::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ok::ArenaDtor(void* object) {
  Ok* _this = reinterpret_cast< Ok* >(object);
  (void)_this;
}
void Ok::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ok::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ok::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Ok)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ok::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.Ok.msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ok::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Ok)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.Ok.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Ok)
  return target;
}

size_t Ok::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Ok)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ok::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ok::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ok::GetClassData() const { return &_class_data_; }

void Ok::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ok *>(to)->MergeFrom(
      static_cast<const Ok &>(from));
}


void Ok::MergeFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Ok)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ok::CopyFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Ok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ok::IsInitialized() const {
  return true;
}

void Ok::InternalSwap(Ok* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Ok::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_2eproto_getter, &descriptor_table_polarx_2eproto_once,
      file_level_metadata_polarx_2eproto[2]);
}

// ===================================================================

class Error::_Internal {
 public:
  using HasBits = decltype(std::declval<Error>()._has_bits_);
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sql_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  sql_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sql_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql_state()) {
    sql_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sql_state(), 
      GetArenaForAllocation());
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Error)
}

inline void Error::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sql_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sql_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&severity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(code_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sql_state_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&severity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&severity_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PolarXRPC.Error.Severity severity = 1 [default = ERROR];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Error_Severity_IsValid(val))) {
            _internal_set_severity(static_cast<::PolarXRPC::Error_Severity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.Error.msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string sql_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sql_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.Error.sql_state");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PolarXRPC.Error.Severity severity = 1 [default = ERROR];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_severity(), target);
  }

  // required uint32 code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // required string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.Error.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // required string sql_state = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sql_state().data(), static_cast<int>(this->_internal_sql_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.Error.sql_state");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sql_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Error)
  return target;
}

size_t Error::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.Error)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_sql_state()) {
    // required string sql_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_state());
  }

  if (_internal_has_code()) {
    // required uint32 code = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return total_size;
}
size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Error)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required string sql_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_state());

    // required uint32 code = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PolarXRPC.Error.Severity severity = 1 [default = ERROR];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }

void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Error *>(to)->MergeFrom(
      static_cast<const Error &>(from));
}


void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sql_state(from._internal_sql_state());
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sql_state_, lhs_arena,
      &other->sql_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error, code_)
      + sizeof(Error::code_)
      - PROTOBUF_FIELD_OFFSET(Error, severity_)>(
          reinterpret_cast<char*>(&severity_),
          reinterpret_cast<char*>(&other->severity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_2eproto_getter, &descriptor_table_polarx_2eproto_once,
      file_level_metadata_polarx_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::ClientMessages* Arena::CreateMaybeMessage< ::PolarXRPC::ClientMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::ClientMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::ServerMessages* Arena::CreateMaybeMessage< ::PolarXRPC::ServerMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::ServerMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Ok* Arena::CreateMaybeMessage< ::PolarXRPC::Ok >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Ok >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Error* Arena::CreateMaybeMessage< ::PolarXRPC::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Error >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
