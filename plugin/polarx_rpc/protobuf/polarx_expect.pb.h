// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_expect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_polarx_5fexpect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_polarx_5fexpect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_polarx_5fexpect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_polarx_5fexpect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polarx_5fexpect_2eproto;
namespace PolarXRPC {
namespace Expect {
class Close;
struct CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class Open;
struct OpenDefaultTypeInternal;
extern OpenDefaultTypeInternal _Open_default_instance_;
class Open_Condition;
struct Open_ConditionDefaultTypeInternal;
extern Open_ConditionDefaultTypeInternal _Open_Condition_default_instance_;
}  // namespace Expect
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::PolarXRPC::Expect::Close* Arena::CreateMaybeMessage<::PolarXRPC::Expect::Close>(Arena*);
template<> ::PolarXRPC::Expect::Open* Arena::CreateMaybeMessage<::PolarXRPC::Expect::Open>(Arena*);
template<> ::PolarXRPC::Expect::Open_Condition* Arena::CreateMaybeMessage<::PolarXRPC::Expect::Open_Condition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PolarXRPC {
namespace Expect {

enum Open_Condition_ConditionOperation : int {
  Open_Condition_ConditionOperation_EXPECT_OP_SET = 0,
  Open_Condition_ConditionOperation_EXPECT_OP_UNSET = 1
};
bool Open_Condition_ConditionOperation_IsValid(int value);
constexpr Open_Condition_ConditionOperation Open_Condition_ConditionOperation_ConditionOperation_MIN = Open_Condition_ConditionOperation_EXPECT_OP_SET;
constexpr Open_Condition_ConditionOperation Open_Condition_ConditionOperation_ConditionOperation_MAX = Open_Condition_ConditionOperation_EXPECT_OP_UNSET;
constexpr int Open_Condition_ConditionOperation_ConditionOperation_ARRAYSIZE = Open_Condition_ConditionOperation_ConditionOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Open_Condition_ConditionOperation_descriptor();
template<typename T>
inline const std::string& Open_Condition_ConditionOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Open_Condition_ConditionOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Open_Condition_ConditionOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Open_Condition_ConditionOperation_descriptor(), enum_t_value);
}
inline bool Open_Condition_ConditionOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Open_Condition_ConditionOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Open_Condition_ConditionOperation>(
    Open_Condition_ConditionOperation_descriptor(), name, value);
}
enum Open_CtxOperation : int {
  Open_CtxOperation_EXPECT_CTX_COPY_PREV = 0,
  Open_CtxOperation_EXPECT_CTX_EMPTY = 1
};
bool Open_CtxOperation_IsValid(int value);
constexpr Open_CtxOperation Open_CtxOperation_CtxOperation_MIN = Open_CtxOperation_EXPECT_CTX_COPY_PREV;
constexpr Open_CtxOperation Open_CtxOperation_CtxOperation_MAX = Open_CtxOperation_EXPECT_CTX_EMPTY;
constexpr int Open_CtxOperation_CtxOperation_ARRAYSIZE = Open_CtxOperation_CtxOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Open_CtxOperation_descriptor();
template<typename T>
inline const std::string& Open_CtxOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Open_CtxOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Open_CtxOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Open_CtxOperation_descriptor(), enum_t_value);
}
inline bool Open_CtxOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Open_CtxOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Open_CtxOperation>(
    Open_CtxOperation_descriptor(), name, value);
}
// ===================================================================

class Open_Condition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PolarXRPC.Expect.Open.Condition) */ {
 public:
  inline Open_Condition() : Open_Condition(nullptr) {}
  ~Open_Condition() override;
  explicit constexpr Open_Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Open_Condition(const Open_Condition& from);
  Open_Condition(Open_Condition&& from) noexcept
    : Open_Condition() {
    *this = ::std::move(from);
  }

  inline Open_Condition& operator=(const Open_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Open_Condition& operator=(Open_Condition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Open_Condition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Open_Condition* internal_default_instance() {
    return reinterpret_cast<const Open_Condition*>(
               &_Open_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Open_Condition& a, Open_Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Open_Condition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Open_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Open_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Open_Condition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Open_Condition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Open_Condition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Open_Condition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Expect.Open.Condition";
  }
  protected:
  explicit Open_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Open_Condition_ConditionOperation ConditionOperation;
  static constexpr ConditionOperation EXPECT_OP_SET =
    Open_Condition_ConditionOperation_EXPECT_OP_SET;
  static constexpr ConditionOperation EXPECT_OP_UNSET =
    Open_Condition_ConditionOperation_EXPECT_OP_UNSET;
  static inline bool ConditionOperation_IsValid(int value) {
    return Open_Condition_ConditionOperation_IsValid(value);
  }
  static constexpr ConditionOperation ConditionOperation_MIN =
    Open_Condition_ConditionOperation_ConditionOperation_MIN;
  static constexpr ConditionOperation ConditionOperation_MAX =
    Open_Condition_ConditionOperation_ConditionOperation_MAX;
  static constexpr int ConditionOperation_ARRAYSIZE =
    Open_Condition_ConditionOperation_ConditionOperation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConditionOperation_descriptor() {
    return Open_Condition_ConditionOperation_descriptor();
  }
  template<typename T>
  static inline const std::string& ConditionOperation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConditionOperation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConditionOperation_Name.");
    return Open_Condition_ConditionOperation_Name(enum_t_value);
  }
  static inline bool ConditionOperation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConditionOperation* value) {
    return Open_Condition_ConditionOperation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConditionValueFieldNumber = 2,
    kConditionKeyFieldNumber = 1,
    kOpFieldNumber = 3,
  };
  // optional bytes condition_value = 2;
  bool has_condition_value() const;
  private:
  bool _internal_has_condition_value() const;
  public:
  void clear_condition_value();
  const std::string& condition_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_condition_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_condition_value();
  PROTOBUF_NODISCARD std::string* release_condition_value();
  void set_allocated_condition_value(std::string* condition_value);
  private:
  const std::string& _internal_condition_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_condition_value(const std::string& value);
  std::string* _internal_mutable_condition_value();
  public:

  // required uint32 condition_key = 1;
  bool has_condition_key() const;
  private:
  bool _internal_has_condition_key() const;
  public:
  void clear_condition_key();
  uint32_t condition_key() const;
  void set_condition_key(uint32_t value);
  private:
  uint32_t _internal_condition_key() const;
  void _internal_set_condition_key(uint32_t value);
  public:

  // optional .PolarXRPC.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  ::PolarXRPC::Expect::Open_Condition_ConditionOperation op() const;
  void set_op(::PolarXRPC::Expect::Open_Condition_ConditionOperation value);
  private:
  ::PolarXRPC::Expect::Open_Condition_ConditionOperation _internal_op() const;
  void _internal_set_op(::PolarXRPC::Expect::Open_Condition_ConditionOperation value);
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Expect.Open.Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr condition_value_;
  uint32_t condition_key_;
  int op_;
  friend struct ::TableStruct_polarx_5fexpect_2eproto;
};
// -------------------------------------------------------------------

class Open final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PolarXRPC.Expect.Open) */ {
 public:
  inline Open() : Open(nullptr) {}
  ~Open() override;
  explicit constexpr Open(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Open(const Open& from);
  Open(Open&& from) noexcept
    : Open() {
    *this = ::std::move(from);
  }

  inline Open& operator=(const Open& from) {
    CopyFrom(from);
    return *this;
  }
  inline Open& operator=(Open&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Open& default_instance() {
    return *internal_default_instance();
  }
  static inline const Open* internal_default_instance() {
    return reinterpret_cast<const Open*>(
               &_Open_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Open& a, Open& b) {
    a.Swap(&b);
  }
  inline void Swap(Open* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Open* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Open* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Open>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Open& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Open& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Open* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Expect.Open";
  }
  protected:
  explicit Open(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Open_Condition Condition;

  typedef Open_CtxOperation CtxOperation;
  static constexpr CtxOperation EXPECT_CTX_COPY_PREV =
    Open_CtxOperation_EXPECT_CTX_COPY_PREV;
  static constexpr CtxOperation EXPECT_CTX_EMPTY =
    Open_CtxOperation_EXPECT_CTX_EMPTY;
  static inline bool CtxOperation_IsValid(int value) {
    return Open_CtxOperation_IsValid(value);
  }
  static constexpr CtxOperation CtxOperation_MIN =
    Open_CtxOperation_CtxOperation_MIN;
  static constexpr CtxOperation CtxOperation_MAX =
    Open_CtxOperation_CtxOperation_MAX;
  static constexpr int CtxOperation_ARRAYSIZE =
    Open_CtxOperation_CtxOperation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CtxOperation_descriptor() {
    return Open_CtxOperation_descriptor();
  }
  template<typename T>
  static inline const std::string& CtxOperation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CtxOperation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CtxOperation_Name.");
    return Open_CtxOperation_Name(enum_t_value);
  }
  static inline bool CtxOperation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CtxOperation* value) {
    return Open_CtxOperation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCondFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // repeated .PolarXRPC.Expect.Open.Condition cond = 2;
  int cond_size() const;
  private:
  int _internal_cond_size() const;
  public:
  void clear_cond();
  ::PolarXRPC::Expect::Open_Condition* mutable_cond(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Expect::Open_Condition >*
      mutable_cond();
  private:
  const ::PolarXRPC::Expect::Open_Condition& _internal_cond(int index) const;
  ::PolarXRPC::Expect::Open_Condition* _internal_add_cond();
  public:
  const ::PolarXRPC::Expect::Open_Condition& cond(int index) const;
  ::PolarXRPC::Expect::Open_Condition* add_cond();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Expect::Open_Condition >&
      cond() const;

  // optional .PolarXRPC.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  ::PolarXRPC::Expect::Open_CtxOperation op() const;
  void set_op(::PolarXRPC::Expect::Open_CtxOperation value);
  private:
  ::PolarXRPC::Expect::Open_CtxOperation _internal_op() const;
  void _internal_set_op(::PolarXRPC::Expect::Open_CtxOperation value);
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Expect.Open)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Expect::Open_Condition > cond_;
  int op_;
  friend struct ::TableStruct_polarx_5fexpect_2eproto;
};
// -------------------------------------------------------------------

class Close final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PolarXRPC.Expect.Close) */ {
 public:
  inline Close() : Close(nullptr) {}
  explicit constexpr Close(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Close(const Close& from);
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close& operator=(Close&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Close& default_instance() {
    return *internal_default_instance();
  }
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }
  inline void Swap(Close* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Close* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Close* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Close& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Close& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Expect.Close";
  }
  protected:
  explicit Close(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PolarXRPC.Expect.Close)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polarx_5fexpect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Open_Condition

// required uint32 condition_key = 1;
inline bool Open_Condition::_internal_has_condition_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Open_Condition::has_condition_key() const {
  return _internal_has_condition_key();
}
inline void Open_Condition::clear_condition_key() {
  condition_key_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Open_Condition::_internal_condition_key() const {
  return condition_key_;
}
inline uint32_t Open_Condition::condition_key() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Expect.Open.Condition.condition_key)
  return _internal_condition_key();
}
inline void Open_Condition::_internal_set_condition_key(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  condition_key_ = value;
}
inline void Open_Condition::set_condition_key(uint32_t value) {
  _internal_set_condition_key(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Expect.Open.Condition.condition_key)
}

// optional bytes condition_value = 2;
inline bool Open_Condition::_internal_has_condition_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Open_Condition::has_condition_value() const {
  return _internal_has_condition_value();
}
inline void Open_Condition::clear_condition_value() {
  condition_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Open_Condition::condition_value() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Expect.Open.Condition.condition_value)
  return _internal_condition_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Open_Condition::set_condition_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 condition_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Expect.Open.Condition.condition_value)
}
inline std::string* Open_Condition::mutable_condition_value() {
  std::string* _s = _internal_mutable_condition_value();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Expect.Open.Condition.condition_value)
  return _s;
}
inline const std::string& Open_Condition::_internal_condition_value() const {
  return condition_value_.Get();
}
inline void Open_Condition::_internal_set_condition_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  condition_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Open_Condition::_internal_mutable_condition_value() {
  _has_bits_[0] |= 0x00000001u;
  return condition_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Open_Condition::release_condition_value() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Expect.Open.Condition.condition_value)
  if (!_internal_has_condition_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = condition_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (condition_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    condition_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Open_Condition::set_allocated_condition_value(std::string* condition_value) {
  if (condition_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  condition_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), condition_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (condition_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    condition_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Expect.Open.Condition.condition_value)
}

// optional .PolarXRPC.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
inline bool Open_Condition::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Open_Condition::has_op() const {
  return _internal_has_op();
}
inline void Open_Condition::clear_op() {
  op_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PolarXRPC::Expect::Open_Condition_ConditionOperation Open_Condition::_internal_op() const {
  return static_cast< ::PolarXRPC::Expect::Open_Condition_ConditionOperation >(op_);
}
inline ::PolarXRPC::Expect::Open_Condition_ConditionOperation Open_Condition::op() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Expect.Open.Condition.op)
  return _internal_op();
}
inline void Open_Condition::_internal_set_op(::PolarXRPC::Expect::Open_Condition_ConditionOperation value) {
  assert(::PolarXRPC::Expect::Open_Condition_ConditionOperation_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  op_ = value;
}
inline void Open_Condition::set_op(::PolarXRPC::Expect::Open_Condition_ConditionOperation value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Expect.Open.Condition.op)
}

// -------------------------------------------------------------------

// Open

// optional .PolarXRPC.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
inline bool Open::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Open::has_op() const {
  return _internal_has_op();
}
inline void Open::clear_op() {
  op_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PolarXRPC::Expect::Open_CtxOperation Open::_internal_op() const {
  return static_cast< ::PolarXRPC::Expect::Open_CtxOperation >(op_);
}
inline ::PolarXRPC::Expect::Open_CtxOperation Open::op() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Expect.Open.op)
  return _internal_op();
}
inline void Open::_internal_set_op(::PolarXRPC::Expect::Open_CtxOperation value) {
  assert(::PolarXRPC::Expect::Open_CtxOperation_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  op_ = value;
}
inline void Open::set_op(::PolarXRPC::Expect::Open_CtxOperation value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Expect.Open.op)
}

// repeated .PolarXRPC.Expect.Open.Condition cond = 2;
inline int Open::_internal_cond_size() const {
  return cond_.size();
}
inline int Open::cond_size() const {
  return _internal_cond_size();
}
inline void Open::clear_cond() {
  cond_.Clear();
}
inline ::PolarXRPC::Expect::Open_Condition* Open::mutable_cond(int index) {
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Expect.Open.cond)
  return cond_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Expect::Open_Condition >*
Open::mutable_cond() {
  // @@protoc_insertion_point(field_mutable_list:PolarXRPC.Expect.Open.cond)
  return &cond_;
}
inline const ::PolarXRPC::Expect::Open_Condition& Open::_internal_cond(int index) const {
  return cond_.Get(index);
}
inline const ::PolarXRPC::Expect::Open_Condition& Open::cond(int index) const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Expect.Open.cond)
  return _internal_cond(index);
}
inline ::PolarXRPC::Expect::Open_Condition* Open::_internal_add_cond() {
  return cond_.Add();
}
inline ::PolarXRPC::Expect::Open_Condition* Open::add_cond() {
  ::PolarXRPC::Expect::Open_Condition* _add = _internal_add_cond();
  // @@protoc_insertion_point(field_add:PolarXRPC.Expect.Open.cond)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Expect::Open_Condition >&
Open::cond() const {
  // @@protoc_insertion_point(field_list:PolarXRPC.Expect.Open.cond)
  return cond_;
}

// -------------------------------------------------------------------

// Close

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Expect
}  // namespace PolarXRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PolarXRPC::Expect::Open_Condition_ConditionOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PolarXRPC::Expect::Open_Condition_ConditionOperation>() {
  return ::PolarXRPC::Expect::Open_Condition_ConditionOperation_descriptor();
}
template <> struct is_proto_enum< ::PolarXRPC::Expect::Open_CtxOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PolarXRPC::Expect::Open_CtxOperation>() {
  return ::PolarXRPC::Expect::Open_CtxOperation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_polarx_5fexpect_2eproto
