// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_sql.proto

#include "polarx_sql.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
namespace Sql {
constexpr StmtExecute::StmtExecute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , session_variables_()
  , stmt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(nullptr)
  , schema_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encoding_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stmt_digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , snapshot_seq_(uint64_t{0u})
  , token_(0)
  , chunk_result_(false)
  , feed_back_(false)
  , compact_metadata_(false)
  , reset_error_(false)
  , commit_seq_(uint64_t{0u})
  , capabilities_(uint64_t{0u})
  , use_cts_transaction_(false)
  , mark_distributed_(false)
  , query_via_flashback_area_(false){}
struct StmtExecuteDefaultTypeInternal {
  constexpr StmtExecuteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StmtExecuteDefaultTypeInternal() {}
  union {
    StmtExecute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StmtExecuteDefaultTypeInternal _StmtExecute_default_instance_;
constexpr StmtExecuteOk::StmtExecuteOk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StmtExecuteOkDefaultTypeInternal {
  constexpr StmtExecuteOkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StmtExecuteOkDefaultTypeInternal() {}
  union {
    StmtExecuteOk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StmtExecuteOkDefaultTypeInternal _StmtExecuteOk_default_instance_;
constexpr TokenOffer::TokenOffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(-1){}
struct TokenOfferDefaultTypeInternal {
  constexpr TokenOfferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenOfferDefaultTypeInternal() {}
  union {
    TokenOffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenOfferDefaultTypeInternal _TokenOffer_default_instance_;
}  // namespace Sql
}  // namespace PolarXRPC
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_polarx_5fsql_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_polarx_5fsql_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_polarx_5fsql_2eproto = nullptr;

const uint32_t TableStruct_polarx_5fsql_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, namespace__),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, stmt_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, stmt_digest_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, hint_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, chunk_result_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, feed_back_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, args_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, compact_metadata_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, schema_name_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, session_variables_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, encoding_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, token_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, reset_error_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, snapshot_seq_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, commit_seq_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, use_cts_transaction_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, capabilities_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, mark_distributed_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecute, query_via_flashback_area_),
  1,
  0,
  4,
  5,
  8,
  9,
  ~0u,
  10,
  2,
  ~0u,
  3,
  7,
  11,
  6,
  12,
  14,
  13,
  15,
  16,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::StmtExecuteOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::TokenOffer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::TokenOffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Sql::TokenOffer, token_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, -1, sizeof(::PolarXRPC::Sql::StmtExecute)},
  { 44, -1, -1, sizeof(::PolarXRPC::Sql::StmtExecuteOk)},
  { 50, 57, -1, sizeof(::PolarXRPC::Sql::TokenOffer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Sql::_StmtExecute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Sql::_StmtExecuteOk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Sql::_TokenOffer_default_instance_),
};

const char descriptor_table_protodef_polarx_5fsql_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020polarx_sql.proto\022\rPolarXRPC.Sql\032\026polar"
  "x_datatypes.proto\"\373\003\n\013StmtExecute\022\026\n\tnam"
  "espace\030\003 \001(\t:\003sql\022\014\n\004stmt\030\001 \001(\014\022\023\n\013stmt_"
  "digest\030\014 \001(\014\022\014\n\004hint\030\r \001(\014\022\033\n\014chunk_resu"
  "lt\030\016 \001(\010:\005false\022\030\n\tfeed_back\030\020 \001(\010:\005fals"
  "e\022&\n\004args\030\002 \003(\0132\030.PolarXRPC.Datatypes.An"
  "y\022\037\n\020compact_metadata\030\004 \001(\010:\005false\022\023\n\013sc"
  "hema_name\030\005 \001(\t\022\?\n\021session_variables\030\006 \003"
  "(\0132$.PolarXRPC.Datatypes.SessionVariable"
  "\022\020\n\010encoding\030\007 \001(\t\022\r\n\005token\030\010 \001(\005\022\023\n\013res"
  "et_error\030\t \001(\010\022\024\n\014snapshot_seq\030\n \001(\004\022\022\n\n"
  "commit_seq\030\013 \001(\004\022\033\n\023use_cts_transaction\030"
  "\017 \001(\010\022\024\n\014capabilities\030\021 \001(\004\022\030\n\020mark_dist"
  "ributed\030\022 \001(\010\022 \n\030query_via_flashback_are"
  "a\030\023 \001(\010\"\017\n\rStmtExecuteOk\"\037\n\nTokenOffer\022\021"
  "\n\005token\030\001 \001(\005:\002-1B\036\n\034com.mysql.cj.polarx"
  ".protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_polarx_5fsql_2eproto_deps[1] = {
  &::descriptor_table_polarx_5fdatatypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_polarx_5fsql_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polarx_5fsql_2eproto = {
  false, false, 649, descriptor_table_protodef_polarx_5fsql_2eproto, "polarx_sql.proto", 
  &descriptor_table_polarx_5fsql_2eproto_once, descriptor_table_polarx_5fsql_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_polarx_5fsql_2eproto::offsets,
  file_level_metadata_polarx_5fsql_2eproto, file_level_enum_descriptors_polarx_5fsql_2eproto, file_level_service_descriptors_polarx_5fsql_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_polarx_5fsql_2eproto_getter() {
  return &descriptor_table_polarx_5fsql_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_polarx_5fsql_2eproto(&descriptor_table_polarx_5fsql_2eproto);
namespace PolarXRPC {
namespace Sql {

// ===================================================================

class StmtExecute::_Internal {
 public:
  using HasBits = decltype(std::declval<StmtExecute>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stmt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stmt_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chunk_result(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_feed_back(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_compact_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_schema_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reset_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_snapshot_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_commit_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_use_cts_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_capabilities(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mark_distributed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_query_via_flashback_area(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString StmtExecute::_i_give_permission_to_break_this_code_default_namespace__{{{"sql", 3}}, {nullptr}};
void StmtExecute::clear_args() {
  args_.Clear();
}
void StmtExecute::clear_session_variables() {
  session_variables_.Clear();
}
StmtExecute::StmtExecute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena),
  session_variables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Sql.StmtExecute)
}
StmtExecute::StmtExecute(const StmtExecute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_),
      session_variables_(from.session_variables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stmt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stmt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stmt()) {
    stmt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stmt(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(nullptr);
  if (from._internal_has_namespace_()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  schema_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    schema_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_schema_name()) {
    schema_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema_name(), 
      GetArenaForAllocation());
  }
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encoding()) {
    encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoding(), 
      GetArenaForAllocation());
  }
  stmt_digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stmt_digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stmt_digest()) {
    stmt_digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stmt_digest(), 
      GetArenaForAllocation());
  }
  hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hint()) {
    hint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hint(), 
      GetArenaForAllocation());
  }
  ::memcpy(&snapshot_seq_, &from.snapshot_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_via_flashback_area_) -
    reinterpret_cast<char*>(&snapshot_seq_)) + sizeof(query_via_flashback_area_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Sql.StmtExecute)
}

inline void StmtExecute::SharedCtor() {
stmt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stmt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__.UnsafeSetDefault(nullptr);
schema_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  schema_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stmt_digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stmt_digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&snapshot_seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&query_via_flashback_area_) -
    reinterpret_cast<char*>(&snapshot_seq_)) + sizeof(query_via_flashback_area_));
}

StmtExecute::~StmtExecute() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Sql.StmtExecute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StmtExecute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stmt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(nullptr);
  schema_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stmt_digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StmtExecute::ArenaDtor(void* object) {
  StmtExecute* _this = reinterpret_cast< StmtExecute* >(object);
  (void)_this;
}
void StmtExecute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StmtExecute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StmtExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Sql.StmtExecute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  session_variables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      stmt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearToDefault(::PolarXRPC::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      schema_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      encoding_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      stmt_digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      hint_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&snapshot_seq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&token_) -
        reinterpret_cast<char*>(&snapshot_seq_)) + sizeof(token_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&chunk_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mark_distributed_) -
        reinterpret_cast<char*>(&chunk_result_)) + sizeof(mark_distributed_));
  }
  query_via_flashback_area_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StmtExecute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes stmt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stmt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PolarXRPC.Datatypes.Any args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string namespace = 3 [default = "sql"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.Sql.StmtExecute.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool compact_metadata = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_compact_metadata(&has_bits);
          compact_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string schema_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_schema_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.Sql.StmtExecute.schema_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PolarXRPC.Datatypes.SessionVariable session_variables = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_session_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string encoding = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_encoding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.Sql.StmtExecute.encoding");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reset_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_reset_error(&has_bits);
          reset_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 snapshot_seq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_snapshot_seq(&has_bits);
          snapshot_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 commit_seq = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_commit_seq(&has_bits);
          commit_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes stmt_digest = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_stmt_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes hint = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_hint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool chunk_result = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_chunk_result(&has_bits);
          chunk_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_cts_transaction = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_use_cts_transaction(&has_bits);
          use_cts_transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool feed_back = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_feed_back(&has_bits);
          feed_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 capabilities = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_capabilities(&has_bits);
          capabilities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mark_distributed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_mark_distributed(&has_bits);
          mark_distributed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool query_via_flashback_area = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_query_via_flashback_area(&has_bits);
          query_via_flashback_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StmtExecute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Sql.StmtExecute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes stmt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_stmt(), target);
  }

  // repeated .PolarXRPC.Datatypes.Any args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // optional string namespace = 3 [default = "sql"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.Sql.StmtExecute.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // optional bool compact_metadata = 4 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_compact_metadata(), target);
  }

  // optional string schema_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_schema_name().data(), static_cast<int>(this->_internal_schema_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.Sql.StmtExecute.schema_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_schema_name(), target);
  }

  // repeated .PolarXRPC.Datatypes.SessionVariable session_variables = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_session_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_session_variables(i), target, stream);
  }

  // optional string encoding = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.Sql.StmtExecute.encoding");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_encoding(), target);
  }

  // optional int32 token = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_token(), target);
  }

  // optional bool reset_error = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_reset_error(), target);
  }

  // optional uint64 snapshot_seq = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_snapshot_seq(), target);
  }

  // optional uint64 commit_seq = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_commit_seq(), target);
  }

  // optional bytes stmt_digest = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_stmt_digest(), target);
  }

  // optional bytes hint = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_hint(), target);
  }

  // optional bool chunk_result = 14 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_chunk_result(), target);
  }

  // optional bool use_cts_transaction = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_use_cts_transaction(), target);
  }

  // optional bool feed_back = 16 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_feed_back(), target);
  }

  // optional uint64 capabilities = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_capabilities(), target);
  }

  // optional bool mark_distributed = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_mark_distributed(), target);
  }

  // optional bool query_via_flashback_area = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_query_via_flashback_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Sql.StmtExecute)
  return target;
}

size_t StmtExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Sql.StmtExecute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PolarXRPC.Datatypes.Any args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PolarXRPC.Datatypes.SessionVariable session_variables = 6;
  total_size += 1UL * this->_internal_session_variables_size();
  for (const auto& msg : this->session_variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes stmt = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_stmt());
    }

    // optional string namespace = 3 [default = "sql"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string schema_name = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_schema_name());
    }

    // optional string encoding = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_encoding());
    }

    // optional bytes stmt_digest = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_stmt_digest());
    }

    // optional bytes hint = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hint());
    }

    // optional uint64 snapshot_seq = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_snapshot_seq());
    }

    // optional int32 token = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_token());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool chunk_result = 14 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool feed_back = 16 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool compact_metadata = 4 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool reset_error = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint64 commit_seq = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_commit_seq());
    }

    // optional uint64 capabilities = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_capabilities());
    }

    // optional bool use_cts_transaction = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool mark_distributed = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool query_via_flashback_area = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StmtExecute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StmtExecute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StmtExecute::GetClassData() const { return &_class_data_; }

void StmtExecute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StmtExecute *>(to)->MergeFrom(
      static_cast<const StmtExecute &>(from));
}


void StmtExecute::MergeFrom(const StmtExecute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Sql.StmtExecute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  session_variables_.MergeFrom(from.session_variables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stmt(from._internal_stmt());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_schema_name(from._internal_schema_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_encoding(from._internal_encoding());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_stmt_digest(from._internal_stmt_digest());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_hint(from._internal_hint());
    }
    if (cached_has_bits & 0x00000040u) {
      snapshot_seq_ = from.snapshot_seq_;
    }
    if (cached_has_bits & 0x00000080u) {
      token_ = from.token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      chunk_result_ = from.chunk_result_;
    }
    if (cached_has_bits & 0x00000200u) {
      feed_back_ = from.feed_back_;
    }
    if (cached_has_bits & 0x00000400u) {
      compact_metadata_ = from.compact_metadata_;
    }
    if (cached_has_bits & 0x00000800u) {
      reset_error_ = from.reset_error_;
    }
    if (cached_has_bits & 0x00001000u) {
      commit_seq_ = from.commit_seq_;
    }
    if (cached_has_bits & 0x00002000u) {
      capabilities_ = from.capabilities_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_cts_transaction_ = from.use_cts_transaction_;
    }
    if (cached_has_bits & 0x00008000u) {
      mark_distributed_ = from.mark_distributed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_query_via_flashback_area(from._internal_query_via_flashback_area());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StmtExecute::CopyFrom(const StmtExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Sql.StmtExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmtExecute::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(session_variables_))
    return false;
  return true;
}

void StmtExecute::InternalSwap(StmtExecute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  session_variables_.InternalSwap(&other->session_variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stmt_, lhs_arena,
      &other->stmt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &schema_name_, lhs_arena,
      &other->schema_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoding_, lhs_arena,
      &other->encoding_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stmt_digest_, lhs_arena,
      &other->stmt_digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hint_, lhs_arena,
      &other->hint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StmtExecute, query_via_flashback_area_)
      + sizeof(StmtExecute::query_via_flashback_area_)
      - PROTOBUF_FIELD_OFFSET(StmtExecute, snapshot_seq_)>(
          reinterpret_cast<char*>(&snapshot_seq_),
          reinterpret_cast<char*>(&other->snapshot_seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StmtExecute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fsql_2eproto_getter, &descriptor_table_polarx_5fsql_2eproto_once,
      file_level_metadata_polarx_5fsql_2eproto[0]);
}

// ===================================================================

class StmtExecuteOk::_Internal {
 public:
};

StmtExecuteOk::StmtExecuteOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Sql.StmtExecuteOk)
}
StmtExecuteOk::StmtExecuteOk(const StmtExecuteOk& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Sql.StmtExecuteOk)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StmtExecuteOk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StmtExecuteOk::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StmtExecuteOk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fsql_2eproto_getter, &descriptor_table_polarx_5fsql_2eproto_once,
      file_level_metadata_polarx_5fsql_2eproto[1]);
}

// ===================================================================

class TokenOffer::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenOffer>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TokenOffer::TokenOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Sql.TokenOffer)
}
TokenOffer::TokenOffer(const TokenOffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_ = from.token_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Sql.TokenOffer)
}

inline void TokenOffer::SharedCtor() {
token_ = -1;
}

TokenOffer::~TokenOffer() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Sql.TokenOffer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenOffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TokenOffer::ArenaDtor(void* object) {
  TokenOffer* _this = reinterpret_cast< TokenOffer* >(object);
  (void)_this;
}
void TokenOffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenOffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Sql.TokenOffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenOffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 token = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenOffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Sql.TokenOffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 token = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Sql.TokenOffer)
  return target;
}

size_t TokenOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Sql.TokenOffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 token = 1 [default = -1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenOffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenOffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenOffer::GetClassData() const { return &_class_data_; }

void TokenOffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenOffer *>(to)->MergeFrom(
      static_cast<const TokenOffer &>(from));
}


void TokenOffer::MergeFrom(const TokenOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Sql.TokenOffer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenOffer::CopyFrom(const TokenOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Sql.TokenOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenOffer::IsInitialized() const {
  return true;
}

void TokenOffer::InternalSwap(TokenOffer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(token_, other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenOffer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fsql_2eproto_getter, &descriptor_table_polarx_5fsql_2eproto_once,
      file_level_metadata_polarx_5fsql_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Sql
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::Sql::StmtExecute* Arena::CreateMaybeMessage< ::PolarXRPC::Sql::StmtExecute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Sql::StmtExecute >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Sql::StmtExecuteOk* Arena::CreateMaybeMessage< ::PolarXRPC::Sql::StmtExecuteOk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Sql::StmtExecuteOk >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Sql::TokenOffer* Arena::CreateMaybeMessage< ::PolarXRPC::Sql::TokenOffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Sql::TokenOffer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
