// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_session.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_polarx_5fsession_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_polarx_5fsession_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_polarx_5fsession_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_polarx_5fsession_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polarx_5fsession_2eproto;
namespace PolarXRPC {
namespace Session {
class AuthenticateContinue;
struct AuthenticateContinueDefaultTypeInternal;
extern AuthenticateContinueDefaultTypeInternal _AuthenticateContinue_default_instance_;
class AuthenticateOk;
struct AuthenticateOkDefaultTypeInternal;
extern AuthenticateOkDefaultTypeInternal _AuthenticateOk_default_instance_;
class AuthenticateStart;
struct AuthenticateStartDefaultTypeInternal;
extern AuthenticateStartDefaultTypeInternal _AuthenticateStart_default_instance_;
class Close;
struct CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class KillSession;
struct KillSessionDefaultTypeInternal;
extern KillSessionDefaultTypeInternal _KillSession_default_instance_;
class NewSession;
struct NewSessionDefaultTypeInternal;
extern NewSessionDefaultTypeInternal _NewSession_default_instance_;
class Reset;
struct ResetDefaultTypeInternal;
extern ResetDefaultTypeInternal _Reset_default_instance_;
}  // namespace Session
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::PolarXRPC::Session::AuthenticateContinue* Arena::CreateMaybeMessage<::PolarXRPC::Session::AuthenticateContinue>(Arena*);
template<> ::PolarXRPC::Session::AuthenticateOk* Arena::CreateMaybeMessage<::PolarXRPC::Session::AuthenticateOk>(Arena*);
template<> ::PolarXRPC::Session::AuthenticateStart* Arena::CreateMaybeMessage<::PolarXRPC::Session::AuthenticateStart>(Arena*);
template<> ::PolarXRPC::Session::Close* Arena::CreateMaybeMessage<::PolarXRPC::Session::Close>(Arena*);
template<> ::PolarXRPC::Session::KillSession* Arena::CreateMaybeMessage<::PolarXRPC::Session::KillSession>(Arena*);
template<> ::PolarXRPC::Session::NewSession* Arena::CreateMaybeMessage<::PolarXRPC::Session::NewSession>(Arena*);
template<> ::PolarXRPC::Session::Reset* Arena::CreateMaybeMessage<::PolarXRPC::Session::Reset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PolarXRPC {
namespace Session {

enum KillSession_KillType : int {
  KillSession_KillType_QUERY = 1,
  KillSession_KillType_CONNECTION = 2
};
bool KillSession_KillType_IsValid(int value);
constexpr KillSession_KillType KillSession_KillType_KillType_MIN = KillSession_KillType_QUERY;
constexpr KillSession_KillType KillSession_KillType_KillType_MAX = KillSession_KillType_CONNECTION;
constexpr int KillSession_KillType_KillType_ARRAYSIZE = KillSession_KillType_KillType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KillSession_KillType_descriptor();
template<typename T>
inline const std::string& KillSession_KillType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KillSession_KillType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KillSession_KillType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KillSession_KillType_descriptor(), enum_t_value);
}
inline bool KillSession_KillType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KillSession_KillType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KillSession_KillType>(
    KillSession_KillType_descriptor(), name, value);
}
// ===================================================================

class AuthenticateStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PolarXRPC.Session.AuthenticateStart) */ {
 public:
  inline AuthenticateStart() : AuthenticateStart(nullptr) {}
  ~AuthenticateStart() override;
  explicit constexpr AuthenticateStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateStart(const AuthenticateStart& from);
  AuthenticateStart(AuthenticateStart&& from) noexcept
    : AuthenticateStart() {
    *this = ::std::move(from);
  }

  inline AuthenticateStart& operator=(const AuthenticateStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateStart& operator=(AuthenticateStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateStart* internal_default_instance() {
    return reinterpret_cast<const AuthenticateStart*>(
               &_AuthenticateStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticateStart& a, AuthenticateStart& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticateStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateStart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Session.AuthenticateStart";
  }
  protected:
  explicit AuthenticateStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMechNameFieldNumber = 1,
    kAuthDataFieldNumber = 2,
    kInitialResponseFieldNumber = 3,
  };
  // required string mech_name = 1;
  bool has_mech_name() const;
  private:
  bool _internal_has_mech_name() const;
  public:
  void clear_mech_name();
  const std::string& mech_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mech_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mech_name();
  PROTOBUF_NODISCARD std::string* release_mech_name();
  void set_allocated_mech_name(std::string* mech_name);
  private:
  const std::string& _internal_mech_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mech_name(const std::string& value);
  std::string* _internal_mutable_mech_name();
  public:

  // optional bytes auth_data = 2;
  bool has_auth_data() const;
  private:
  bool _internal_has_auth_data() const;
  public:
  void clear_auth_data();
  const std::string& auth_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_data();
  PROTOBUF_NODISCARD std::string* release_auth_data();
  void set_allocated_auth_data(std::string* auth_data);
  private:
  const std::string& _internal_auth_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_data(const std::string& value);
  std::string* _internal_mutable_auth_data();
  public:

  // optional bytes initial_response = 3;
  bool has_initial_response() const;
  private:
  bool _internal_has_initial_response() const;
  public:
  void clear_initial_response();
  const std::string& initial_response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initial_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initial_response();
  PROTOBUF_NODISCARD std::string* release_initial_response();
  void set_allocated_initial_response(std::string* initial_response);
  private:
  const std::string& _internal_initial_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initial_response(const std::string& value);
  std::string* _internal_mutable_initial_response();
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Session.AuthenticateStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mech_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initial_response_;
  friend struct ::TableStruct_polarx_5fsession_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateContinue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PolarXRPC.Session.AuthenticateContinue) */ {
 public:
  inline AuthenticateContinue() : AuthenticateContinue(nullptr) {}
  ~AuthenticateContinue() override;
  explicit constexpr AuthenticateContinue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateContinue(const AuthenticateContinue& from);
  AuthenticateContinue(AuthenticateContinue&& from) noexcept
    : AuthenticateContinue() {
    *this = ::std::move(from);
  }

  inline AuthenticateContinue& operator=(const AuthenticateContinue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateContinue& operator=(AuthenticateContinue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateContinue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateContinue* internal_default_instance() {
    return reinterpret_cast<const AuthenticateContinue*>(
               &_AuthenticateContinue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthenticateContinue& a, AuthenticateContinue& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateContinue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateContinue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateContinue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticateContinue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateContinue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateContinue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateContinue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Session.AuthenticateContinue";
  }
  protected:
  explicit AuthenticateContinue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthDataFieldNumber = 1,
  };
  // required bytes auth_data = 1;
  bool has_auth_data() const;
  private:
  bool _internal_has_auth_data() const;
  public:
  void clear_auth_data();
  const std::string& auth_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_data();
  PROTOBUF_NODISCARD std::string* release_auth_data();
  void set_allocated_auth_data(std::string* auth_data);
  private:
  const std::string& _internal_auth_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_data(const std::string& value);
  std::string* _internal_mutable_auth_data();
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Session.AuthenticateContinue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_data_;
  friend struct ::TableStruct_polarx_5fsession_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateOk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PolarXRPC.Session.AuthenticateOk) */ {
 public:
  inline AuthenticateOk() : AuthenticateOk(nullptr) {}
  ~AuthenticateOk() override;
  explicit constexpr AuthenticateOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateOk(const AuthenticateOk& from);
  AuthenticateOk(AuthenticateOk&& from) noexcept
    : AuthenticateOk() {
    *this = ::std::move(from);
  }

  inline AuthenticateOk& operator=(const AuthenticateOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateOk& operator=(AuthenticateOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateOk* internal_default_instance() {
    return reinterpret_cast<const AuthenticateOk*>(
               &_AuthenticateOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthenticateOk& a, AuthenticateOk& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateOk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticateOk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateOk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateOk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateOk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Session.AuthenticateOk";
  }
  protected:
  explicit AuthenticateOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthDataFieldNumber = 1,
  };
  // optional bytes auth_data = 1;
  bool has_auth_data() const;
  private:
  bool _internal_has_auth_data() const;
  public:
  void clear_auth_data();
  const std::string& auth_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_data();
  PROTOBUF_NODISCARD std::string* release_auth_data();
  void set_allocated_auth_data(std::string* auth_data);
  private:
  const std::string& _internal_auth_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_data(const std::string& value);
  std::string* _internal_mutable_auth_data();
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Session.AuthenticateOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_data_;
  friend struct ::TableStruct_polarx_5fsession_2eproto;
};
// -------------------------------------------------------------------

class NewSession final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PolarXRPC.Session.NewSession) */ {
 public:
  inline NewSession() : NewSession(nullptr) {}
  explicit constexpr NewSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewSession(const NewSession& from);
  NewSession(NewSession&& from) noexcept
    : NewSession() {
    *this = ::std::move(from);
  }

  inline NewSession& operator=(const NewSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSession& operator=(NewSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewSession* internal_default_instance() {
    return reinterpret_cast<const NewSession*>(
               &_NewSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NewSession& a, NewSession& b) {
    a.Swap(&b);
  }
  inline void Swap(NewSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NewSession& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NewSession& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Session.NewSession";
  }
  protected:
  explicit NewSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PolarXRPC.Session.NewSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polarx_5fsession_2eproto;
};
// -------------------------------------------------------------------

class KillSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PolarXRPC.Session.KillSession) */ {
 public:
  inline KillSession() : KillSession(nullptr) {}
  ~KillSession() override;
  explicit constexpr KillSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KillSession(const KillSession& from);
  KillSession(KillSession&& from) noexcept
    : KillSession() {
    *this = ::std::move(from);
  }

  inline KillSession& operator=(const KillSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillSession& operator=(KillSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KillSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const KillSession* internal_default_instance() {
    return reinterpret_cast<const KillSession*>(
               &_KillSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KillSession& a, KillSession& b) {
    a.Swap(&b);
  }
  inline void Swap(KillSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KillSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KillSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KillSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KillSession& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillSession* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Session.KillSession";
  }
  protected:
  explicit KillSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef KillSession_KillType KillType;
  static constexpr KillType QUERY =
    KillSession_KillType_QUERY;
  static constexpr KillType CONNECTION =
    KillSession_KillType_CONNECTION;
  static inline bool KillType_IsValid(int value) {
    return KillSession_KillType_IsValid(value);
  }
  static constexpr KillType KillType_MIN =
    KillSession_KillType_KillType_MIN;
  static constexpr KillType KillType_MAX =
    KillSession_KillType_KillType_MAX;
  static constexpr int KillType_ARRAYSIZE =
    KillSession_KillType_KillType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KillType_descriptor() {
    return KillSession_KillType_descriptor();
  }
  template<typename T>
  static inline const std::string& KillType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KillType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KillType_Name.");
    return KillSession_KillType_Name(enum_t_value);
  }
  static inline bool KillType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KillType* value) {
    return KillSession_KillType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kXSessionIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // required uint64 x_session_id = 2;
  bool has_x_session_id() const;
  private:
  bool _internal_has_x_session_id() const;
  public:
  void clear_x_session_id();
  uint64_t x_session_id() const;
  void set_x_session_id(uint64_t value);
  private:
  uint64_t _internal_x_session_id() const;
  void _internal_set_x_session_id(uint64_t value);
  public:

  // required .PolarXRPC.Session.KillSession.KillType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PolarXRPC::Session::KillSession_KillType type() const;
  void set_type(::PolarXRPC::Session::KillSession_KillType value);
  private:
  ::PolarXRPC::Session::KillSession_KillType _internal_type() const;
  void _internal_set_type(::PolarXRPC::Session::KillSession_KillType value);
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Session.KillSession)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t x_session_id_;
  int type_;
  friend struct ::TableStruct_polarx_5fsession_2eproto;
};
// -------------------------------------------------------------------

class Reset final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PolarXRPC.Session.Reset) */ {
 public:
  inline Reset() : Reset(nullptr) {}
  explicit constexpr Reset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reset(const Reset& from);
  Reset(Reset&& from) noexcept
    : Reset() {
    *this = ::std::move(from);
  }

  inline Reset& operator=(const Reset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reset& operator=(Reset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reset* internal_default_instance() {
    return reinterpret_cast<const Reset*>(
               &_Reset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Reset& a, Reset& b) {
    a.Swap(&b);
  }
  inline void Swap(Reset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Reset& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Reset& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Session.Reset";
  }
  protected:
  explicit Reset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PolarXRPC.Session.Reset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polarx_5fsession_2eproto;
};
// -------------------------------------------------------------------

class Close final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PolarXRPC.Session.Close) */ {
 public:
  inline Close() : Close(nullptr) {}
  explicit constexpr Close(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Close(const Close& from);
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close& operator=(Close&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Close& default_instance() {
    return *internal_default_instance();
  }
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }
  inline void Swap(Close* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Close* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Close* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Close& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Close& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Session.Close";
  }
  protected:
  explicit Close(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PolarXRPC.Session.Close)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polarx_5fsession_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticateStart

// required string mech_name = 1;
inline bool AuthenticateStart::_internal_has_mech_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateStart::has_mech_name() const {
  return _internal_has_mech_name();
}
inline void AuthenticateStart::clear_mech_name() {
  mech_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateStart::mech_name() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Session.AuthenticateStart.mech_name)
  return _internal_mech_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateStart::set_mech_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mech_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Session.AuthenticateStart.mech_name)
}
inline std::string* AuthenticateStart::mutable_mech_name() {
  std::string* _s = _internal_mutable_mech_name();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Session.AuthenticateStart.mech_name)
  return _s;
}
inline const std::string& AuthenticateStart::_internal_mech_name() const {
  return mech_name_.Get();
}
inline void AuthenticateStart::_internal_set_mech_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mech_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateStart::_internal_mutable_mech_name() {
  _has_bits_[0] |= 0x00000001u;
  return mech_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateStart::release_mech_name() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Session.AuthenticateStart.mech_name)
  if (!_internal_has_mech_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = mech_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mech_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mech_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthenticateStart::set_allocated_mech_name(std::string* mech_name) {
  if (mech_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mech_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mech_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mech_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mech_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Session.AuthenticateStart.mech_name)
}

// optional bytes auth_data = 2;
inline bool AuthenticateStart::_internal_has_auth_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateStart::has_auth_data() const {
  return _internal_has_auth_data();
}
inline void AuthenticateStart::clear_auth_data() {
  auth_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticateStart::auth_data() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Session.AuthenticateStart.auth_data)
  return _internal_auth_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateStart::set_auth_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 auth_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Session.AuthenticateStart.auth_data)
}
inline std::string* AuthenticateStart::mutable_auth_data() {
  std::string* _s = _internal_mutable_auth_data();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Session.AuthenticateStart.auth_data)
  return _s;
}
inline const std::string& AuthenticateStart::_internal_auth_data() const {
  return auth_data_.Get();
}
inline void AuthenticateStart::_internal_set_auth_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateStart::_internal_mutable_auth_data() {
  _has_bits_[0] |= 0x00000002u;
  return auth_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateStart::release_auth_data() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Session.AuthenticateStart.auth_data)
  if (!_internal_has_auth_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = auth_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthenticateStart::set_allocated_auth_data(std::string* auth_data) {
  if (auth_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auth_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Session.AuthenticateStart.auth_data)
}

// optional bytes initial_response = 3;
inline bool AuthenticateStart::_internal_has_initial_response() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateStart::has_initial_response() const {
  return _internal_has_initial_response();
}
inline void AuthenticateStart::clear_initial_response() {
  initial_response_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AuthenticateStart::initial_response() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Session.AuthenticateStart.initial_response)
  return _internal_initial_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateStart::set_initial_response(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 initial_response_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Session.AuthenticateStart.initial_response)
}
inline std::string* AuthenticateStart::mutable_initial_response() {
  std::string* _s = _internal_mutable_initial_response();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Session.AuthenticateStart.initial_response)
  return _s;
}
inline const std::string& AuthenticateStart::_internal_initial_response() const {
  return initial_response_.Get();
}
inline void AuthenticateStart::_internal_set_initial_response(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  initial_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateStart::_internal_mutable_initial_response() {
  _has_bits_[0] |= 0x00000004u;
  return initial_response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateStart::release_initial_response() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Session.AuthenticateStart.initial_response)
  if (!_internal_has_initial_response()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = initial_response_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initial_response_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initial_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthenticateStart::set_allocated_initial_response(std::string* initial_response) {
  if (initial_response != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  initial_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initial_response,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initial_response_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initial_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Session.AuthenticateStart.initial_response)
}

// -------------------------------------------------------------------

// AuthenticateContinue

// required bytes auth_data = 1;
inline bool AuthenticateContinue::_internal_has_auth_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateContinue::has_auth_data() const {
  return _internal_has_auth_data();
}
inline void AuthenticateContinue::clear_auth_data() {
  auth_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateContinue::auth_data() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Session.AuthenticateContinue.auth_data)
  return _internal_auth_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateContinue::set_auth_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 auth_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Session.AuthenticateContinue.auth_data)
}
inline std::string* AuthenticateContinue::mutable_auth_data() {
  std::string* _s = _internal_mutable_auth_data();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Session.AuthenticateContinue.auth_data)
  return _s;
}
inline const std::string& AuthenticateContinue::_internal_auth_data() const {
  return auth_data_.Get();
}
inline void AuthenticateContinue::_internal_set_auth_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateContinue::_internal_mutable_auth_data() {
  _has_bits_[0] |= 0x00000001u;
  return auth_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateContinue::release_auth_data() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Session.AuthenticateContinue.auth_data)
  if (!_internal_has_auth_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = auth_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthenticateContinue::set_allocated_auth_data(std::string* auth_data) {
  if (auth_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auth_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Session.AuthenticateContinue.auth_data)
}

// -------------------------------------------------------------------

// AuthenticateOk

// optional bytes auth_data = 1;
inline bool AuthenticateOk::_internal_has_auth_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateOk::has_auth_data() const {
  return _internal_has_auth_data();
}
inline void AuthenticateOk::clear_auth_data() {
  auth_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateOk::auth_data() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Session.AuthenticateOk.auth_data)
  return _internal_auth_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateOk::set_auth_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 auth_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Session.AuthenticateOk.auth_data)
}
inline std::string* AuthenticateOk::mutable_auth_data() {
  std::string* _s = _internal_mutable_auth_data();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Session.AuthenticateOk.auth_data)
  return _s;
}
inline const std::string& AuthenticateOk::_internal_auth_data() const {
  return auth_data_.Get();
}
inline void AuthenticateOk::_internal_set_auth_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateOk::_internal_mutable_auth_data() {
  _has_bits_[0] |= 0x00000001u;
  return auth_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateOk::release_auth_data() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Session.AuthenticateOk.auth_data)
  if (!_internal_has_auth_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = auth_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthenticateOk::set_allocated_auth_data(std::string* auth_data) {
  if (auth_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auth_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Session.AuthenticateOk.auth_data)
}

// -------------------------------------------------------------------

// NewSession

// -------------------------------------------------------------------

// KillSession

// required .PolarXRPC.Session.KillSession.KillType type = 1;
inline bool KillSession::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KillSession::has_type() const {
  return _internal_has_type();
}
inline void KillSession::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PolarXRPC::Session::KillSession_KillType KillSession::_internal_type() const {
  return static_cast< ::PolarXRPC::Session::KillSession_KillType >(type_);
}
inline ::PolarXRPC::Session::KillSession_KillType KillSession::type() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Session.KillSession.type)
  return _internal_type();
}
inline void KillSession::_internal_set_type(::PolarXRPC::Session::KillSession_KillType value) {
  assert(::PolarXRPC::Session::KillSession_KillType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void KillSession::set_type(::PolarXRPC::Session::KillSession_KillType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Session.KillSession.type)
}

// required uint64 x_session_id = 2;
inline bool KillSession::_internal_has_x_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KillSession::has_x_session_id() const {
  return _internal_has_x_session_id();
}
inline void KillSession::clear_x_session_id() {
  x_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t KillSession::_internal_x_session_id() const {
  return x_session_id_;
}
inline uint64_t KillSession::x_session_id() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Session.KillSession.x_session_id)
  return _internal_x_session_id();
}
inline void KillSession::_internal_set_x_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_session_id_ = value;
}
inline void KillSession::set_x_session_id(uint64_t value) {
  _internal_set_x_session_id(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Session.KillSession.x_session_id)
}

// -------------------------------------------------------------------

// Reset

// -------------------------------------------------------------------

// Close

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Session
}  // namespace PolarXRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PolarXRPC::Session::KillSession_KillType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PolarXRPC::Session::KillSession_KillType>() {
  return ::PolarXRPC::Session::KillSession_KillType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_polarx_5fsession_2eproto
