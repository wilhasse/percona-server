// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_resultset.proto

#include "polarx_resultset.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
namespace Resultset {
constexpr FetchDoneMoreOutParams::FetchDoneMoreOutParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FetchDoneMoreOutParamsDefaultTypeInternal {
  constexpr FetchDoneMoreOutParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchDoneMoreOutParamsDefaultTypeInternal() {}
  union {
    FetchDoneMoreOutParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchDoneMoreOutParamsDefaultTypeInternal _FetchDoneMoreOutParams_default_instance_;
constexpr FetchDoneMoreResultsets::FetchDoneMoreResultsets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FetchDoneMoreResultsetsDefaultTypeInternal {
  constexpr FetchDoneMoreResultsetsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchDoneMoreResultsetsDefaultTypeInternal() {}
  union {
    FetchDoneMoreResultsets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchDoneMoreResultsetsDefaultTypeInternal _FetchDoneMoreResultsets_default_instance_;
constexpr FetchDone::FetchDone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chosen_index_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , examined_row_count_(uint64_t{0u}){}
struct FetchDoneDefaultTypeInternal {
  constexpr FetchDoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchDoneDefaultTypeInternal() {}
  union {
    FetchDone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchDoneDefaultTypeInternal _FetchDone_default_instance_;
constexpr ColumnMetaData::ColumnMetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , original_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , original_table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schema_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , catalog_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , original_type_(0)

  , fractional_digits_(0u)
  , collation_(uint64_t{0u})
  , length_(0u)
  , flags_(0u)
  , content_type_(0u)
  , original_flags_(0u)
  , type_(1)
{}
struct ColumnMetaDataDefaultTypeInternal {
  constexpr ColumnMetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnMetaDataDefaultTypeInternal() {}
  union {
    ColumnMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnMetaDataDefaultTypeInternal _ColumnMetaData_default_instance_;
constexpr Row::Row(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(){}
struct RowDefaultTypeInternal {
  constexpr RowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RowDefaultTypeInternal() {}
  union {
    Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RowDefaultTypeInternal _Row_default_instance_;
constexpr TokenDone::TokenDone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_left_(0){}
struct TokenDoneDefaultTypeInternal {
  constexpr TokenDoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenDoneDefaultTypeInternal() {}
  union {
    TokenDone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenDoneDefaultTypeInternal _TokenDone_default_instance_;
constexpr Chunk::Chunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_()
  , row_count_(0u){}
struct ChunkDefaultTypeInternal {
  constexpr ChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkDefaultTypeInternal _Chunk_default_instance_;
constexpr Column::Column(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : null_bitmap_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fixed_size_column_(nullptr)
  , variable_size_column_(nullptr){}
struct ColumnDefaultTypeInternal {
  constexpr ColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnDefaultTypeInternal() {}
  union {
    Column _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnDefaultTypeInternal _Column_default_instance_;
constexpr FixedSizeColumn::FixedSizeColumn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FixedSizeColumnDefaultTypeInternal {
  constexpr FixedSizeColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FixedSizeColumnDefaultTypeInternal() {}
  union {
    FixedSizeColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FixedSizeColumnDefaultTypeInternal _FixedSizeColumn_default_instance_;
constexpr VariableSizeColumn::VariableSizeColumn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VariableSizeColumnDefaultTypeInternal {
  constexpr VariableSizeColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableSizeColumnDefaultTypeInternal() {}
  union {
    VariableSizeColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableSizeColumnDefaultTypeInternal _VariableSizeColumn_default_instance_;
}  // namespace Resultset
}  // namespace PolarXRPC
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_polarx_5fresultset_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_polarx_5fresultset_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_polarx_5fresultset_2eproto = nullptr;

const uint32_t TableStruct_polarx_5fresultset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FetchDoneMoreOutParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FetchDoneMoreResultsets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FetchDone, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FetchDone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FetchDone, examined_row_count_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FetchDone, chosen_index_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, type_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, original_type_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, name_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, original_name_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, table_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, original_table_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, schema_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, catalog_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, collation_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, fractional_digits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, length_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, flags_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, content_type_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::ColumnMetaData, original_flags_),
  13,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  7,
  9,
  10,
  11,
  12,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Row, field_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::TokenDone, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::TokenDone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::TokenDone, token_left_),
  0,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Chunk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Chunk, row_count_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Chunk, columns_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Column, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Column, null_bitmap_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Column, fixed_size_column_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::Column, variable_size_column_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FixedSizeColumn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FixedSizeColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::FixedSizeColumn, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::VariableSizeColumn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::VariableSizeColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Resultset::VariableSizeColumn, value_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PolarXRPC::Resultset::FetchDoneMoreOutParams)},
  { 6, -1, -1, sizeof(::PolarXRPC::Resultset::FetchDoneMoreResultsets)},
  { 12, 20, -1, sizeof(::PolarXRPC::Resultset::FetchDone)},
  { 22, 42, -1, sizeof(::PolarXRPC::Resultset::ColumnMetaData)},
  { 56, -1, -1, sizeof(::PolarXRPC::Resultset::Row)},
  { 63, 70, -1, sizeof(::PolarXRPC::Resultset::TokenDone)},
  { 71, 79, -1, sizeof(::PolarXRPC::Resultset::Chunk)},
  { 81, 90, -1, sizeof(::PolarXRPC::Resultset::Column)},
  { 93, 100, -1, sizeof(::PolarXRPC::Resultset::FixedSizeColumn)},
  { 101, 108, -1, sizeof(::PolarXRPC::Resultset::VariableSizeColumn)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_FetchDoneMoreOutParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_FetchDoneMoreResultsets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_FetchDone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_ColumnMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_Row_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_TokenDone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_FixedSizeColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Resultset::_VariableSizeColumn_default_instance_),
};

const char descriptor_table_protodef_polarx_5fresultset_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026polarx_resultset.proto\022\023PolarXRPC.Resu"
  "ltset\"\030\n\026FetchDoneMoreOutParams\"\031\n\027Fetch"
  "DoneMoreResultsets\"=\n\tFetchDone\022\032\n\022exami"
  "ned_row_count\030\001 \001(\004\022\024\n\014chosen_index\030\002 \001("
  "\014\"\362\t\n\016ColumnMetaData\022;\n\004type\030\001 \002(\0162-.Pol"
  "arXRPC.Resultset.ColumnMetaData.FieldTyp"
  "e\022G\n\roriginal_type\030\002 \002(\01620.PolarXRPC.Res"
  "ultset.ColumnMetaData.OriginalType\022\014\n\004na"
  "me\030\003 \001(\014\022\025\n\roriginal_name\030\004 \001(\014\022\r\n\005table"
  "\030\005 \001(\014\022\026\n\016original_table\030\006 \001(\014\022\016\n\006schema"
  "\030\007 \001(\014\022\017\n\007catalog\030\010 \001(\014\022\021\n\tcollation\030\t \001"
  "(\004\022\031\n\021fractional_digits\030\n \001(\r\022\016\n\006length\030"
  "\013 \001(\r\022\r\n\005flags\030\014 \001(\r\022\024\n\014content_type\030\r \001"
  "(\r\022\026\n\016original_flags\030\016 \001(\r\"\202\001\n\tFieldType"
  "\022\010\n\004SINT\020\001\022\010\n\004UINT\020\002\022\n\n\006DOUBLE\020\005\022\t\n\005FLOA"
  "T\020\006\022\t\n\005BYTES\020\007\022\010\n\004TIME\020\n\022\014\n\010DATETIME\020\014\022\007"
  "\n\003SET\020\017\022\010\n\004ENUM\020\020\022\007\n\003BIT\020\021\022\013\n\007DECIMAL\020\022\""
  "\354\005\n\014OriginalType\022\026\n\022MYSQL_TYPE_DECIMAL\020\000"
  "\022\023\n\017MYSQL_TYPE_TINY\020\001\022\024\n\020MYSQL_TYPE_SHOR"
  "T\020\002\022\023\n\017MYSQL_TYPE_LONG\020\003\022\024\n\020MYSQL_TYPE_F"
  "LOAT\020\004\022\025\n\021MYSQL_TYPE_DOUBLE\020\005\022\023\n\017MYSQL_T"
  "YPE_NULL\020\006\022\030\n\024MYSQL_TYPE_TIMESTAMP\020\007\022\027\n\023"
  "MYSQL_TYPE_LONGLONG\020\010\022\024\n\020MYSQL_TYPE_INT2"
  "4\020\t\022\023\n\017MYSQL_TYPE_DATE\020\n\022\023\n\017MYSQL_TYPE_T"
  "IME\020\013\022\027\n\023MYSQL_TYPE_DATETIME\020\014\022\023\n\017MYSQL_"
  "TYPE_YEAR\020\r\022\026\n\022MYSQL_TYPE_NEWDATE\020\016\022\026\n\022M"
  "YSQL_TYPE_VARCHAR\020\017\022\022\n\016MYSQL_TYPE_BIT\020\020\022"
  "\031\n\025MYSQL_TYPE_TIMESTAMP2\020\021\022\030\n\024MYSQL_TYPE"
  "_DATETIME2\020\022\022\024\n\020MYSQL_TYPE_TIME2\020\023\022\024\n\017MY"
  "SQL_TYPE_JSON\020\365\001\022\032\n\025MYSQL_TYPE_NEWDECIMA"
  "L\020\366\001\022\024\n\017MYSQL_TYPE_ENUM\020\367\001\022\023\n\016MYSQL_TYPE"
  "_SET\020\370\001\022\031\n\024MYSQL_TYPE_TINY_BLOB\020\371\001\022\033\n\026MY"
  "SQL_TYPE_MEDIUM_BLOB\020\372\001\022\031\n\024MYSQL_TYPE_LO"
  "NG_BLOB\020\373\001\022\024\n\017MYSQL_TYPE_BLOB\020\374\001\022\032\n\025MYSQ"
  "L_TYPE_VAR_STRING\020\375\001\022\026\n\021MYSQL_TYPE_STRIN"
  "G\020\376\001\022\030\n\023MYSQL_TYPE_GEOMETRY\020\377\001\"\024\n\003Row\022\r\n"
  "\005field\030\001 \003(\014\"\"\n\tTokenDone\022\025\n\ntoken_left\030"
  "\001 \001(\005:\0010\"H\n\005Chunk\022\021\n\trow_count\030\001 \002(\r\022,\n\007"
  "columns\030\002 \003(\0132\033.PolarXRPC.Resultset.Colu"
  "mn\"\245\001\n\006Column\022\023\n\013null_bitmap\030\001 \001(\014\022\?\n\021fi"
  "xed_size_column\030\002 \001(\0132$.PolarXRPC.Result"
  "set.FixedSizeColumn\022E\n\024variable_size_col"
  "umn\030\003 \001(\0132\'.PolarXRPC.Resultset.Variable"
  "SizeColumn\" \n\017FixedSizeColumn\022\r\n\005value\030\001"
  " \002(\014\"#\n\022VariableSizeColumn\022\r\n\005value\030\001 \002("
  "\014B\036\n\034com.mysql.cj.polarx.protobuf"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_polarx_5fresultset_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polarx_5fresultset_2eproto = {
  false, false, 1833, descriptor_table_protodef_polarx_5fresultset_2eproto, "polarx_resultset.proto", 
  &descriptor_table_polarx_5fresultset_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_polarx_5fresultset_2eproto::offsets,
  file_level_metadata_polarx_5fresultset_2eproto, file_level_enum_descriptors_polarx_5fresultset_2eproto, file_level_service_descriptors_polarx_5fresultset_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_polarx_5fresultset_2eproto_getter() {
  return &descriptor_table_polarx_5fresultset_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_polarx_5fresultset_2eproto(&descriptor_table_polarx_5fresultset_2eproto);
namespace PolarXRPC {
namespace Resultset {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnMetaData_FieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_5fresultset_2eproto);
  return file_level_enum_descriptors_polarx_5fresultset_2eproto[0];
}
bool ColumnMetaData_FieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 10:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ColumnMetaData_FieldType ColumnMetaData::SINT;
constexpr ColumnMetaData_FieldType ColumnMetaData::UINT;
constexpr ColumnMetaData_FieldType ColumnMetaData::DOUBLE;
constexpr ColumnMetaData_FieldType ColumnMetaData::FLOAT;
constexpr ColumnMetaData_FieldType ColumnMetaData::BYTES;
constexpr ColumnMetaData_FieldType ColumnMetaData::TIME;
constexpr ColumnMetaData_FieldType ColumnMetaData::DATETIME;
constexpr ColumnMetaData_FieldType ColumnMetaData::SET;
constexpr ColumnMetaData_FieldType ColumnMetaData::ENUM;
constexpr ColumnMetaData_FieldType ColumnMetaData::BIT;
constexpr ColumnMetaData_FieldType ColumnMetaData::DECIMAL;
constexpr ColumnMetaData_FieldType ColumnMetaData::FieldType_MIN;
constexpr ColumnMetaData_FieldType ColumnMetaData::FieldType_MAX;
constexpr int ColumnMetaData::FieldType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnMetaData_OriginalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_5fresultset_2eproto);
  return file_level_enum_descriptors_polarx_5fresultset_2eproto[1];
}
bool ColumnMetaData_OriginalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_DECIMAL;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_TINY;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_SHORT;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_LONG;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_FLOAT;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_DOUBLE;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_NULL;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_TIMESTAMP;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_LONGLONG;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_INT24;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_DATE;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_TIME;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_DATETIME;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_YEAR;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_NEWDATE;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_VARCHAR;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_BIT;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_TIMESTAMP2;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_DATETIME2;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_TIME2;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_JSON;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_NEWDECIMAL;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_ENUM;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_SET;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_TINY_BLOB;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_MEDIUM_BLOB;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_LONG_BLOB;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_BLOB;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_VAR_STRING;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_STRING;
constexpr ColumnMetaData_OriginalType ColumnMetaData::MYSQL_TYPE_GEOMETRY;
constexpr ColumnMetaData_OriginalType ColumnMetaData::OriginalType_MIN;
constexpr ColumnMetaData_OriginalType ColumnMetaData::OriginalType_MAX;
constexpr int ColumnMetaData::OriginalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FetchDoneMoreOutParams::_Internal {
 public:
};

FetchDoneMoreOutParams::FetchDoneMoreOutParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.FetchDoneMoreOutParams)
}
FetchDoneMoreOutParams::FetchDoneMoreOutParams(const FetchDoneMoreOutParams& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.FetchDoneMoreOutParams)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchDoneMoreOutParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchDoneMoreOutParams::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FetchDoneMoreOutParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[0]);
}

// ===================================================================

class FetchDoneMoreResultsets::_Internal {
 public:
};

FetchDoneMoreResultsets::FetchDoneMoreResultsets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.FetchDoneMoreResultsets)
}
FetchDoneMoreResultsets::FetchDoneMoreResultsets(const FetchDoneMoreResultsets& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.FetchDoneMoreResultsets)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchDoneMoreResultsets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchDoneMoreResultsets::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FetchDoneMoreResultsets::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[1]);
}

// ===================================================================

class FetchDone::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchDone>()._has_bits_);
  static void set_has_examined_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chosen_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FetchDone::FetchDone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.FetchDone)
}
FetchDone::FetchDone(const FetchDone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chosen_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chosen_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chosen_index()) {
    chosen_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chosen_index(), 
      GetArenaForAllocation());
  }
  examined_row_count_ = from.examined_row_count_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.FetchDone)
}

inline void FetchDone::SharedCtor() {
chosen_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chosen_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
examined_row_count_ = uint64_t{0u};
}

FetchDone::~FetchDone() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Resultset.FetchDone)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FetchDone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chosen_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FetchDone::ArenaDtor(void* object) {
  FetchDone* _this = reinterpret_cast< FetchDone* >(object);
  (void)_this;
}
void FetchDone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchDone::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Resultset.FetchDone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chosen_index_.ClearNonDefaultToEmpty();
  }
  examined_row_count_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 examined_row_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_examined_row_count(&has_bits);
          examined_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes chosen_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chosen_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchDone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Resultset.FetchDone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 examined_row_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_examined_row_count(), target);
  }

  // optional bytes chosen_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chosen_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Resultset.FetchDone)
  return target;
}

size_t FetchDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Resultset.FetchDone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes chosen_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chosen_index());
    }

    // optional uint64 examined_row_count = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_examined_row_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchDone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FetchDone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchDone::GetClassData() const { return &_class_data_; }

void FetchDone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FetchDone *>(to)->MergeFrom(
      static_cast<const FetchDone &>(from));
}


void FetchDone::MergeFrom(const FetchDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Resultset.FetchDone)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chosen_index(from._internal_chosen_index());
    }
    if (cached_has_bits & 0x00000002u) {
      examined_row_count_ = from.examined_row_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchDone::CopyFrom(const FetchDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Resultset.FetchDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDone::IsInitialized() const {
  return true;
}

void FetchDone::InternalSwap(FetchDone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chosen_index_, lhs_arena,
      &other->chosen_index_, rhs_arena
  );
  swap(examined_row_count_, other->examined_row_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[2]);
}

// ===================================================================

class ColumnMetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnMetaData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_original_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_table(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fractional_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_original_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00002040) ^ 0x00002040) != 0;
  }
};

ColumnMetaData::ColumnMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.ColumnMetaData)
}
ColumnMetaData::ColumnMetaData(const ColumnMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  original_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    original_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_original_name()) {
    original_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_name(), 
      GetArenaForAllocation());
  }
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArenaForAllocation());
  }
  original_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    original_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_original_table()) {
    original_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_table(), 
      GetArenaForAllocation());
  }
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_schema()) {
    schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema(), 
      GetArenaForAllocation());
  }
  catalog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    catalog_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_catalog()) {
    catalog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_catalog(), 
      GetArenaForAllocation());
  }
  ::memcpy(&original_type_, &from.original_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&original_type_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.ColumnMetaData)
}

inline void ColumnMetaData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
original_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  original_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
original_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  original_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
catalog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  catalog_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&original_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&original_flags_) -
    reinterpret_cast<char*>(&original_type_)) + sizeof(original_flags_));
type_ = 1;
}

ColumnMetaData::~ColumnMetaData() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Resultset.ColumnMetaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  catalog_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColumnMetaData::ArenaDtor(void* object) {
  ColumnMetaData* _this = reinterpret_cast< ColumnMetaData* >(object);
  (void)_this;
}
void ColumnMetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Resultset.ColumnMetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      original_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      original_table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      schema_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      catalog_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&original_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fractional_digits_) -
        reinterpret_cast<char*>(&original_type_)) + sizeof(fractional_digits_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&collation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&original_flags_) -
        reinterpret_cast<char*>(&collation_)) + sizeof(original_flags_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.Resultset.ColumnMetaData.FieldType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Resultset::ColumnMetaData_FieldType_IsValid(val))) {
            _internal_set_type(static_cast<::PolarXRPC::Resultset::ColumnMetaData_FieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .PolarXRPC.Resultset.ColumnMetaData.OriginalType original_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Resultset::ColumnMetaData_OriginalType_IsValid(val))) {
            _internal_set_original_type(static_cast<::PolarXRPC::Resultset::ColumnMetaData_OriginalType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes original_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_original_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes original_table = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_original_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes schema = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes catalog = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_catalog();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 collation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_collation(&has_bits);
          collation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fractional_digits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_fractional_digits(&has_bits);
          fractional_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 content_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_content_type(&has_bits);
          content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 original_flags = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_original_flags(&has_bits);
          original_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnMetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Resultset.ColumnMetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.Resultset.ColumnMetaData.FieldType type = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .PolarXRPC.Resultset.ColumnMetaData.OriginalType original_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_original_type(), target);
  }

  // optional bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional bytes original_name = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_original_name(), target);
  }

  // optional bytes table = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_table(), target);
  }

  // optional bytes original_table = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_original_table(), target);
  }

  // optional bytes schema = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_schema(), target);
  }

  // optional bytes catalog = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_catalog(), target);
  }

  // optional uint64 collation = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_collation(), target);
  }

  // optional uint32 fractional_digits = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_fractional_digits(), target);
  }

  // optional uint32 length = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_length(), target);
  }

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_flags(), target);
  }

  // optional uint32 content_type = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_content_type(), target);
  }

  // optional uint32 original_flags = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_original_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Resultset.ColumnMetaData)
  return target;
}

size_t ColumnMetaData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.Resultset.ColumnMetaData)
  size_t total_size = 0;

  if (_internal_has_original_type()) {
    // required .PolarXRPC.Resultset.ColumnMetaData.OriginalType original_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_original_type());
  }

  if (_internal_has_type()) {
    // required .PolarXRPC.Resultset.ColumnMetaData.FieldType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t ColumnMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Resultset.ColumnMetaData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00002040) ^ 0x00002040) == 0) {  // All required fields are present.
    // required .PolarXRPC.Resultset.ColumnMetaData.OriginalType original_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_original_type());

    // required .PolarXRPC.Resultset.ColumnMetaData.FieldType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes original_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_original_name());
    }

    // optional bytes table = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_table());
    }

    // optional bytes original_table = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_original_table());
    }

    // optional bytes schema = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schema());
    }

    // optional bytes catalog = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_catalog());
    }

  }
  // optional uint32 fractional_digits = 10;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fractional_digits());
  }

  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 collation = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_collation());
    }

    // optional uint32 length = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
    }

    // optional uint32 flags = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 content_type = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_content_type());
    }

    // optional uint32 original_flags = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_original_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnMetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnMetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnMetaData::GetClassData() const { return &_class_data_; }

void ColumnMetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColumnMetaData *>(to)->MergeFrom(
      static_cast<const ColumnMetaData &>(from));
}


void ColumnMetaData::MergeFrom(const ColumnMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Resultset.ColumnMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_original_name(from._internal_original_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_table(from._internal_table());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_original_table(from._internal_original_table());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_schema(from._internal_schema());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_catalog(from._internal_catalog());
    }
    if (cached_has_bits & 0x00000040u) {
      original_type_ = from.original_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      fractional_digits_ = from.fractional_digits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      collation_ = from.collation_;
    }
    if (cached_has_bits & 0x00000200u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000400u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      content_type_ = from.content_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      original_flags_ = from.original_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnMetaData::CopyFrom(const ColumnMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Resultset.ColumnMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMetaData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ColumnMetaData::InternalSwap(ColumnMetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &original_name_, lhs_arena,
      &other->original_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_, lhs_arena,
      &other->table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &original_table_, lhs_arena,
      &other->original_table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &schema_, lhs_arena,
      &other->schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &catalog_, lhs_arena,
      &other->catalog_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnMetaData, original_flags_)
      + sizeof(ColumnMetaData::original_flags_)
      - PROTOBUF_FIELD_OFFSET(ColumnMetaData, original_type_)>(
          reinterpret_cast<char*>(&original_type_),
          reinterpret_cast<char*>(&other->original_type_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnMetaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[3]);
}

// ===================================================================

class Row::_Internal {
 public:
};

Row::Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.Row)
}
Row::Row(const Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.Row)
}

inline void Row::SharedCtor() {
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Resultset.Row)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Row::ArenaDtor(void* object) {
  Row* _this = reinterpret_cast< Row* >(object);
  (void)_this;
}
void Row::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Resultset.Row)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Row::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Row::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Resultset.Row)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes field = 1;
  for (int i = 0, n = this->_internal_field_size(); i < n; i++) {
    const auto& s = this->_internal_field(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Resultset.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Resultset.Row)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes field = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_.size());
  for (int i = 0, n = field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      field_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Row::GetClassData() const { return &_class_data_; }

void Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Row *>(to)->MergeFrom(
      static_cast<const Row &>(from));
}


void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Resultset.Row)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Resultset.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::InternalSwap(Row* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Row::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[4]);
}

// ===================================================================

class TokenDone::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenDone>()._has_bits_);
  static void set_has_token_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TokenDone::TokenDone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.TokenDone)
}
TokenDone::TokenDone(const TokenDone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_left_ = from.token_left_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.TokenDone)
}

inline void TokenDone::SharedCtor() {
token_left_ = 0;
}

TokenDone::~TokenDone() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Resultset.TokenDone)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenDone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TokenDone::ArenaDtor(void* object) {
  TokenDone* _this = reinterpret_cast< TokenDone* >(object);
  (void)_this;
}
void TokenDone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenDone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenDone::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Resultset.TokenDone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_left_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenDone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 token_left = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_token_left(&has_bits);
          token_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenDone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Resultset.TokenDone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 token_left = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_token_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Resultset.TokenDone)
  return target;
}

size_t TokenDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Resultset.TokenDone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 token_left = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_token_left());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenDone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenDone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenDone::GetClassData() const { return &_class_data_; }

void TokenDone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenDone *>(to)->MergeFrom(
      static_cast<const TokenDone &>(from));
}


void TokenDone::MergeFrom(const TokenDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Resultset.TokenDone)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token_left()) {
    _internal_set_token_left(from._internal_token_left());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenDone::CopyFrom(const TokenDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Resultset.TokenDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenDone::IsInitialized() const {
  return true;
}

void TokenDone::InternalSwap(TokenDone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(token_left_, other->token_left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenDone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[5]);
}

// ===================================================================

class Chunk::_Internal {
 public:
  using HasBits = decltype(std::declval<Chunk>()._has_bits_);
  static void set_has_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  row_count_ = from.row_count_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.Chunk)
}

inline void Chunk::SharedCtor() {
row_count_ = 0u;
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Resultset.Chunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Chunk::ArenaDtor(void* object) {
  Chunk* _this = reinterpret_cast< Chunk* >(object);
  (void)_this;
}
void Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Resultset.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  row_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 row_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_count(&has_bits);
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PolarXRPC.Resultset.Column columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Resultset.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 row_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_count(), target);
  }

  // repeated .PolarXRPC.Resultset.Column columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_columns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Resultset.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Resultset.Chunk)
  size_t total_size = 0;

  // required uint32 row_count = 1;
  if (_internal_has_row_count()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_row_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PolarXRPC.Resultset.Column columns = 2;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chunk::GetClassData() const { return &_class_data_; }

void Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chunk *>(to)->MergeFrom(
      static_cast<const Chunk &>(from));
}


void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Resultset.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from._internal_has_row_count()) {
    _internal_set_row_count(from._internal_row_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Resultset.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(columns_))
    return false;
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  columns_.InternalSwap(&other->columns_);
  swap(row_count_, other->row_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[6]);
}

// ===================================================================

class Column::_Internal {
 public:
  using HasBits = decltype(std::declval<Column>()._has_bits_);
  static void set_has_null_bitmap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PolarXRPC::Resultset::FixedSizeColumn& fixed_size_column(const Column* msg);
  static void set_has_fixed_size_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PolarXRPC::Resultset::VariableSizeColumn& variable_size_column(const Column* msg);
  static void set_has_variable_size_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PolarXRPC::Resultset::FixedSizeColumn&
Column::_Internal::fixed_size_column(const Column* msg) {
  return *msg->fixed_size_column_;
}
const ::PolarXRPC::Resultset::VariableSizeColumn&
Column::_Internal::variable_size_column(const Column* msg) {
  return *msg->variable_size_column_;
}
Column::Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.Column)
}
Column::Column(const Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  null_bitmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    null_bitmap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_null_bitmap()) {
    null_bitmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_null_bitmap(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_fixed_size_column()) {
    fixed_size_column_ = new ::PolarXRPC::Resultset::FixedSizeColumn(*from.fixed_size_column_);
  } else {
    fixed_size_column_ = nullptr;
  }
  if (from._internal_has_variable_size_column()) {
    variable_size_column_ = new ::PolarXRPC::Resultset::VariableSizeColumn(*from.variable_size_column_);
  } else {
    variable_size_column_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.Column)
}

inline void Column::SharedCtor() {
null_bitmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  null_bitmap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fixed_size_column_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&variable_size_column_) -
    reinterpret_cast<char*>(&fixed_size_column_)) + sizeof(variable_size_column_));
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Resultset.Column)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Column::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  null_bitmap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fixed_size_column_;
  if (this != internal_default_instance()) delete variable_size_column_;
}

void Column::ArenaDtor(void* object) {
  Column* _this = reinterpret_cast< Column* >(object);
  (void)_this;
}
void Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Resultset.Column)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      null_bitmap_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fixed_size_column_ != nullptr);
      fixed_size_column_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(variable_size_column_ != nullptr);
      variable_size_column_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes null_bitmap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_null_bitmap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Resultset.FixedSizeColumn fixed_size_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_size_column(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Resultset.VariableSizeColumn variable_size_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_variable_size_column(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Column::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Resultset.Column)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes null_bitmap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_null_bitmap(), target);
  }

  // optional .PolarXRPC.Resultset.FixedSizeColumn fixed_size_column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fixed_size_column(this), target, stream);
  }

  // optional .PolarXRPC.Resultset.VariableSizeColumn variable_size_column = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::variable_size_column(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Resultset.Column)
  return target;
}

size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Resultset.Column)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes null_bitmap = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_null_bitmap());
    }

    // optional .PolarXRPC.Resultset.FixedSizeColumn fixed_size_column = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fixed_size_column_);
    }

    // optional .PolarXRPC.Resultset.VariableSizeColumn variable_size_column = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *variable_size_column_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Column::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Column::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Column::GetClassData() const { return &_class_data_; }

void Column::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Column *>(to)->MergeFrom(
      static_cast<const Column &>(from));
}


void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Resultset.Column)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_null_bitmap(from._internal_null_bitmap());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_fixed_size_column()->::PolarXRPC::Resultset::FixedSizeColumn::MergeFrom(from._internal_fixed_size_column());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_variable_size_column()->::PolarXRPC::Resultset::VariableSizeColumn::MergeFrom(from._internal_variable_size_column());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Resultset.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  if (_internal_has_fixed_size_column()) {
    if (!fixed_size_column_->IsInitialized()) return false;
  }
  if (_internal_has_variable_size_column()) {
    if (!variable_size_column_->IsInitialized()) return false;
  }
  return true;
}

void Column::InternalSwap(Column* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &null_bitmap_, lhs_arena,
      &other->null_bitmap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Column, variable_size_column_)
      + sizeof(Column::variable_size_column_)
      - PROTOBUF_FIELD_OFFSET(Column, fixed_size_column_)>(
          reinterpret_cast<char*>(&fixed_size_column_),
          reinterpret_cast<char*>(&other->fixed_size_column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Column::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[7]);
}

// ===================================================================

class FixedSizeColumn::_Internal {
 public:
  using HasBits = decltype(std::declval<FixedSizeColumn>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FixedSizeColumn::FixedSizeColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.FixedSizeColumn)
}
FixedSizeColumn::FixedSizeColumn(const FixedSizeColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.FixedSizeColumn)
}

inline void FixedSizeColumn::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FixedSizeColumn::~FixedSizeColumn() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Resultset.FixedSizeColumn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FixedSizeColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FixedSizeColumn::ArenaDtor(void* object) {
  FixedSizeColumn* _this = reinterpret_cast< FixedSizeColumn* >(object);
  (void)_this;
}
void FixedSizeColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedSizeColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FixedSizeColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Resultset.FixedSizeColumn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedSizeColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FixedSizeColumn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Resultset.FixedSizeColumn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Resultset.FixedSizeColumn)
  return target;
}

size_t FixedSizeColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Resultset.FixedSizeColumn)
  size_t total_size = 0;

  // required bytes value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FixedSizeColumn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FixedSizeColumn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FixedSizeColumn::GetClassData() const { return &_class_data_; }

void FixedSizeColumn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FixedSizeColumn *>(to)->MergeFrom(
      static_cast<const FixedSizeColumn &>(from));
}


void FixedSizeColumn::MergeFrom(const FixedSizeColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Resultset.FixedSizeColumn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FixedSizeColumn::CopyFrom(const FixedSizeColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Resultset.FixedSizeColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedSizeColumn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FixedSizeColumn::InternalSwap(FixedSizeColumn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedSizeColumn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[8]);
}

// ===================================================================

class VariableSizeColumn::_Internal {
 public:
  using HasBits = decltype(std::declval<VariableSizeColumn>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VariableSizeColumn::VariableSizeColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Resultset.VariableSizeColumn)
}
VariableSizeColumn::VariableSizeColumn(const VariableSizeColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Resultset.VariableSizeColumn)
}

inline void VariableSizeColumn::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VariableSizeColumn::~VariableSizeColumn() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Resultset.VariableSizeColumn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableSizeColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariableSizeColumn::ArenaDtor(void* object) {
  VariableSizeColumn* _this = reinterpret_cast< VariableSizeColumn* >(object);
  (void)_this;
}
void VariableSizeColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableSizeColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableSizeColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Resultset.VariableSizeColumn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableSizeColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableSizeColumn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Resultset.VariableSizeColumn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Resultset.VariableSizeColumn)
  return target;
}

size_t VariableSizeColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Resultset.VariableSizeColumn)
  size_t total_size = 0;

  // required bytes value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableSizeColumn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableSizeColumn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableSizeColumn::GetClassData() const { return &_class_data_; }

void VariableSizeColumn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VariableSizeColumn *>(to)->MergeFrom(
      static_cast<const VariableSizeColumn &>(from));
}


void VariableSizeColumn::MergeFrom(const VariableSizeColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Resultset.VariableSizeColumn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableSizeColumn::CopyFrom(const VariableSizeColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Resultset.VariableSizeColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableSizeColumn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VariableSizeColumn::InternalSwap(VariableSizeColumn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableSizeColumn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fresultset_2eproto_getter, &descriptor_table_polarx_5fresultset_2eproto_once,
      file_level_metadata_polarx_5fresultset_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Resultset
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::FetchDoneMoreOutParams* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::FetchDoneMoreOutParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::FetchDoneMoreOutParams >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::FetchDoneMoreResultsets* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::FetchDoneMoreResultsets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::FetchDoneMoreResultsets >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::FetchDone* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::FetchDone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::FetchDone >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::ColumnMetaData* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::ColumnMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::ColumnMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::Row* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::Row >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::TokenDone* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::TokenDone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::TokenDone >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::Chunk* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::Column* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::Column >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::FixedSizeColumn* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::FixedSizeColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::FixedSizeColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Resultset::VariableSizeColumn* Arena::CreateMaybeMessage< ::PolarXRPC::Resultset::VariableSizeColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Resultset::VariableSizeColumn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
