// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_physical_backfill.proto

#include "polarx_physical_backfill.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
namespace PhysicalBackfill {
constexpr TableInfo::TableInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : physical_partition_name_()
  , file_info_()
  , table_schema_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partitioned_(false){}
struct TableInfoDefaultTypeInternal {
  constexpr TableInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableInfoDefaultTypeInternal() {}
  union {
    TableInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableInfoDefaultTypeInternal _TableInfo_default_instance_;
constexpr FileInfo::FileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partition_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_size_(uint64_t{0u})
  , existence_(false)
  , temp_file_(false){}
struct FileInfoDefaultTypeInternal {
  constexpr FileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileInfoDefaultTypeInternal _FileInfo_default_instance_;
constexpr DiskInfo::DiskInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_size_(uint64_t{0u})
  , free_size_(uint64_t{0u})
  , used_size_(uint64_t{0u}){}
struct DiskInfoDefaultTypeInternal {
  constexpr DiskInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiskInfoDefaultTypeInternal() {}
  union {
    DiskInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiskInfoDefaultTypeInternal _DiskInfo_default_instance_;
constexpr GetFileInfoOperator::GetFileInfoOperator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_info_(nullptr)
  , disk_info_(nullptr)
  , operator_type_(1)
{}
struct GetFileInfoOperatorDefaultTypeInternal {
  constexpr GetFileInfoOperatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFileInfoOperatorDefaultTypeInternal() {}
  union {
    GetFileInfoOperator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFileInfoOperatorDefaultTypeInternal _GetFileInfoOperator_default_instance_;
constexpr TransferFileDataOperator::TransferFileDataOperator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_info_(nullptr)
  , disk_info_(nullptr)
  , buffer_len_(uint64_t{0u})
  , offset_(uint64_t{0u})
  , operator_type_(1)
{}
struct TransferFileDataOperatorDefaultTypeInternal {
  constexpr TransferFileDataOperatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferFileDataOperatorDefaultTypeInternal() {}
  union {
    TransferFileDataOperator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferFileDataOperatorDefaultTypeInternal _TransferFileDataOperator_default_instance_;
constexpr FileManageOperator::FileManageOperator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_info_(nullptr)
  , operator_type_(1)
{}
struct FileManageOperatorDefaultTypeInternal {
  constexpr FileManageOperatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileManageOperatorDefaultTypeInternal() {}
  union {
    FileManageOperator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileManageOperatorDefaultTypeInternal _FileManageOperator_default_instance_;
constexpr FileManageOperatorResponse::FileManageOperatorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(false){}
struct FileManageOperatorResponseDefaultTypeInternal {
  constexpr FileManageOperatorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileManageOperatorResponseDefaultTypeInternal() {}
  union {
    FileManageOperatorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileManageOperatorResponseDefaultTypeInternal _FileManageOperatorResponse_default_instance_;
}  // namespace PhysicalBackfill
}  // namespace PolarXRPC
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_polarx_5fphysical_5fbackfill_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_polarx_5fphysical_5fbackfill_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_polarx_5fphysical_5fbackfill_2eproto = nullptr;

const uint32_t TableStruct_polarx_5fphysical_5fbackfill_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TableInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TableInfo, table_schema_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TableInfo, table_name_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TableInfo, partitioned_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TableInfo, physical_partition_name_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TableInfo, file_info_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileInfo, directory_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileInfo, file_name_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileInfo, partition_name_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileInfo, data_size_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileInfo, existence_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileInfo, temp_file_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::DiskInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::DiskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::DiskInfo, directory_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::DiskInfo, total_size_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::DiskInfo, free_size_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::DiskInfo, used_size_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::GetFileInfoOperator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::GetFileInfoOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::GetFileInfoOperator, operator_type_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::GetFileInfoOperator, table_info_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::GetFileInfoOperator, disk_info_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator, operator_type_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator, file_info_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator, disk_info_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator, buffer_len_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator, buffer_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator, offset_),
  5,
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileManageOperator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileManageOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileManageOperator, operator_type_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileManageOperator, table_info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse, result_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse, detail_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::PolarXRPC::PhysicalBackfill::TableInfo)},
  { 16, 28, -1, sizeof(::PolarXRPC::PhysicalBackfill::FileInfo)},
  { 34, 44, -1, sizeof(::PolarXRPC::PhysicalBackfill::DiskInfo)},
  { 48, 57, -1, sizeof(::PolarXRPC::PhysicalBackfill::GetFileInfoOperator)},
  { 60, 72, -1, sizeof(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator)},
  { 78, 86, -1, sizeof(::PolarXRPC::PhysicalBackfill::FileManageOperator)},
  { 88, 96, -1, sizeof(::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::PhysicalBackfill::_TableInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::PhysicalBackfill::_FileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::PhysicalBackfill::_DiskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::PhysicalBackfill::_GetFileInfoOperator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::PhysicalBackfill::_TransferFileDataOperator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::PhysicalBackfill::_FileManageOperator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::PhysicalBackfill::_FileManageOperatorResponse_default_instance_),
};

const char descriptor_table_protodef_polarx_5fphysical_5fbackfill_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036polarx_physical_backfill.proto\022\032PolarX"
  "RPC.PhysicalBackfill\"\244\001\n\tTableInfo\022\024\n\014ta"
  "ble_schema\030\001 \002(\t\022\022\n\ntable_name\030\002 \002(\t\022\023\n\013"
  "partitioned\030\003 \002(\010\022\037\n\027physical_partition_"
  "name\030\004 \003(\t\0227\n\tfile_info\030\005 \003(\0132$.PolarXRP"
  "C.PhysicalBackfill.FileInfo\"\203\001\n\010FileInfo"
  "\022\021\n\tdirectory\030\001 \002(\t\022\021\n\tfile_name\030\002 \002(\t\022\030"
  "\n\016partition_name\030\003 \002(\t:\000\022\021\n\tdata_size\030\004 "
  "\001(\004\022\021\n\texistence\030\005 \001(\010\022\021\n\ttemp_file\030\006 \001("
  "\010\"W\n\010DiskInfo\022\021\n\tdirectory\030\001 \002(\t\022\022\n\ntota"
  "l_size\030\002 \001(\004\022\021\n\tfree_size\030\003 \001(\004\022\021\n\tused_"
  "size\030\004 \001(\004\"\256\003\n\023GetFileInfoOperator\022K\n\rop"
  "erator_type\030\001 \002(\01624.PolarXRPC.PhysicalBa"
  "ckfill.GetFileInfoOperator.Type\0229\n\ntable"
  "_info\030\002 \001(\0132%.PolarXRPC.PhysicalBackfill"
  ".TableInfo\0227\n\tdisk_info\030\003 \001(\0132$.PolarXRP"
  "C.PhysicalBackfill.DiskInfo\"\325\001\n\004Type\022\034\n\030"
  "CHECK_SRC_FILE_EXISTENCE\020\001\022\034\n\030CHECK_TAR_"
  "FILE_EXISTENCE\020\002\022\023\n\017GET_TAR_IBD_DIR\020\003\022\024\n"
  "\020GET_SRC_FILE_LEN\020\004\022\032\n\026GET_SRC_DIR_FREE_"
  "SPACE\020\005\022\032\n\026GET_TAR_DIR_FREE_SPACE\020\006\022\030\n\024G"
  "ET_SRC_IBD_TEMP_DIR\020\007\022\024\n\020GET_TAR_FILE_LE"
  "N\020\010\"\316\002\n\030TransferFileDataOperator\022P\n\roper"
  "ator_type\030\001 \002(\01629.PolarXRPC.PhysicalBack"
  "fill.TransferFileDataOperator.Type\0227\n\tfi"
  "le_info\030\002 \002(\0132$.PolarXRPC.PhysicalBackfi"
  "ll.FileInfo\0227\n\tdisk_info\030\003 \001(\0132$.PolarXR"
  "PC.PhysicalBackfill.DiskInfo\022\022\n\nbuffer_l"
  "en\030\004 \002(\004\022\016\n\006buffer\030\005 \001(\014\022\016\n\006offset\030\006 \002(\004"
  "\":\n\004Type\022\031\n\025GET_DATA_FROM_SRC_IBD\020\001\022\027\n\023P"
  "UT_DATA_TO_TAR_IBD\020\002\"\346\002\n\022FileManageOpera"
  "tor\022J\n\roperator_type\030\001 \002(\01623.PolarXRPC.P"
  "hysicalBackfill.FileManageOperator.Type\022"
  "9\n\ntable_info\030\002 \001(\0132%.PolarXRPC.Physical"
  "Backfill.TableInfo\"\310\001\n\004Type\022\032\n\026CREATE_TE"
  "MP_DIR_IN_SRC\020\001\022\037\n\033COPY_IBD_TO_TEMP_DIR_"
  "IN_SRC\020\002\022#\n\037DELETE_IBD_FROM_TEMP_DIR_IN_"
  "SRC\020\003\022\026\n\022FLUSH_TABLE_IN_SRC\020\004\022\027\n\023UNLOCK_"
  "TABLE_IN_SRC\020\005\022\032\n\026DELETE_TEMP_DIR_IN_SRC"
  "\020\006\022\021\n\rFALLOCATE_IBD\020\007\"<\n\032FileManageOpera"
  "torResponse\022\016\n\006result\030\001 \002(\010\022\016\n\006detail\030\002 "
  "\001(\tB\036\n\034com.mysql.cj.polarx.protobuf"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polarx_5fphysical_5fbackfill_2eproto = {
  false, false, 1675, descriptor_table_protodef_polarx_5fphysical_5fbackfill_2eproto, "polarx_physical_backfill.proto", 
  &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_polarx_5fphysical_5fbackfill_2eproto::offsets,
  file_level_metadata_polarx_5fphysical_5fbackfill_2eproto, file_level_enum_descriptors_polarx_5fphysical_5fbackfill_2eproto, file_level_service_descriptors_polarx_5fphysical_5fbackfill_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_polarx_5fphysical_5fbackfill_2eproto_getter() {
  return &descriptor_table_polarx_5fphysical_5fbackfill_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_polarx_5fphysical_5fbackfill_2eproto(&descriptor_table_polarx_5fphysical_5fbackfill_2eproto);
namespace PolarXRPC {
namespace PhysicalBackfill {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetFileInfoOperator_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_5fphysical_5fbackfill_2eproto);
  return file_level_enum_descriptors_polarx_5fphysical_5fbackfill_2eproto[0];
}
bool GetFileInfoOperator_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetFileInfoOperator_Type GetFileInfoOperator::CHECK_SRC_FILE_EXISTENCE;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::CHECK_TAR_FILE_EXISTENCE;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_TAR_IBD_DIR;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_SRC_FILE_LEN;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_SRC_DIR_FREE_SPACE;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_TAR_DIR_FREE_SPACE;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_SRC_IBD_TEMP_DIR;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_TAR_FILE_LEN;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::Type_MIN;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::Type_MAX;
constexpr int GetFileInfoOperator::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferFileDataOperator_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_5fphysical_5fbackfill_2eproto);
  return file_level_enum_descriptors_polarx_5fphysical_5fbackfill_2eproto[1];
}
bool TransferFileDataOperator_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransferFileDataOperator_Type TransferFileDataOperator::GET_DATA_FROM_SRC_IBD;
constexpr TransferFileDataOperator_Type TransferFileDataOperator::PUT_DATA_TO_TAR_IBD;
constexpr TransferFileDataOperator_Type TransferFileDataOperator::Type_MIN;
constexpr TransferFileDataOperator_Type TransferFileDataOperator::Type_MAX;
constexpr int TransferFileDataOperator::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileManageOperator_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_5fphysical_5fbackfill_2eproto);
  return file_level_enum_descriptors_polarx_5fphysical_5fbackfill_2eproto[2];
}
bool FileManageOperator_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FileManageOperator_Type FileManageOperator::CREATE_TEMP_DIR_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::COPY_IBD_TO_TEMP_DIR_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::DELETE_IBD_FROM_TEMP_DIR_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::FLUSH_TABLE_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::UNLOCK_TABLE_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::DELETE_TEMP_DIR_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::FALLOCATE_IBD;
constexpr FileManageOperator_Type FileManageOperator::Type_MIN;
constexpr FileManageOperator_Type FileManageOperator::Type_MAX;
constexpr int FileManageOperator::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TableInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TableInfo>()._has_bits_);
  static void set_has_table_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partitioned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TableInfo::TableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  physical_partition_name_(arena),
  file_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.TableInfo)
}
TableInfo::TableInfo(const TableInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      physical_partition_name_(from.physical_partition_name_),
      file_info_(from.file_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table_schema()) {
    table_schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_schema(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table_name()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  partitioned_ = from.partitioned_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.TableInfo)
}

inline void TableInfo::SharedCtor() {
table_schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partitioned_ = false;
}

TableInfo::~TableInfo() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.TableInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableInfo::ArenaDtor(void* object) {
  TableInfo* _this = reinterpret_cast< TableInfo* >(object);
  (void)_this;
}
void TableInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.TableInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  physical_partition_name_.Clear();
  file_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      table_schema_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_.ClearNonDefaultToEmpty();
    }
  }
  partitioned_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string table_schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.PhysicalBackfill.TableInfo.table_schema");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.PhysicalBackfill.TableInfo.table_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool partitioned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_partitioned(&has_bits);
          partitioned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string physical_partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_physical_partition_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.PhysicalBackfill.TableInfo.physical_partition_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .PolarXRPC.PhysicalBackfill.FileInfo file_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.TableInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string table_schema = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_schema().data(), static_cast<int>(this->_internal_table_schema().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.PhysicalBackfill.TableInfo.table_schema");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_schema(), target);
  }

  // required string table_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.PhysicalBackfill.TableInfo.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // required bool partitioned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_partitioned(), target);
  }

  // repeated string physical_partition_name = 4;
  for (int i = 0, n = this->_internal_physical_partition_name_size(); i < n; i++) {
    const auto& s = this->_internal_physical_partition_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.PhysicalBackfill.TableInfo.physical_partition_name");
    target = stream->WriteString(4, s, target);
  }

  // repeated .PolarXRPC.PhysicalBackfill.FileInfo file_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_file_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_file_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.TableInfo)
  return target;
}

size_t TableInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.PhysicalBackfill.TableInfo)
  size_t total_size = 0;

  if (_internal_has_table_schema()) {
    // required string table_schema = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_schema());
  }

  if (_internal_has_table_name()) {
    // required string table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (_internal_has_partitioned()) {
    // required bool partitioned = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.TableInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string table_schema = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_schema());

    // required string table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());

    // required bool partitioned = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string physical_partition_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(physical_partition_name_.size());
  for (int i = 0, n = physical_partition_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      physical_partition_name_.Get(i));
  }

  // repeated .PolarXRPC.PhysicalBackfill.FileInfo file_info = 5;
  total_size += 1UL * this->_internal_file_info_size();
  for (const auto& msg : this->file_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableInfo::GetClassData() const { return &_class_data_; }

void TableInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableInfo *>(to)->MergeFrom(
      static_cast<const TableInfo &>(from));
}


void TableInfo::MergeFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  physical_partition_name_.MergeFrom(from.physical_partition_name_);
  file_info_.MergeFrom(from.file_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_table_schema(from._internal_table_schema());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_table_name(from._internal_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      partitioned_ = from.partitioned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableInfo::CopyFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(file_info_))
    return false;
  return true;
}

void TableInfo::InternalSwap(TableInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  physical_partition_name_.InternalSwap(&other->physical_partition_name_);
  file_info_.InternalSwap(&other->file_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_schema_, lhs_arena,
      &other->table_schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  swap(partitioned_, other->partitioned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_getter, &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once,
      file_level_metadata_polarx_5fphysical_5fbackfill_2eproto[0]);
}

// ===================================================================

class FileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FileInfo>()._has_bits_);
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partition_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_existence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_temp_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directory(), 
      GetArenaForAllocation());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_partition_name()) {
    partition_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partition_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&data_size_, &from.data_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_file_) -
    reinterpret_cast<char*>(&data_size_)) + sizeof(temp_file_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.FileInfo)
}

inline void FileInfo::SharedCtor() {
directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temp_file_) -
    reinterpret_cast<char*>(&data_size_)) + sizeof(temp_file_));
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.FileInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::ArenaDtor(void* object) {
  FileInfo* _this = reinterpret_cast< FileInfo* >(object);
  (void)_this;
}
void FileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.FileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      partition_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&data_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temp_file_) -
        reinterpret_cast<char*>(&data_size_)) + sizeof(temp_file_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.PhysicalBackfill.FileInfo.directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.PhysicalBackfill.FileInfo.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string partition_name = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.PhysicalBackfill.FileInfo.partition_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 data_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_data_size(&has_bits);
          data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool existence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_existence(&has_bits);
          existence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool temp_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_temp_file(&has_bits);
          temp_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.FileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string directory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.PhysicalBackfill.FileInfo.directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  // required string file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.PhysicalBackfill.FileInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // required string partition_name = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.PhysicalBackfill.FileInfo.partition_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partition_name(), target);
  }

  // optional uint64 data_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_data_size(), target);
  }

  // optional bool existence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_existence(), target);
  }

  // optional bool temp_file = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_temp_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.FileInfo)
  return target;
}

size_t FileInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.PhysicalBackfill.FileInfo)
  size_t total_size = 0;

  if (_internal_has_directory()) {
    // required string directory = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  if (_internal_has_file_name()) {
    // required string file_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  if (_internal_has_partition_name()) {
    // required string partition_name = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  return total_size;
}
size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.FileInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string directory = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());

    // required string file_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());

    // required string partition_name = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional uint64 data_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_data_size());
    }

    // optional bool existence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool temp_file = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileInfo::GetClassData() const { return &_class_data_; }

void FileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileInfo *>(to)->MergeFrom(
      static_cast<const FileInfo &>(from));
}


void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_partition_name(from._internal_partition_name());
    }
    if (cached_has_bits & 0x00000008u) {
      data_size_ = from.data_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      existence_ = from.existence_;
    }
    if (cached_has_bits & 0x00000020u) {
      temp_file_ = from.temp_file_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &directory_, lhs_arena,
      &other->directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partition_name_, lhs_arena,
      &other->partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, temp_file_)
      + sizeof(FileInfo::temp_file_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, data_size_)>(
          reinterpret_cast<char*>(&data_size_),
          reinterpret_cast<char*>(&other->data_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_getter, &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once,
      file_level_metadata_polarx_5fphysical_5fbackfill_2eproto[1]);
}

// ===================================================================

class DiskInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DiskInfo>()._has_bits_);
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_free_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_used_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DiskInfo::DiskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.DiskInfo)
}
DiskInfo::DiskInfo(const DiskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directory(), 
      GetArenaForAllocation());
  }
  ::memcpy(&total_size_, &from.total_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_size_) -
    reinterpret_cast<char*>(&total_size_)) + sizeof(used_size_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.DiskInfo)
}

inline void DiskInfo::SharedCtor() {
directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&used_size_) -
    reinterpret_cast<char*>(&total_size_)) + sizeof(used_size_));
}

DiskInfo::~DiskInfo() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.DiskInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiskInfo::ArenaDtor(void* object) {
  DiskInfo* _this = reinterpret_cast< DiskInfo* >(object);
  (void)_this;
}
void DiskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    directory_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&total_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_size_) -
        reinterpret_cast<char*>(&total_size_)) + sizeof(used_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.PhysicalBackfill.DiskInfo.directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_size(&has_bits);
          total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 free_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_free_size(&has_bits);
          free_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 used_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_used_size(&has_bits);
          used_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiskInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string directory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.PhysicalBackfill.DiskInfo.directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  // optional uint64 total_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_size(), target);
  }

  // optional uint64 free_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_free_size(), target);
  }

  // optional uint64 used_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_used_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.DiskInfo)
  return target;
}

size_t DiskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  size_t total_size = 0;

  // required string directory = 1;
  if (_internal_has_directory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint64 total_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_size());
    }

    // optional uint64 free_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_free_size());
    }

    // optional uint64 used_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_used_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiskInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiskInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiskInfo::GetClassData() const { return &_class_data_; }

void DiskInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiskInfo *>(to)->MergeFrom(
      static_cast<const DiskInfo &>(from));
}


void DiskInfo::MergeFrom(const DiskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000002u) {
      total_size_ = from.total_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      free_size_ = from.free_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      used_size_ = from.used_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiskInfo::CopyFrom(const DiskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DiskInfo::InternalSwap(DiskInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &directory_, lhs_arena,
      &other->directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiskInfo, used_size_)
      + sizeof(DiskInfo::used_size_)
      - PROTOBUF_FIELD_OFFSET(DiskInfo, total_size_)>(
          reinterpret_cast<char*>(&total_size_),
          reinterpret_cast<char*>(&other->total_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_getter, &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once,
      file_level_metadata_polarx_5fphysical_5fbackfill_2eproto[2]);
}

// ===================================================================

class GetFileInfoOperator::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFileInfoOperator>()._has_bits_);
  static void set_has_operator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PolarXRPC::PhysicalBackfill::TableInfo& table_info(const GetFileInfoOperator* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PolarXRPC::PhysicalBackfill::DiskInfo& disk_info(const GetFileInfoOperator* msg);
  static void set_has_disk_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::PolarXRPC::PhysicalBackfill::TableInfo&
GetFileInfoOperator::_Internal::table_info(const GetFileInfoOperator* msg) {
  return *msg->table_info_;
}
const ::PolarXRPC::PhysicalBackfill::DiskInfo&
GetFileInfoOperator::_Internal::disk_info(const GetFileInfoOperator* msg) {
  return *msg->disk_info_;
}
GetFileInfoOperator::GetFileInfoOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
}
GetFileInfoOperator::GetFileInfoOperator(const GetFileInfoOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::PolarXRPC::PhysicalBackfill::TableInfo(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  if (from._internal_has_disk_info()) {
    disk_info_ = new ::PolarXRPC::PhysicalBackfill::DiskInfo(*from.disk_info_);
  } else {
    disk_info_ = nullptr;
  }
  operator_type_ = from.operator_type_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
}

inline void GetFileInfoOperator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disk_info_) -
    reinterpret_cast<char*>(&table_info_)) + sizeof(disk_info_));
operator_type_ = 1;
}

GetFileInfoOperator::~GetFileInfoOperator() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFileInfoOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
  if (this != internal_default_instance()) delete disk_info_;
}

void GetFileInfoOperator::ArenaDtor(void* object) {
  GetFileInfoOperator* _this = reinterpret_cast< GetFileInfoOperator* >(object);
  (void)_this;
}
void GetFileInfoOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileInfoOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFileInfoOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disk_info_ != nullptr);
      disk_info_->Clear();
    }
    operator_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileInfoOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.PhysicalBackfill.GetFileInfoOperator.Type operator_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::PhysicalBackfill::GetFileInfoOperator_Type_IsValid(val))) {
            _internal_set_operator_type(static_cast<::PolarXRPC::PhysicalBackfill::GetFileInfoOperator_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFileInfoOperator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.PhysicalBackfill.GetFileInfoOperator.Type operator_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operator_type(), target);
  }

  // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_info(this), target, stream);
  }

  // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::disk_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  return target;
}

size_t GetFileInfoOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  size_t total_size = 0;

  // required .PolarXRPC.PhysicalBackfill.GetFileInfoOperator.Type operator_type = 1;
  if (_internal_has_operator_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_info_);
    }

    // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disk_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileInfoOperator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFileInfoOperator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileInfoOperator::GetClassData() const { return &_class_data_; }

void GetFileInfoOperator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFileInfoOperator *>(to)->MergeFrom(
      static_cast<const GetFileInfoOperator &>(from));
}


void GetFileInfoOperator::MergeFrom(const GetFileInfoOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_info()->::PolarXRPC::PhysicalBackfill::TableInfo::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_disk_info()->::PolarXRPC::PhysicalBackfill::DiskInfo::MergeFrom(from._internal_disk_info());
    }
    if (cached_has_bits & 0x00000004u) {
      operator_type_ = from.operator_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileInfoOperator::CopyFrom(const GetFileInfoOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileInfoOperator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  if (_internal_has_disk_info()) {
    if (!disk_info_->IsInitialized()) return false;
  }
  return true;
}

void GetFileInfoOperator::InternalSwap(GetFileInfoOperator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFileInfoOperator, disk_info_)
      + sizeof(GetFileInfoOperator::disk_info_)
      - PROTOBUF_FIELD_OFFSET(GetFileInfoOperator, table_info_)>(
          reinterpret_cast<char*>(&table_info_),
          reinterpret_cast<char*>(&other->table_info_));
  swap(operator_type_, other->operator_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileInfoOperator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_getter, &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once,
      file_level_metadata_polarx_5fphysical_5fbackfill_2eproto[3]);
}

// ===================================================================

class TransferFileDataOperator::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferFileDataOperator>()._has_bits_);
  static void set_has_operator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PolarXRPC::PhysicalBackfill::FileInfo& file_info(const TransferFileDataOperator* msg);
  static void set_has_file_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PolarXRPC::PhysicalBackfill::DiskInfo& disk_info(const TransferFileDataOperator* msg);
  static void set_has_disk_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buffer_len(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003a) ^ 0x0000003a) != 0;
  }
};

const ::PolarXRPC::PhysicalBackfill::FileInfo&
TransferFileDataOperator::_Internal::file_info(const TransferFileDataOperator* msg) {
  return *msg->file_info_;
}
const ::PolarXRPC::PhysicalBackfill::DiskInfo&
TransferFileDataOperator::_Internal::disk_info(const TransferFileDataOperator* msg) {
  return *msg->disk_info_;
}
TransferFileDataOperator::TransferFileDataOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
}
TransferFileDataOperator::TransferFileDataOperator(const TransferFileDataOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buffer()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_file_info()) {
    file_info_ = new ::PolarXRPC::PhysicalBackfill::FileInfo(*from.file_info_);
  } else {
    file_info_ = nullptr;
  }
  if (from._internal_has_disk_info()) {
    disk_info_ = new ::PolarXRPC::PhysicalBackfill::DiskInfo(*from.disk_info_);
  } else {
    disk_info_ = nullptr;
  }
  ::memcpy(&buffer_len_, &from.buffer_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator_type_) -
    reinterpret_cast<char*>(&buffer_len_)) + sizeof(operator_type_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
}

inline void TransferFileDataOperator::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&file_info_)) + sizeof(offset_));
operator_type_ = 1;
}

TransferFileDataOperator::~TransferFileDataOperator() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransferFileDataOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_info_;
  if (this != internal_default_instance()) delete disk_info_;
}

void TransferFileDataOperator::ArenaDtor(void* object) {
  TransferFileDataOperator* _this = reinterpret_cast< TransferFileDataOperator* >(object);
  (void)_this;
}
void TransferFileDataOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferFileDataOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferFileDataOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      buffer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(file_info_ != nullptr);
      file_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(disk_info_ != nullptr);
      disk_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&buffer_len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&buffer_len_)) + sizeof(offset_));
    operator_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferFileDataOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.PhysicalBackfill.TransferFileDataOperator.Type operator_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator_Type_IsValid(val))) {
            _internal_set_operator_type(static_cast<::PolarXRPC::PhysicalBackfill::TransferFileDataOperator_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .PolarXRPC.PhysicalBackfill.FileInfo file_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 buffer_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_buffer_len(&has_bits);
          buffer_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes buffer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferFileDataOperator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.PhysicalBackfill.TransferFileDataOperator.Type operator_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operator_type(), target);
  }

  // required .PolarXRPC.PhysicalBackfill.FileInfo file_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::file_info(this), target, stream);
  }

  // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::disk_info(this), target, stream);
  }

  // required uint64 buffer_len = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_buffer_len(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buffer(), target);
  }

  // required uint64 offset = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  return target;
}

size_t TransferFileDataOperator::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  size_t total_size = 0;

  if (_internal_has_file_info()) {
    // required .PolarXRPC.PhysicalBackfill.FileInfo file_info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_info_);
  }

  if (_internal_has_buffer_len()) {
    // required uint64 buffer_len = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_buffer_len());
  }

  if (_internal_has_offset()) {
    // required uint64 offset = 6;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  if (_internal_has_operator_type()) {
    // required .PolarXRPC.PhysicalBackfill.TransferFileDataOperator.Type operator_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());
  }

  return total_size;
}
size_t TransferFileDataOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003a) ^ 0x0000003a) == 0) {  // All required fields are present.
    // required .PolarXRPC.PhysicalBackfill.FileInfo file_info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_info_);

    // required uint64 buffer_len = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_buffer_len());

    // required uint64 offset = 6;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());

    // required .PolarXRPC.PhysicalBackfill.TransferFileDataOperator.Type operator_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes buffer = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disk_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferFileDataOperator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransferFileDataOperator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferFileDataOperator::GetClassData() const { return &_class_data_; }

void TransferFileDataOperator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransferFileDataOperator *>(to)->MergeFrom(
      static_cast<const TransferFileDataOperator &>(from));
}


void TransferFileDataOperator::MergeFrom(const TransferFileDataOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_buffer(from._internal_buffer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_file_info()->::PolarXRPC::PhysicalBackfill::FileInfo::MergeFrom(from._internal_file_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_disk_info()->::PolarXRPC::PhysicalBackfill::DiskInfo::MergeFrom(from._internal_disk_info());
    }
    if (cached_has_bits & 0x00000008u) {
      buffer_len_ = from.buffer_len_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      operator_type_ = from.operator_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferFileDataOperator::CopyFrom(const TransferFileDataOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferFileDataOperator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_file_info()) {
    if (!file_info_->IsInitialized()) return false;
  }
  if (_internal_has_disk_info()) {
    if (!disk_info_->IsInitialized()) return false;
  }
  return true;
}

void TransferFileDataOperator::InternalSwap(TransferFileDataOperator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferFileDataOperator, offset_)
      + sizeof(TransferFileDataOperator::offset_)
      - PROTOBUF_FIELD_OFFSET(TransferFileDataOperator, file_info_)>(
          reinterpret_cast<char*>(&file_info_),
          reinterpret_cast<char*>(&other->file_info_));
  swap(operator_type_, other->operator_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferFileDataOperator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_getter, &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once,
      file_level_metadata_polarx_5fphysical_5fbackfill_2eproto[4]);
}

// ===================================================================

class FileManageOperator::_Internal {
 public:
  using HasBits = decltype(std::declval<FileManageOperator>()._has_bits_);
  static void set_has_operator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PolarXRPC::PhysicalBackfill::TableInfo& table_info(const FileManageOperator* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::PolarXRPC::PhysicalBackfill::TableInfo&
FileManageOperator::_Internal::table_info(const FileManageOperator* msg) {
  return *msg->table_info_;
}
FileManageOperator::FileManageOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.FileManageOperator)
}
FileManageOperator::FileManageOperator(const FileManageOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::PolarXRPC::PhysicalBackfill::TableInfo(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  operator_type_ = from.operator_type_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.FileManageOperator)
}

inline void FileManageOperator::SharedCtor() {
table_info_ = nullptr;
operator_type_ = 1;
}

FileManageOperator::~FileManageOperator() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.FileManageOperator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FileManageOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
}

void FileManageOperator::ArenaDtor(void* object) {
  FileManageOperator* _this = reinterpret_cast< FileManageOperator* >(object);
  (void)_this;
}
void FileManageOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileManageOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileManageOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    operator_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileManageOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.PhysicalBackfill.FileManageOperator.Type operator_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::PhysicalBackfill::FileManageOperator_Type_IsValid(val))) {
            _internal_set_operator_type(static_cast<::PolarXRPC::PhysicalBackfill::FileManageOperator_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileManageOperator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.PhysicalBackfill.FileManageOperator.Type operator_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operator_type(), target);
  }

  // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.FileManageOperator)
  return target;
}

size_t FileManageOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  size_t total_size = 0;

  // required .PolarXRPC.PhysicalBackfill.FileManageOperator.Type operator_type = 1;
  if (_internal_has_operator_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileManageOperator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileManageOperator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileManageOperator::GetClassData() const { return &_class_data_; }

void FileManageOperator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileManageOperator *>(to)->MergeFrom(
      static_cast<const FileManageOperator &>(from));
}


void FileManageOperator::MergeFrom(const FileManageOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_info()->::PolarXRPC::PhysicalBackfill::TableInfo::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      operator_type_ = from.operator_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileManageOperator::CopyFrom(const FileManageOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileManageOperator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  return true;
}

void FileManageOperator::InternalSwap(FileManageOperator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(table_info_, other->table_info_);
  swap(operator_type_, other->operator_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileManageOperator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_getter, &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once,
      file_level_metadata_polarx_5fphysical_5fbackfill_2eproto[5]);
}

// ===================================================================

class FileManageOperatorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FileManageOperatorResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

FileManageOperatorResponse::FileManageOperatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
}
FileManageOperatorResponse::FileManageOperatorResponse(const FileManageOperatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detail()) {
    detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
}

inline void FileManageOperatorResponse::SharedCtor() {
detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = false;
}

FileManageOperatorResponse::~FileManageOperatorResponse() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FileManageOperatorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileManageOperatorResponse::ArenaDtor(void* object) {
  FileManageOperatorResponse* _this = reinterpret_cast< FileManageOperatorResponse* >(object);
  (void)_this;
}
void FileManageOperatorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileManageOperatorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileManageOperatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    detail_.ClearNonDefaultToEmpty();
  }
  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileManageOperatorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.PhysicalBackfill.FileManageOperatorResponse.detail");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileManageOperatorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // optional string detail = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.PhysicalBackfill.FileManageOperatorResponse.detail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  return target;
}

size_t FileManageOperatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string detail = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileManageOperatorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileManageOperatorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileManageOperatorResponse::GetClassData() const { return &_class_data_; }

void FileManageOperatorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileManageOperatorResponse *>(to)->MergeFrom(
      static_cast<const FileManageOperatorResponse &>(from));
}


void FileManageOperatorResponse::MergeFrom(const FileManageOperatorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_detail(from._internal_detail());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileManageOperatorResponse::CopyFrom(const FileManageOperatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileManageOperatorResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FileManageOperatorResponse::InternalSwap(FileManageOperatorResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &detail_, lhs_arena,
      &other->detail_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileManageOperatorResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_getter, &descriptor_table_polarx_5fphysical_5fbackfill_2eproto_once,
      file_level_metadata_polarx_5fphysical_5fbackfill_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PhysicalBackfill
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::TableInfo* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::TableInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::TableInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::FileInfo* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::DiskInfo* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::DiskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::DiskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::GetFileInfoOperator* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::GetFileInfoOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::GetFileInfoOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::TransferFileDataOperator* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::TransferFileDataOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::TransferFileDataOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::FileManageOperator* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::FileManageOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::FileManageOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
