// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_datatypes.proto

#include "polarx_datatypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
namespace Datatypes {
constexpr Scalar_String::Scalar_String(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collation_(uint64_t{0u}){}
struct Scalar_StringDefaultTypeInternal {
  constexpr Scalar_StringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Scalar_StringDefaultTypeInternal() {}
  union {
    Scalar_String _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Scalar_StringDefaultTypeInternal _Scalar_String_default_instance_;
constexpr Scalar_Octets::Scalar_Octets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(0u){}
struct Scalar_OctetsDefaultTypeInternal {
  constexpr Scalar_OctetsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Scalar_OctetsDefaultTypeInternal() {}
  union {
    Scalar_Octets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Scalar_OctetsDefaultTypeInternal _Scalar_Octets_default_instance_;
constexpr Scalar::Scalar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : v_octets_(nullptr)
  , v_string_(nullptr)
  , v_identifier_(nullptr)
  , v_signed_int_(int64_t{0})
  , v_unsigned_int_(uint64_t{0u})
  , v_double_(0)
  , v_float_(0)
  , v_bool_(false)
  , v_position_(0u)
  , type_(1)
{}
struct ScalarDefaultTypeInternal {
  constexpr ScalarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarDefaultTypeInternal() {}
  union {
    Scalar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarDefaultTypeInternal _Scalar_default_instance_;
constexpr Object_ObjectField::Object_ObjectField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct Object_ObjectFieldDefaultTypeInternal {
  constexpr Object_ObjectFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Object_ObjectFieldDefaultTypeInternal() {}
  union {
    Object_ObjectField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Object_ObjectFieldDefaultTypeInternal _Object_ObjectField_default_instance_;
constexpr Object::Object(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fld_(){}
struct ObjectDefaultTypeInternal {
  constexpr ObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectDefaultTypeInternal() {}
  union {
    Object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectDefaultTypeInternal _Object_default_instance_;
constexpr Array::Array(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct ArrayDefaultTypeInternal {
  constexpr ArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayDefaultTypeInternal() {}
  union {
    Array _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayDefaultTypeInternal _Array_default_instance_;
constexpr Any::Any(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scalar_(nullptr)
  , obj_(nullptr)
  , array_(nullptr)
  , type_(1)
{}
struct AnyDefaultTypeInternal {
  constexpr AnyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyDefaultTypeInternal() {}
  union {
    Any _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyDefaultTypeInternal _Any_default_instance_;
constexpr SessionVariable::SessionVariable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct SessionVariableDefaultTypeInternal {
  constexpr SessionVariableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionVariableDefaultTypeInternal() {}
  union {
    SessionVariable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionVariableDefaultTypeInternal _SessionVariable_default_instance_;
}  // namespace Datatypes
}  // namespace PolarXRPC
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_polarx_5fdatatypes_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_polarx_5fdatatypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_polarx_5fdatatypes_2eproto = nullptr;

const uint32_t TableStruct_polarx_5fdatatypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar_String, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar_String, value_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar_String, collation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar_Octets, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar_Octets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar_Octets, value_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar_Octets, content_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, type_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_signed_int_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_unsigned_int_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_octets_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_double_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_float_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_bool_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_string_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_position_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Scalar, v_identifier_),
  9,
  3,
  4,
  0,
  5,
  6,
  7,
  1,
  8,
  2,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Object_ObjectField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Object_ObjectField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Object_ObjectField, key_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Object_ObjectField, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Object, fld_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Array, value_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Any, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Any, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Any, type_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Any, scalar_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Any, obj_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::Any, array_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::SessionVariable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::SessionVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::SessionVariable, key_),
  PROTOBUF_FIELD_OFFSET(::PolarXRPC::Datatypes::SessionVariable, value_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::PolarXRPC::Datatypes::Scalar_String)},
  { 10, 18, -1, sizeof(::PolarXRPC::Datatypes::Scalar_Octets)},
  { 20, 36, -1, sizeof(::PolarXRPC::Datatypes::Scalar)},
  { 46, 54, -1, sizeof(::PolarXRPC::Datatypes::Object_ObjectField)},
  { 56, -1, -1, sizeof(::PolarXRPC::Datatypes::Object)},
  { 63, -1, -1, sizeof(::PolarXRPC::Datatypes::Array)},
  { 70, 80, -1, sizeof(::PolarXRPC::Datatypes::Any)},
  { 84, 92, -1, sizeof(::PolarXRPC::Datatypes::SessionVariable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Datatypes::_Scalar_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Datatypes::_Scalar_Octets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Datatypes::_Scalar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Datatypes::_Object_ObjectField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Datatypes::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Datatypes::_Array_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Datatypes::_Any_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PolarXRPC::Datatypes::_SessionVariable_default_instance_),
};

const char descriptor_table_protodef_polarx_5fdatatypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026polarx_datatypes.proto\022\023PolarXRPC.Data"
  "types\"\325\004\n\006Scalar\022.\n\004type\030\001 \002(\0162 .PolarXR"
  "PC.Datatypes.Scalar.Type\022\024\n\014v_signed_int"
  "\030\002 \001(\022\022\026\n\016v_unsigned_int\030\003 \001(\004\0224\n\010v_octe"
  "ts\030\005 \001(\0132\".PolarXRPC.Datatypes.Scalar.Oc"
  "tets\022\020\n\010v_double\030\006 \001(\001\022\017\n\007v_float\030\007 \001(\002\022"
  "\016\n\006v_bool\030\010 \001(\010\0224\n\010v_string\030\t \001(\0132\".Pola"
  "rXRPC.Datatypes.Scalar.String\022\022\n\nv_posit"
  "ion\030\n \001(\r\0228\n\014v_identifier\030\013 \001(\0132\".PolarX"
  "RPC.Datatypes.Scalar.String\032*\n\006String\022\r\n"
  "\005value\030\001 \002(\014\022\021\n\tcollation\030\002 \001(\004\032-\n\006Octet"
  "s\022\r\n\005value\030\001 \002(\014\022\024\n\014content_type\030\002 \001(\r\"\244"
  "\001\n\004Type\022\n\n\006V_SINT\020\001\022\n\n\006V_UINT\020\002\022\n\n\006V_NUL"
  "L\020\003\022\014\n\010V_OCTETS\020\004\022\014\n\010V_DOUBLE\020\005\022\013\n\007V_FLO"
  "AT\020\006\022\n\n\006V_BOOL\020\007\022\014\n\010V_STRING\020\010\022\021\n\rV_PLAC"
  "EHOLDER\020\t\022\020\n\014V_IDENTIFIER\020\n\022\020\n\014V_RAW_STR"
  "ING\020\013\"\203\001\n\006Object\0224\n\003fld\030\001 \003(\0132\'.PolarXRP"
  "C.Datatypes.Object.ObjectField\032C\n\013Object"
  "Field\022\013\n\003key\030\001 \002(\t\022\'\n\005value\030\002 \002(\0132\030.Pola"
  "rXRPC.Datatypes.Any\"0\n\005Array\022\'\n\005value\030\001 "
  "\003(\0132\030.PolarXRPC.Datatypes.Any\"\337\001\n\003Any\022+\n"
  "\004type\030\001 \002(\0162\035.PolarXRPC.Datatypes.Any.Ty"
  "pe\022+\n\006scalar\030\002 \001(\0132\033.PolarXRPC.Datatypes"
  ".Scalar\022(\n\003obj\030\003 \001(\0132\033.PolarXRPC.Datatyp"
  "es.Object\022)\n\005array\030\004 \001(\0132\032.PolarXRPC.Dat"
  "atypes.Array\")\n\004Type\022\n\n\006SCALAR\020\001\022\n\n\006OBJE"
  "CT\020\002\022\t\n\005ARRAY\020\003\"J\n\017SessionVariable\022\013\n\003ke"
  "y\030\001 \002(\t\022*\n\005value\030\002 \002(\0132\033.PolarXRPC.Datat"
  "ypes.ScalarB\031\n\027com.mysql.cj.x.protobuf"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_polarx_5fdatatypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polarx_5fdatatypes_2eproto = {
  false, false, 1158, descriptor_table_protodef_polarx_5fdatatypes_2eproto, "polarx_datatypes.proto", 
  &descriptor_table_polarx_5fdatatypes_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_polarx_5fdatatypes_2eproto::offsets,
  file_level_metadata_polarx_5fdatatypes_2eproto, file_level_enum_descriptors_polarx_5fdatatypes_2eproto, file_level_service_descriptors_polarx_5fdatatypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_polarx_5fdatatypes_2eproto_getter() {
  return &descriptor_table_polarx_5fdatatypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_polarx_5fdatatypes_2eproto(&descriptor_table_polarx_5fdatatypes_2eproto);
namespace PolarXRPC {
namespace Datatypes {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scalar_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_5fdatatypes_2eproto);
  return file_level_enum_descriptors_polarx_5fdatatypes_2eproto[0];
}
bool Scalar_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Scalar_Type Scalar::V_SINT;
constexpr Scalar_Type Scalar::V_UINT;
constexpr Scalar_Type Scalar::V_NULL;
constexpr Scalar_Type Scalar::V_OCTETS;
constexpr Scalar_Type Scalar::V_DOUBLE;
constexpr Scalar_Type Scalar::V_FLOAT;
constexpr Scalar_Type Scalar::V_BOOL;
constexpr Scalar_Type Scalar::V_STRING;
constexpr Scalar_Type Scalar::V_PLACEHOLDER;
constexpr Scalar_Type Scalar::V_IDENTIFIER;
constexpr Scalar_Type Scalar::V_RAW_STRING;
constexpr Scalar_Type Scalar::Type_MIN;
constexpr Scalar_Type Scalar::Type_MAX;
constexpr int Scalar::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Any_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polarx_5fdatatypes_2eproto);
  return file_level_enum_descriptors_polarx_5fdatatypes_2eproto[1];
}
bool Any_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Any_Type Any::SCALAR;
constexpr Any_Type Any::OBJECT;
constexpr Any_Type Any::ARRAY;
constexpr Any_Type Any::Type_MIN;
constexpr Any_Type Any::Type_MAX;
constexpr int Any::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Scalar_String::_Internal {
 public:
  using HasBits = decltype(std::declval<Scalar_String>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Scalar_String::Scalar_String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Datatypes.Scalar.String)
}
Scalar_String::Scalar_String(const Scalar_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  collation_ = from.collation_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Datatypes.Scalar.String)
}

inline void Scalar_String::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
collation_ = uint64_t{0u};
}

Scalar_String::~Scalar_String() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Datatypes.Scalar.String)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Scalar_String::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Scalar_String::ArenaDtor(void* object) {
  Scalar_String* _this = reinterpret_cast< Scalar_String* >(object);
  (void)_this;
}
void Scalar_String::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scalar_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scalar_String::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Datatypes.Scalar.String)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  collation_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scalar_String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 collation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_collation(&has_bits);
          collation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Scalar_String::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Datatypes.Scalar.String)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // optional uint64 collation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_collation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Datatypes.Scalar.String)
  return target;
}

size_t Scalar_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Datatypes.Scalar.String)
  size_t total_size = 0;

  // required bytes value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 collation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_collation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scalar_String::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Scalar_String::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scalar_String::GetClassData() const { return &_class_data_; }

void Scalar_String::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Scalar_String *>(to)->MergeFrom(
      static_cast<const Scalar_String &>(from));
}


void Scalar_String::MergeFrom(const Scalar_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Datatypes.Scalar.String)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      collation_ = from.collation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scalar_String::CopyFrom(const Scalar_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Datatypes.Scalar.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_String::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Scalar_String::InternalSwap(Scalar_String* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(collation_, other->collation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalar_String::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fdatatypes_2eproto_getter, &descriptor_table_polarx_5fdatatypes_2eproto_once,
      file_level_metadata_polarx_5fdatatypes_2eproto[0]);
}

// ===================================================================

class Scalar_Octets::_Internal {
 public:
  using HasBits = decltype(std::declval<Scalar_Octets>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Scalar_Octets::Scalar_Octets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Datatypes.Scalar.Octets)
}
Scalar_Octets::Scalar_Octets(const Scalar_Octets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Datatypes.Scalar.Octets)
}

inline void Scalar_Octets::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_type_ = 0u;
}

Scalar_Octets::~Scalar_Octets() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Datatypes.Scalar.Octets)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Scalar_Octets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Scalar_Octets::ArenaDtor(void* object) {
  Scalar_Octets* _this = reinterpret_cast< Scalar_Octets* >(object);
  (void)_this;
}
void Scalar_Octets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scalar_Octets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scalar_Octets::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Datatypes.Scalar.Octets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  content_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scalar_Octets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_content_type(&has_bits);
          content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Scalar_Octets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Datatypes.Scalar.Octets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // optional uint32 content_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Datatypes.Scalar.Octets)
  return target;
}

size_t Scalar_Octets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Datatypes.Scalar.Octets)
  size_t total_size = 0;

  // required bytes value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 content_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_content_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scalar_Octets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Scalar_Octets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scalar_Octets::GetClassData() const { return &_class_data_; }

void Scalar_Octets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Scalar_Octets *>(to)->MergeFrom(
      static_cast<const Scalar_Octets &>(from));
}


void Scalar_Octets::MergeFrom(const Scalar_Octets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Datatypes.Scalar.Octets)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      content_type_ = from.content_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scalar_Octets::CopyFrom(const Scalar_Octets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Datatypes.Scalar.Octets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_Octets::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Scalar_Octets::InternalSwap(Scalar_Octets* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalar_Octets::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fdatatypes_2eproto_getter, &descriptor_table_polarx_5fdatatypes_2eproto_once,
      file_level_metadata_polarx_5fdatatypes_2eproto[1]);
}

// ===================================================================

class Scalar::_Internal {
 public:
  using HasBits = decltype(std::declval<Scalar>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_v_signed_int(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_unsigned_int(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PolarXRPC::Datatypes::Scalar_Octets& v_octets(const Scalar* msg);
  static void set_has_v_octets(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v_double(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_float(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_v_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::PolarXRPC::Datatypes::Scalar_String& v_string(const Scalar* msg);
  static void set_has_v_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v_position(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::PolarXRPC::Datatypes::Scalar_String& v_identifier(const Scalar* msg);
  static void set_has_v_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000200) ^ 0x00000200) != 0;
  }
};

const ::PolarXRPC::Datatypes::Scalar_Octets&
Scalar::_Internal::v_octets(const Scalar* msg) {
  return *msg->v_octets_;
}
const ::PolarXRPC::Datatypes::Scalar_String&
Scalar::_Internal::v_string(const Scalar* msg) {
  return *msg->v_string_;
}
const ::PolarXRPC::Datatypes::Scalar_String&
Scalar::_Internal::v_identifier(const Scalar* msg) {
  return *msg->v_identifier_;
}
Scalar::Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Datatypes.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_v_octets()) {
    v_octets_ = new ::PolarXRPC::Datatypes::Scalar_Octets(*from.v_octets_);
  } else {
    v_octets_ = nullptr;
  }
  if (from._internal_has_v_string()) {
    v_string_ = new ::PolarXRPC::Datatypes::Scalar_String(*from.v_string_);
  } else {
    v_string_ = nullptr;
  }
  if (from._internal_has_v_identifier()) {
    v_identifier_ = new ::PolarXRPC::Datatypes::Scalar_String(*from.v_identifier_);
  } else {
    v_identifier_ = nullptr;
  }
  ::memcpy(&v_signed_int_, &from.v_signed_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&v_signed_int_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Datatypes.Scalar)
}

inline void Scalar::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&v_octets_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v_position_) -
    reinterpret_cast<char*>(&v_octets_)) + sizeof(v_position_));
type_ = 1;
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Datatypes.Scalar)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Scalar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete v_octets_;
  if (this != internal_default_instance()) delete v_string_;
  if (this != internal_default_instance()) delete v_identifier_;
}

void Scalar::ArenaDtor(void* object) {
  Scalar* _this = reinterpret_cast< Scalar* >(object);
  (void)_this;
}
void Scalar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Datatypes.Scalar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(v_octets_ != nullptr);
      v_octets_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(v_string_ != nullptr);
      v_string_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(v_identifier_ != nullptr);
      v_identifier_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&v_signed_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_bool_) -
        reinterpret_cast<char*>(&v_signed_int_)) + sizeof(v_bool_));
  }
  if (cached_has_bits & 0x00000300u) {
    v_position_ = 0u;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scalar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.Datatypes.Scalar.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Datatypes::Scalar_Type_IsValid(val))) {
            _internal_set_type(static_cast<::PolarXRPC::Datatypes::Scalar_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional sint64 v_signed_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_v_signed_int(&has_bits);
          v_signed_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 v_unsigned_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_v_unsigned_int(&has_bits);
          v_unsigned_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Datatypes.Scalar.Octets v_octets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_octets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double v_double = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_v_double(&has_bits);
          v_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float v_float = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_v_float(&has_bits);
          v_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool v_bool = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_v_bool(&has_bits);
          v_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Datatypes.Scalar.String v_string = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 v_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_v_position(&has_bits);
          v_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Datatypes.Scalar.String v_identifier = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Scalar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Datatypes.Scalar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.Datatypes.Scalar.Type type = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional sint64 v_signed_int = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_v_signed_int(), target);
  }

  // optional uint64 v_unsigned_int = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_v_unsigned_int(), target);
  }

  // optional .PolarXRPC.Datatypes.Scalar.Octets v_octets = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::v_octets(this), target, stream);
  }

  // optional double v_double = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_v_double(), target);
  }

  // optional float v_float = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_v_float(), target);
  }

  // optional bool v_bool = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_v_bool(), target);
  }

  // optional .PolarXRPC.Datatypes.Scalar.String v_string = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::v_string(this), target, stream);
  }

  // optional uint32 v_position = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_v_position(), target);
  }

  // optional .PolarXRPC.Datatypes.Scalar.String v_identifier = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::v_identifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Datatypes.Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Datatypes.Scalar)
  size_t total_size = 0;

  // required .PolarXRPC.Datatypes.Scalar.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .PolarXRPC.Datatypes.Scalar.Octets v_octets = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_octets_);
    }

    // optional .PolarXRPC.Datatypes.Scalar.String v_string = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_string_);
    }

    // optional .PolarXRPC.Datatypes.Scalar.String v_identifier = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_identifier_);
    }

    // optional sint64 v_signed_int = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_v_signed_int());
    }

    // optional uint64 v_unsigned_int = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_v_unsigned_int());
    }

    // optional double v_double = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional float v_float = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool v_bool = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 v_position = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_v_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scalar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Scalar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scalar::GetClassData() const { return &_class_data_; }

void Scalar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Scalar *>(to)->MergeFrom(
      static_cast<const Scalar &>(from));
}


void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Datatypes.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_v_octets()->::PolarXRPC::Datatypes::Scalar_Octets::MergeFrom(from._internal_v_octets());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_v_string()->::PolarXRPC::Datatypes::Scalar_String::MergeFrom(from._internal_v_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_v_identifier()->::PolarXRPC::Datatypes::Scalar_String::MergeFrom(from._internal_v_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      v_signed_int_ = from.v_signed_int_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_unsigned_int_ = from.v_unsigned_int_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_double_ = from.v_double_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_float_ = from.v_float_;
    }
    if (cached_has_bits & 0x00000080u) {
      v_bool_ = from.v_bool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      v_position_ = from.v_position_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Datatypes.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_v_octets()) {
    if (!v_octets_->IsInitialized()) return false;
  }
  if (_internal_has_v_string()) {
    if (!v_string_->IsInitialized()) return false;
  }
  if (_internal_has_v_identifier()) {
    if (!v_identifier_->IsInitialized()) return false;
  }
  return true;
}

void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Scalar, v_position_)
      + sizeof(Scalar::v_position_)
      - PROTOBUF_FIELD_OFFSET(Scalar, v_octets_)>(
          reinterpret_cast<char*>(&v_octets_),
          reinterpret_cast<char*>(&other->v_octets_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fdatatypes_2eproto_getter, &descriptor_table_polarx_5fdatatypes_2eproto_once,
      file_level_metadata_polarx_5fdatatypes_2eproto[2]);
}

// ===================================================================

class Object_ObjectField::_Internal {
 public:
  using HasBits = decltype(std::declval<Object_ObjectField>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PolarXRPC::Datatypes::Any& value(const Object_ObjectField* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::PolarXRPC::Datatypes::Any&
Object_ObjectField::_Internal::value(const Object_ObjectField* msg) {
  return *msg->value_;
}
Object_ObjectField::Object_ObjectField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Datatypes.Object.ObjectField)
}
Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::PolarXRPC::Datatypes::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Datatypes.Object.ObjectField)
}

inline void Object_ObjectField::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = nullptr;
}

Object_ObjectField::~Object_ObjectField() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Datatypes.Object.ObjectField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Object_ObjectField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Object_ObjectField::ArenaDtor(void* object) {
  Object_ObjectField* _this = reinterpret_cast< Object_ObjectField* >(object);
  (void)_this;
}
void Object_ObjectField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object_ObjectField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Object_ObjectField::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Datatypes.Object.ObjectField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object_ObjectField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.Datatypes.Object.ObjectField.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .PolarXRPC.Datatypes.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Object_ObjectField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Datatypes.Object.ObjectField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.Datatypes.Object.ObjectField.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required .PolarXRPC.Datatypes.Any value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Datatypes.Object.ObjectField)
  return target;
}

size_t Object_ObjectField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.Datatypes.Object.ObjectField)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required .PolarXRPC.Datatypes.Any value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t Object_ObjectField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Datatypes.Object.ObjectField)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required .PolarXRPC.Datatypes.Any value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Object_ObjectField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Object_ObjectField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Object_ObjectField::GetClassData() const { return &_class_data_; }

void Object_ObjectField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Object_ObjectField *>(to)->MergeFrom(
      static_cast<const Object_ObjectField &>(from));
}


void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Datatypes.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::PolarXRPC::Datatypes::Any::MergeFrom(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Datatypes.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::InternalSwap(Object_ObjectField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object_ObjectField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fdatatypes_2eproto_getter, &descriptor_table_polarx_5fdatatypes_2eproto_once,
      file_level_metadata_polarx_5fdatatypes_2eproto[3]);
}

// ===================================================================

class Object::_Internal {
 public:
};

Object::Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fld_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Datatypes.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fld_(from.fld_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Datatypes.Object)
}

inline void Object::SharedCtor() {
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Datatypes.Object)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Object::ArenaDtor(void* object) {
  Object* _this = reinterpret_cast< Object* >(object);
  (void)_this;
}
void Object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Datatypes.Object)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fld_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PolarXRPC.Datatypes.Object.ObjectField fld = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Object::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Datatypes.Object)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PolarXRPC.Datatypes.Object.ObjectField fld = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fld_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fld(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Datatypes.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Datatypes.Object)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PolarXRPC.Datatypes.Object.ObjectField fld = 1;
  total_size += 1UL * this->_internal_fld_size();
  for (const auto& msg : this->fld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Object::GetClassData() const { return &_class_data_; }

void Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Object *>(to)->MergeFrom(
      static_cast<const Object &>(from));
}


void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Datatypes.Object)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fld_.MergeFrom(from.fld_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Datatypes.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fld_))
    return false;
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fld_.InternalSwap(&other->fld_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fdatatypes_2eproto_getter, &descriptor_table_polarx_5fdatatypes_2eproto_once,
      file_level_metadata_polarx_5fdatatypes_2eproto[4]);
}

// ===================================================================

class Array::_Internal {
 public:
};

Array::Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Datatypes.Array)
}
Array::Array(const Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Datatypes.Array)
}

inline void Array::SharedCtor() {
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Datatypes.Array)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Array::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Array::ArenaDtor(void* object) {
  Array* _this = reinterpret_cast< Array* >(object);
  (void)_this;
}
void Array::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Datatypes.Array)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Array::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PolarXRPC.Datatypes.Any value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Array::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Datatypes.Array)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PolarXRPC.Datatypes.Any value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Datatypes.Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Datatypes.Array)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PolarXRPC.Datatypes.Any value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Array::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Array::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Array::GetClassData() const { return &_class_data_; }

void Array::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Array *>(to)->MergeFrom(
      static_cast<const Array &>(from));
}


void Array::MergeFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Datatypes.Array)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Datatypes.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_))
    return false;
  return true;
}

void Array::InternalSwap(Array* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Array::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fdatatypes_2eproto_getter, &descriptor_table_polarx_5fdatatypes_2eproto_once,
      file_level_metadata_polarx_5fdatatypes_2eproto[5]);
}

// ===================================================================

class Any::_Internal {
 public:
  using HasBits = decltype(std::declval<Any>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PolarXRPC::Datatypes::Scalar& scalar(const Any* msg);
  static void set_has_scalar(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PolarXRPC::Datatypes::Object& obj(const Any* msg);
  static void set_has_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PolarXRPC::Datatypes::Array& array(const Any* msg);
  static void set_has_array(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::PolarXRPC::Datatypes::Scalar&
Any::_Internal::scalar(const Any* msg) {
  return *msg->scalar_;
}
const ::PolarXRPC::Datatypes::Object&
Any::_Internal::obj(const Any* msg) {
  return *msg->obj_;
}
const ::PolarXRPC::Datatypes::Array&
Any::_Internal::array(const Any* msg) {
  return *msg->array_;
}
Any::Any(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Datatypes.Any)
}
Any::Any(const Any& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalar()) {
    scalar_ = new ::PolarXRPC::Datatypes::Scalar(*from.scalar_);
  } else {
    scalar_ = nullptr;
  }
  if (from._internal_has_obj()) {
    obj_ = new ::PolarXRPC::Datatypes::Object(*from.obj_);
  } else {
    obj_ = nullptr;
  }
  if (from._internal_has_array()) {
    array_ = new ::PolarXRPC::Datatypes::Array(*from.array_);
  } else {
    array_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Datatypes.Any)
}

inline void Any::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scalar_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&array_) -
    reinterpret_cast<char*>(&scalar_)) + sizeof(array_));
type_ = 1;
}

Any::~Any() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Datatypes.Any)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Any::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete scalar_;
  if (this != internal_default_instance()) delete obj_;
  if (this != internal_default_instance()) delete array_;
}

void Any::ArenaDtor(void* object) {
  Any* _this = reinterpret_cast< Any* >(object);
  (void)_this;
}
void Any::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Any::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Any::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Datatypes.Any)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scalar_ != nullptr);
      scalar_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obj_ != nullptr);
      obj_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(array_ != nullptr);
      array_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Any::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.Datatypes.Any.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Datatypes::Any_Type_IsValid(val))) {
            _internal_set_type(static_cast<::PolarXRPC::Datatypes::Any_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Datatypes.Scalar scalar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Datatypes.Object obj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Datatypes.Array array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Any::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Datatypes.Any)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.Datatypes.Any.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .PolarXRPC.Datatypes.Scalar scalar = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scalar(this), target, stream);
  }

  // optional .PolarXRPC.Datatypes.Object obj = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::obj(this), target, stream);
  }

  // optional .PolarXRPC.Datatypes.Array array = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Datatypes.Any)
  return target;
}

size_t Any::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Datatypes.Any)
  size_t total_size = 0;

  // required .PolarXRPC.Datatypes.Any.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .PolarXRPC.Datatypes.Scalar scalar = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scalar_);
    }

    // optional .PolarXRPC.Datatypes.Object obj = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_);
    }

    // optional .PolarXRPC.Datatypes.Array array = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *array_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Any::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Any::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Any::GetClassData() const { return &_class_data_; }

void Any::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Any *>(to)->MergeFrom(
      static_cast<const Any &>(from));
}


void Any::MergeFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Datatypes.Any)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scalar()->::PolarXRPC::Datatypes::Scalar::MergeFrom(from._internal_scalar());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_obj()->::PolarXRPC::Datatypes::Object::MergeFrom(from._internal_obj());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_array()->::PolarXRPC::Datatypes::Array::MergeFrom(from._internal_array());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Any::CopyFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Datatypes.Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_scalar()) {
    if (!scalar_->IsInitialized()) return false;
  }
  if (_internal_has_obj()) {
    if (!obj_->IsInitialized()) return false;
  }
  if (_internal_has_array()) {
    if (!array_->IsInitialized()) return false;
  }
  return true;
}

void Any::InternalSwap(Any* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Any, array_)
      + sizeof(Any::array_)
      - PROTOBUF_FIELD_OFFSET(Any, scalar_)>(
          reinterpret_cast<char*>(&scalar_),
          reinterpret_cast<char*>(&other->scalar_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Any::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fdatatypes_2eproto_getter, &descriptor_table_polarx_5fdatatypes_2eproto_once,
      file_level_metadata_polarx_5fdatatypes_2eproto[6]);
}

// ===================================================================

class SessionVariable::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionVariable>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PolarXRPC::Datatypes::Scalar& value(const SessionVariable* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::PolarXRPC::Datatypes::Scalar&
SessionVariable::_Internal::value(const SessionVariable* msg) {
  return *msg->value_;
}
SessionVariable::SessionVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Datatypes.SessionVariable)
}
SessionVariable::SessionVariable(const SessionVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::PolarXRPC::Datatypes::Scalar(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Datatypes.SessionVariable)
}

inline void SessionVariable::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = nullptr;
}

SessionVariable::~SessionVariable() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Datatypes.SessionVariable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionVariable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void SessionVariable::ArenaDtor(void* object) {
  SessionVariable* _this = reinterpret_cast< SessionVariable* >(object);
  (void)_this;
}
void SessionVariable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Datatypes.SessionVariable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PolarXRPC.Datatypes.SessionVariable.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .PolarXRPC.Datatypes.Scalar value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionVariable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Datatypes.SessionVariable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PolarXRPC.Datatypes.SessionVariable.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required .PolarXRPC.Datatypes.Scalar value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Datatypes.SessionVariable)
  return target;
}

size_t SessionVariable::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.Datatypes.SessionVariable)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required .PolarXRPC.Datatypes.Scalar value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t SessionVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Datatypes.SessionVariable)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required .PolarXRPC.Datatypes.Scalar value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionVariable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionVariable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionVariable::GetClassData() const { return &_class_data_; }

void SessionVariable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionVariable *>(to)->MergeFrom(
      static_cast<const SessionVariable &>(from));
}


void SessionVariable::MergeFrom(const SessionVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Datatypes.SessionVariable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::PolarXRPC::Datatypes::Scalar::MergeFrom(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionVariable::CopyFrom(const SessionVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Datatypes.SessionVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionVariable::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void SessionVariable::InternalSwap(SessionVariable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionVariable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polarx_5fdatatypes_2eproto_getter, &descriptor_table_polarx_5fdatatypes_2eproto_once,
      file_level_metadata_polarx_5fdatatypes_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Datatypes
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::Datatypes::Scalar_String* Arena::CreateMaybeMessage< ::PolarXRPC::Datatypes::Scalar_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Datatypes::Scalar_String >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Datatypes::Scalar_Octets* Arena::CreateMaybeMessage< ::PolarXRPC::Datatypes::Scalar_Octets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Datatypes::Scalar_Octets >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Datatypes::Scalar* Arena::CreateMaybeMessage< ::PolarXRPC::Datatypes::Scalar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Datatypes::Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Datatypes::Object_ObjectField* Arena::CreateMaybeMessage< ::PolarXRPC::Datatypes::Object_ObjectField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Datatypes::Object_ObjectField >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Datatypes::Object* Arena::CreateMaybeMessage< ::PolarXRPC::Datatypes::Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Datatypes::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Datatypes::Array* Arena::CreateMaybeMessage< ::PolarXRPC::Datatypes::Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Datatypes::Array >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Datatypes::Any* Arena::CreateMaybeMessage< ::PolarXRPC::Datatypes::Any >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Datatypes::Any >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Datatypes::SessionVariable* Arena::CreateMaybeMessage< ::PolarXRPC::Datatypes::SessionVariable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Datatypes::SessionVariable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
