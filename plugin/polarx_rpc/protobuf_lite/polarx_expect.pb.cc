// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_expect.proto

#include "polarx_expect.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
namespace Expect {
constexpr Open_Condition::Open_Condition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : condition_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , condition_key_(0u)
  , op_(0)
{}
struct Open_ConditionDefaultTypeInternal {
  constexpr Open_ConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Open_ConditionDefaultTypeInternal() {}
  union {
    Open_Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Open_ConditionDefaultTypeInternal _Open_Condition_default_instance_;
constexpr Open::Open(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cond_()
  , op_(0)
{}
struct OpenDefaultTypeInternal {
  constexpr OpenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenDefaultTypeInternal() {}
  union {
    Open _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenDefaultTypeInternal _Open_default_instance_;
constexpr Close::Close(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CloseDefaultTypeInternal {
  constexpr CloseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseDefaultTypeInternal() {}
  union {
    Close _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseDefaultTypeInternal _Close_default_instance_;
}  // namespace Expect
}  // namespace PolarXRPC
namespace PolarXRPC {
namespace Expect {
bool Open_Condition_ConditionOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Open_Condition_ConditionOperation_strings[2] = {};

static const char Open_Condition_ConditionOperation_names[] =
  "EXPECT_OP_SET"
  "EXPECT_OP_UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Open_Condition_ConditionOperation_entries[] = {
  { {Open_Condition_ConditionOperation_names + 0, 13}, 0 },
  { {Open_Condition_ConditionOperation_names + 13, 15}, 1 },
};

static const int Open_Condition_ConditionOperation_entries_by_number[] = {
  0, // 0 -> EXPECT_OP_SET
  1, // 1 -> EXPECT_OP_UNSET
};

const std::string& Open_Condition_ConditionOperation_Name(
    Open_Condition_ConditionOperation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Open_Condition_ConditionOperation_entries,
          Open_Condition_ConditionOperation_entries_by_number,
          2, Open_Condition_ConditionOperation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Open_Condition_ConditionOperation_entries,
      Open_Condition_ConditionOperation_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Open_Condition_ConditionOperation_strings[idx].get();
}
bool Open_Condition_ConditionOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Open_Condition_ConditionOperation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Open_Condition_ConditionOperation_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Open_Condition_ConditionOperation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Open_Condition_ConditionOperation Open_Condition::EXPECT_OP_SET;
constexpr Open_Condition_ConditionOperation Open_Condition::EXPECT_OP_UNSET;
constexpr Open_Condition_ConditionOperation Open_Condition::ConditionOperation_MIN;
constexpr Open_Condition_ConditionOperation Open_Condition::ConditionOperation_MAX;
constexpr int Open_Condition::ConditionOperation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Open_CtxOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Open_CtxOperation_strings[2] = {};

static const char Open_CtxOperation_names[] =
  "EXPECT_CTX_COPY_PREV"
  "EXPECT_CTX_EMPTY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Open_CtxOperation_entries[] = {
  { {Open_CtxOperation_names + 0, 20}, 0 },
  { {Open_CtxOperation_names + 20, 16}, 1 },
};

static const int Open_CtxOperation_entries_by_number[] = {
  0, // 0 -> EXPECT_CTX_COPY_PREV
  1, // 1 -> EXPECT_CTX_EMPTY
};

const std::string& Open_CtxOperation_Name(
    Open_CtxOperation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Open_CtxOperation_entries,
          Open_CtxOperation_entries_by_number,
          2, Open_CtxOperation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Open_CtxOperation_entries,
      Open_CtxOperation_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Open_CtxOperation_strings[idx].get();
}
bool Open_CtxOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Open_CtxOperation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Open_CtxOperation_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Open_CtxOperation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Open_CtxOperation Open::EXPECT_CTX_COPY_PREV;
constexpr Open_CtxOperation Open::EXPECT_CTX_EMPTY;
constexpr Open_CtxOperation Open::CtxOperation_MIN;
constexpr Open_CtxOperation Open::CtxOperation_MAX;
constexpr int Open::CtxOperation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Open_Condition::_Internal {
 public:
  using HasBits = decltype(std::declval<Open_Condition>()._has_bits_);
  static void set_has_condition_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_condition_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Open_Condition::Open_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Expect.Open.Condition)
}
Open_Condition::Open_Condition(const Open_Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  condition_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    condition_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_condition_value()) {
    condition_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_condition_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&condition_key_, &from.condition_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&condition_key_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Expect.Open.Condition)
}

inline void Open_Condition::SharedCtor() {
condition_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  condition_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&condition_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&condition_key_)) + sizeof(op_));
}

Open_Condition::~Open_Condition() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Expect.Open.Condition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Open_Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  condition_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Open_Condition::ArenaDtor(void* object) {
  Open_Condition* _this = reinterpret_cast< Open_Condition* >(object);
  (void)_this;
}
void Open_Condition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Open_Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Open_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Expect.Open.Condition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    condition_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&condition_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&op_) -
        reinterpret_cast<char*>(&condition_key_)) + sizeof(op_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Open_Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 condition_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_condition_key(&has_bits);
          condition_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes condition_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_condition_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Expect::Open_Condition_ConditionOperation_IsValid(val))) {
            _internal_set_op(static_cast<::PolarXRPC::Expect::Open_Condition_ConditionOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Open_Condition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Expect.Open.Condition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 condition_key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_condition_key(), target);
  }

  // optional bytes condition_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_condition_value(), target);
  }

  // optional .PolarXRPC.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Expect.Open.Condition)
  return target;
}

size_t Open_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Expect.Open.Condition)
  size_t total_size = 0;

  // required uint32 condition_key = 1;
  if (_internal_has_condition_key()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_condition_key());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes condition_value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_condition_value());
  }

  // optional .PolarXRPC.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open_Condition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Open_Condition*>(
      &from));
}

void Open_Condition::MergeFrom(const Open_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Expect.Open.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_condition_value(from._internal_condition_value());
    }
    if (cached_has_bits & 0x00000002u) {
      condition_key_ = from.condition_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      op_ = from.op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Open_Condition::CopyFrom(const Open_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Expect.Open.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_Condition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Open_Condition::InternalSwap(Open_Condition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &condition_value_, lhs_arena,
      &other->condition_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Open_Condition, op_)
      + sizeof(Open_Condition::op_)
      - PROTOBUF_FIELD_OFFSET(Open_Condition, condition_key_)>(
          reinterpret_cast<char*>(&condition_key_),
          reinterpret_cast<char*>(&other->condition_key_));
}

std::string Open_Condition::GetTypeName() const {
  return "PolarXRPC.Expect.Open.Condition";
}


// ===================================================================

class Open::_Internal {
 public:
  using HasBits = decltype(std::declval<Open>()._has_bits_);
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Open::Open(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  cond_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Expect.Open)
}
Open::Open(const Open& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      cond_(from.cond_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Expect.Open)
}

inline void Open::SharedCtor() {
op_ = 0;
}

Open::~Open() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Expect.Open)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Open::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Open::ArenaDtor(void* object) {
  Open* _this = reinterpret_cast< Open* >(object);
  (void)_this;
}
void Open::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Open::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Open::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Expect.Open)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cond_.Clear();
  op_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Open::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PolarXRPC.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Expect::Open_CtxOperation_IsValid(val))) {
            _internal_set_op(static_cast<::PolarXRPC::Expect::Open_CtxOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .PolarXRPC.Expect.Open.Condition cond = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Open::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Expect.Open)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PolarXRPC.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // repeated .PolarXRPC.Expect.Open.Condition cond = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cond(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Expect.Open)
  return target;
}

size_t Open::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Expect.Open)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PolarXRPC.Expect.Open.Condition cond = 2;
  total_size += 1UL * this->_internal_cond_size();
  for (const auto& msg : this->cond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .PolarXRPC.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Open*>(
      &from));
}

void Open::MergeFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Expect.Open)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cond_.MergeFrom(from.cond_);
  if (from._internal_has_op()) {
    _internal_set_op(from._internal_op());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Open::CopyFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Expect.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cond_))
    return false;
  return true;
}

void Open::InternalSwap(Open* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cond_.InternalSwap(&other->cond_);
  swap(op_, other->op_);
}

std::string Open::GetTypeName() const {
  return "PolarXRPC.Expect.Open";
}


// ===================================================================

class Close::_Internal {
 public:
};

Close::Close(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Expect.Close)
}
Close::Close(const Close& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Expect.Close)
}

inline void Close::SharedCtor() {
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Expect.Close)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Close::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Close::ArenaDtor(void* object) {
  Close* _this = reinterpret_cast< Close* >(object);
  (void)_this;
}
void Close::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Close::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Expect.Close)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Close::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Close::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Expect.Close)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Expect.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Expect.Close)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Close*>(
      &from));
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Expect.Close)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Expect.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::InternalSwap(Close* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string Close::GetTypeName() const {
  return "PolarXRPC.Expect.Close";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Expect
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::Expect::Open_Condition* Arena::CreateMaybeMessage< ::PolarXRPC::Expect::Open_Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Expect::Open_Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Expect::Open* Arena::CreateMaybeMessage< ::PolarXRPC::Expect::Open >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Expect::Open >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Expect::Close* Arena::CreateMaybeMessage< ::PolarXRPC::Expect::Close >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Expect::Close >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
