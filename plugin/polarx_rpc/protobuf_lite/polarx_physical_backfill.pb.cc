// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_physical_backfill.proto

#include "polarx_physical_backfill.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
namespace PhysicalBackfill {
constexpr TableInfo::TableInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : physical_partition_name_()
  , file_info_()
  , table_schema_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partitioned_(false){}
struct TableInfoDefaultTypeInternal {
  constexpr TableInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableInfoDefaultTypeInternal() {}
  union {
    TableInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableInfoDefaultTypeInternal _TableInfo_default_instance_;
constexpr FileInfo::FileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partition_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_size_(uint64_t{0u})
  , existence_(false)
  , temp_file_(false){}
struct FileInfoDefaultTypeInternal {
  constexpr FileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileInfoDefaultTypeInternal _FileInfo_default_instance_;
constexpr DiskInfo::DiskInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_size_(uint64_t{0u})
  , free_size_(uint64_t{0u})
  , used_size_(uint64_t{0u}){}
struct DiskInfoDefaultTypeInternal {
  constexpr DiskInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiskInfoDefaultTypeInternal() {}
  union {
    DiskInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiskInfoDefaultTypeInternal _DiskInfo_default_instance_;
constexpr GetFileInfoOperator::GetFileInfoOperator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_info_(nullptr)
  , disk_info_(nullptr)
  , operator_type_(1)
{}
struct GetFileInfoOperatorDefaultTypeInternal {
  constexpr GetFileInfoOperatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFileInfoOperatorDefaultTypeInternal() {}
  union {
    GetFileInfoOperator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFileInfoOperatorDefaultTypeInternal _GetFileInfoOperator_default_instance_;
constexpr TransferFileDataOperator::TransferFileDataOperator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_info_(nullptr)
  , disk_info_(nullptr)
  , buffer_len_(uint64_t{0u})
  , offset_(uint64_t{0u})
  , operator_type_(1)
{}
struct TransferFileDataOperatorDefaultTypeInternal {
  constexpr TransferFileDataOperatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferFileDataOperatorDefaultTypeInternal() {}
  union {
    TransferFileDataOperator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferFileDataOperatorDefaultTypeInternal _TransferFileDataOperator_default_instance_;
constexpr FileManageOperator::FileManageOperator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_info_(nullptr)
  , operator_type_(1)
{}
struct FileManageOperatorDefaultTypeInternal {
  constexpr FileManageOperatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileManageOperatorDefaultTypeInternal() {}
  union {
    FileManageOperator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileManageOperatorDefaultTypeInternal _FileManageOperator_default_instance_;
constexpr FileManageOperatorResponse::FileManageOperatorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(false){}
struct FileManageOperatorResponseDefaultTypeInternal {
  constexpr FileManageOperatorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileManageOperatorResponseDefaultTypeInternal() {}
  union {
    FileManageOperatorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileManageOperatorResponseDefaultTypeInternal _FileManageOperatorResponse_default_instance_;
}  // namespace PhysicalBackfill
}  // namespace PolarXRPC
namespace PolarXRPC {
namespace PhysicalBackfill {
bool GetFileInfoOperator_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GetFileInfoOperator_Type_strings[8] = {};

static const char GetFileInfoOperator_Type_names[] =
  "CHECK_SRC_FILE_EXISTENCE"
  "CHECK_TAR_FILE_EXISTENCE"
  "GET_SRC_DIR_FREE_SPACE"
  "GET_SRC_FILE_LEN"
  "GET_SRC_IBD_TEMP_DIR"
  "GET_TAR_DIR_FREE_SPACE"
  "GET_TAR_FILE_LEN"
  "GET_TAR_IBD_DIR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GetFileInfoOperator_Type_entries[] = {
  { {GetFileInfoOperator_Type_names + 0, 24}, 1 },
  { {GetFileInfoOperator_Type_names + 24, 24}, 2 },
  { {GetFileInfoOperator_Type_names + 48, 22}, 5 },
  { {GetFileInfoOperator_Type_names + 70, 16}, 4 },
  { {GetFileInfoOperator_Type_names + 86, 20}, 7 },
  { {GetFileInfoOperator_Type_names + 106, 22}, 6 },
  { {GetFileInfoOperator_Type_names + 128, 16}, 8 },
  { {GetFileInfoOperator_Type_names + 144, 15}, 3 },
};

static const int GetFileInfoOperator_Type_entries_by_number[] = {
  0, // 1 -> CHECK_SRC_FILE_EXISTENCE
  1, // 2 -> CHECK_TAR_FILE_EXISTENCE
  7, // 3 -> GET_TAR_IBD_DIR
  3, // 4 -> GET_SRC_FILE_LEN
  2, // 5 -> GET_SRC_DIR_FREE_SPACE
  5, // 6 -> GET_TAR_DIR_FREE_SPACE
  4, // 7 -> GET_SRC_IBD_TEMP_DIR
  6, // 8 -> GET_TAR_FILE_LEN
};

const std::string& GetFileInfoOperator_Type_Name(
    GetFileInfoOperator_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GetFileInfoOperator_Type_entries,
          GetFileInfoOperator_Type_entries_by_number,
          8, GetFileInfoOperator_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GetFileInfoOperator_Type_entries,
      GetFileInfoOperator_Type_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GetFileInfoOperator_Type_strings[idx].get();
}
bool GetFileInfoOperator_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetFileInfoOperator_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GetFileInfoOperator_Type_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<GetFileInfoOperator_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetFileInfoOperator_Type GetFileInfoOperator::CHECK_SRC_FILE_EXISTENCE;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::CHECK_TAR_FILE_EXISTENCE;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_TAR_IBD_DIR;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_SRC_FILE_LEN;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_SRC_DIR_FREE_SPACE;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_TAR_DIR_FREE_SPACE;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_SRC_IBD_TEMP_DIR;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::GET_TAR_FILE_LEN;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::Type_MIN;
constexpr GetFileInfoOperator_Type GetFileInfoOperator::Type_MAX;
constexpr int GetFileInfoOperator::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TransferFileDataOperator_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransferFileDataOperator_Type_strings[2] = {};

static const char TransferFileDataOperator_Type_names[] =
  "GET_DATA_FROM_SRC_IBD"
  "PUT_DATA_TO_TAR_IBD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransferFileDataOperator_Type_entries[] = {
  { {TransferFileDataOperator_Type_names + 0, 21}, 1 },
  { {TransferFileDataOperator_Type_names + 21, 19}, 2 },
};

static const int TransferFileDataOperator_Type_entries_by_number[] = {
  0, // 1 -> GET_DATA_FROM_SRC_IBD
  1, // 2 -> PUT_DATA_TO_TAR_IBD
};

const std::string& TransferFileDataOperator_Type_Name(
    TransferFileDataOperator_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransferFileDataOperator_Type_entries,
          TransferFileDataOperator_Type_entries_by_number,
          2, TransferFileDataOperator_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransferFileDataOperator_Type_entries,
      TransferFileDataOperator_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransferFileDataOperator_Type_strings[idx].get();
}
bool TransferFileDataOperator_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferFileDataOperator_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransferFileDataOperator_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<TransferFileDataOperator_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransferFileDataOperator_Type TransferFileDataOperator::GET_DATA_FROM_SRC_IBD;
constexpr TransferFileDataOperator_Type TransferFileDataOperator::PUT_DATA_TO_TAR_IBD;
constexpr TransferFileDataOperator_Type TransferFileDataOperator::Type_MIN;
constexpr TransferFileDataOperator_Type TransferFileDataOperator::Type_MAX;
constexpr int TransferFileDataOperator::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool FileManageOperator_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FileManageOperator_Type_strings[7] = {};

static const char FileManageOperator_Type_names[] =
  "COPY_IBD_TO_TEMP_DIR_IN_SRC"
  "CREATE_TEMP_DIR_IN_SRC"
  "DELETE_IBD_FROM_TEMP_DIR_IN_SRC"
  "DELETE_TEMP_DIR_IN_SRC"
  "FALLOCATE_IBD"
  "FLUSH_TABLE_IN_SRC"
  "UNLOCK_TABLE_IN_SRC";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FileManageOperator_Type_entries[] = {
  { {FileManageOperator_Type_names + 0, 27}, 2 },
  { {FileManageOperator_Type_names + 27, 22}, 1 },
  { {FileManageOperator_Type_names + 49, 31}, 3 },
  { {FileManageOperator_Type_names + 80, 22}, 6 },
  { {FileManageOperator_Type_names + 102, 13}, 7 },
  { {FileManageOperator_Type_names + 115, 18}, 4 },
  { {FileManageOperator_Type_names + 133, 19}, 5 },
};

static const int FileManageOperator_Type_entries_by_number[] = {
  1, // 1 -> CREATE_TEMP_DIR_IN_SRC
  0, // 2 -> COPY_IBD_TO_TEMP_DIR_IN_SRC
  2, // 3 -> DELETE_IBD_FROM_TEMP_DIR_IN_SRC
  5, // 4 -> FLUSH_TABLE_IN_SRC
  6, // 5 -> UNLOCK_TABLE_IN_SRC
  3, // 6 -> DELETE_TEMP_DIR_IN_SRC
  4, // 7 -> FALLOCATE_IBD
};

const std::string& FileManageOperator_Type_Name(
    FileManageOperator_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FileManageOperator_Type_entries,
          FileManageOperator_Type_entries_by_number,
          7, FileManageOperator_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FileManageOperator_Type_entries,
      FileManageOperator_Type_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FileManageOperator_Type_strings[idx].get();
}
bool FileManageOperator_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileManageOperator_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FileManageOperator_Type_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<FileManageOperator_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FileManageOperator_Type FileManageOperator::CREATE_TEMP_DIR_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::COPY_IBD_TO_TEMP_DIR_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::DELETE_IBD_FROM_TEMP_DIR_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::FLUSH_TABLE_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::UNLOCK_TABLE_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::DELETE_TEMP_DIR_IN_SRC;
constexpr FileManageOperator_Type FileManageOperator::FALLOCATE_IBD;
constexpr FileManageOperator_Type FileManageOperator::Type_MIN;
constexpr FileManageOperator_Type FileManageOperator::Type_MAX;
constexpr int FileManageOperator::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TableInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TableInfo>()._has_bits_);
  static void set_has_table_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partitioned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TableInfo::TableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  physical_partition_name_(arena),
  file_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.TableInfo)
}
TableInfo::TableInfo(const TableInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      physical_partition_name_(from.physical_partition_name_),
      file_info_(from.file_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  table_schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table_schema()) {
    table_schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_schema(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table_name()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  partitioned_ = from.partitioned_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.TableInfo)
}

inline void TableInfo::SharedCtor() {
table_schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partitioned_ = false;
}

TableInfo::~TableInfo() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.TableInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TableInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableInfo::ArenaDtor(void* object) {
  TableInfo* _this = reinterpret_cast< TableInfo* >(object);
  (void)_this;
}
void TableInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.TableInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  physical_partition_name_.Clear();
  file_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      table_schema_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_.ClearNonDefaultToEmpty();
    }
  }
  partitioned_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TableInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string table_schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool partitioned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_partitioned(&has_bits);
          partitioned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string physical_partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_physical_partition_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .PolarXRPC.PhysicalBackfill.FileInfo file_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.TableInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string table_schema = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_schema(), target);
  }

  // required string table_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // required bool partitioned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_partitioned(), target);
  }

  // repeated string physical_partition_name = 4;
  for (int i = 0, n = this->_internal_physical_partition_name_size(); i < n; i++) {
    const auto& s = this->_internal_physical_partition_name(i);
    target = stream->WriteString(4, s, target);
  }

  // repeated .PolarXRPC.PhysicalBackfill.FileInfo file_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_file_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_file_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.TableInfo)
  return target;
}

size_t TableInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.PhysicalBackfill.TableInfo)
  size_t total_size = 0;

  if (_internal_has_table_schema()) {
    // required string table_schema = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_schema());
  }

  if (_internal_has_table_name()) {
    // required string table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (_internal_has_partitioned()) {
    // required bool partitioned = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.TableInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string table_schema = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_schema());

    // required string table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());

    // required bool partitioned = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string physical_partition_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(physical_partition_name_.size());
  for (int i = 0, n = physical_partition_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      physical_partition_name_.Get(i));
  }

  // repeated .PolarXRPC.PhysicalBackfill.FileInfo file_info = 5;
  total_size += 1UL * this->_internal_file_info_size();
  for (const auto& msg : this->file_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TableInfo*>(
      &from));
}

void TableInfo::MergeFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  physical_partition_name_.MergeFrom(from.physical_partition_name_);
  file_info_.MergeFrom(from.file_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_table_schema(from._internal_table_schema());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_table_name(from._internal_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      partitioned_ = from.partitioned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TableInfo::CopyFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(file_info_))
    return false;
  return true;
}

void TableInfo::InternalSwap(TableInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  physical_partition_name_.InternalSwap(&other->physical_partition_name_);
  file_info_.InternalSwap(&other->file_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_schema_, lhs_arena,
      &other->table_schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  swap(partitioned_, other->partitioned_);
}

std::string TableInfo::GetTypeName() const {
  return "PolarXRPC.PhysicalBackfill.TableInfo";
}


// ===================================================================

class FileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FileInfo>()._has_bits_);
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partition_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_existence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_temp_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directory(), 
      GetArenaForAllocation());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_partition_name()) {
    partition_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partition_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&data_size_, &from.data_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_file_) -
    reinterpret_cast<char*>(&data_size_)) + sizeof(temp_file_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.FileInfo)
}

inline void FileInfo::SharedCtor() {
directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temp_file_) -
    reinterpret_cast<char*>(&data_size_)) + sizeof(temp_file_));
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.FileInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::ArenaDtor(void* object) {
  FileInfo* _this = reinterpret_cast< FileInfo* >(object);
  (void)_this;
}
void FileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.FileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      partition_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&data_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temp_file_) -
        reinterpret_cast<char*>(&data_size_)) + sizeof(temp_file_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string partition_name = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 data_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_data_size(&has_bits);
          data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool existence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_existence(&has_bits);
          existence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool temp_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_temp_file(&has_bits);
          temp_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.FileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string directory = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  // required string file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // required string partition_name = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partition_name(), target);
  }

  // optional uint64 data_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_data_size(), target);
  }

  // optional bool existence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_existence(), target);
  }

  // optional bool temp_file = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_temp_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.FileInfo)
  return target;
}

size_t FileInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.PhysicalBackfill.FileInfo)
  size_t total_size = 0;

  if (_internal_has_directory()) {
    // required string directory = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  if (_internal_has_file_name()) {
    // required string file_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  if (_internal_has_partition_name()) {
    // required string partition_name = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  return total_size;
}
size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.FileInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string directory = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());

    // required string file_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());

    // required string partition_name = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional uint64 data_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_data_size());
    }

    // optional bool existence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool temp_file = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FileInfo*>(
      &from));
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_partition_name(from._internal_partition_name());
    }
    if (cached_has_bits & 0x00000008u) {
      data_size_ = from.data_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      existence_ = from.existence_;
    }
    if (cached_has_bits & 0x00000020u) {
      temp_file_ = from.temp_file_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &directory_, lhs_arena,
      &other->directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partition_name_, lhs_arena,
      &other->partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, temp_file_)
      + sizeof(FileInfo::temp_file_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, data_size_)>(
          reinterpret_cast<char*>(&data_size_),
          reinterpret_cast<char*>(&other->data_size_));
}

std::string FileInfo::GetTypeName() const {
  return "PolarXRPC.PhysicalBackfill.FileInfo";
}


// ===================================================================

class DiskInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DiskInfo>()._has_bits_);
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_free_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_used_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DiskInfo::DiskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.DiskInfo)
}
DiskInfo::DiskInfo(const DiskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directory(), 
      GetArenaForAllocation());
  }
  ::memcpy(&total_size_, &from.total_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_size_) -
    reinterpret_cast<char*>(&total_size_)) + sizeof(used_size_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.DiskInfo)
}

inline void DiskInfo::SharedCtor() {
directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&used_size_) -
    reinterpret_cast<char*>(&total_size_)) + sizeof(used_size_));
}

DiskInfo::~DiskInfo() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.DiskInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DiskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiskInfo::ArenaDtor(void* object) {
  DiskInfo* _this = reinterpret_cast< DiskInfo* >(object);
  (void)_this;
}
void DiskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    directory_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&total_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_size_) -
        reinterpret_cast<char*>(&total_size_)) + sizeof(used_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DiskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_size(&has_bits);
          total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 free_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_free_size(&has_bits);
          free_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 used_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_used_size(&has_bits);
          used_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiskInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string directory = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  // optional uint64 total_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_size(), target);
  }

  // optional uint64 free_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_free_size(), target);
  }

  // optional uint64 used_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_used_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.DiskInfo)
  return target;
}

size_t DiskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  size_t total_size = 0;

  // required string directory = 1;
  if (_internal_has_directory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint64 total_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_size());
    }

    // optional uint64 free_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_free_size());
    }

    // optional uint64 used_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_used_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiskInfo*>(
      &from));
}

void DiskInfo::MergeFrom(const DiskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000002u) {
      total_size_ = from.total_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      free_size_ = from.free_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      used_size_ = from.used_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DiskInfo::CopyFrom(const DiskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.DiskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DiskInfo::InternalSwap(DiskInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &directory_, lhs_arena,
      &other->directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiskInfo, used_size_)
      + sizeof(DiskInfo::used_size_)
      - PROTOBUF_FIELD_OFFSET(DiskInfo, total_size_)>(
          reinterpret_cast<char*>(&total_size_),
          reinterpret_cast<char*>(&other->total_size_));
}

std::string DiskInfo::GetTypeName() const {
  return "PolarXRPC.PhysicalBackfill.DiskInfo";
}


// ===================================================================

class GetFileInfoOperator::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFileInfoOperator>()._has_bits_);
  static void set_has_operator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PolarXRPC::PhysicalBackfill::TableInfo& table_info(const GetFileInfoOperator* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PolarXRPC::PhysicalBackfill::DiskInfo& disk_info(const GetFileInfoOperator* msg);
  static void set_has_disk_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::PolarXRPC::PhysicalBackfill::TableInfo&
GetFileInfoOperator::_Internal::table_info(const GetFileInfoOperator* msg) {
  return *msg->table_info_;
}
const ::PolarXRPC::PhysicalBackfill::DiskInfo&
GetFileInfoOperator::_Internal::disk_info(const GetFileInfoOperator* msg) {
  return *msg->disk_info_;
}
GetFileInfoOperator::GetFileInfoOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
}
GetFileInfoOperator::GetFileInfoOperator(const GetFileInfoOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::PolarXRPC::PhysicalBackfill::TableInfo(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  if (from._internal_has_disk_info()) {
    disk_info_ = new ::PolarXRPC::PhysicalBackfill::DiskInfo(*from.disk_info_);
  } else {
    disk_info_ = nullptr;
  }
  operator_type_ = from.operator_type_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
}

inline void GetFileInfoOperator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disk_info_) -
    reinterpret_cast<char*>(&table_info_)) + sizeof(disk_info_));
operator_type_ = 1;
}

GetFileInfoOperator::~GetFileInfoOperator() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void GetFileInfoOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
  if (this != internal_default_instance()) delete disk_info_;
}

void GetFileInfoOperator::ArenaDtor(void* object) {
  GetFileInfoOperator* _this = reinterpret_cast< GetFileInfoOperator* >(object);
  (void)_this;
}
void GetFileInfoOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileInfoOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFileInfoOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disk_info_ != nullptr);
      disk_info_->Clear();
    }
    operator_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetFileInfoOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.PhysicalBackfill.GetFileInfoOperator.Type operator_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::PhysicalBackfill::GetFileInfoOperator_Type_IsValid(val))) {
            _internal_set_operator_type(static_cast<::PolarXRPC::PhysicalBackfill::GetFileInfoOperator_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFileInfoOperator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.PhysicalBackfill.GetFileInfoOperator.Type operator_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operator_type(), target);
  }

  // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_info(this), target, stream);
  }

  // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::disk_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  return target;
}

size_t GetFileInfoOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  size_t total_size = 0;

  // required .PolarXRPC.PhysicalBackfill.GetFileInfoOperator.Type operator_type = 1;
  if (_internal_has_operator_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_info_);
    }

    // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disk_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileInfoOperator::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetFileInfoOperator*>(
      &from));
}

void GetFileInfoOperator::MergeFrom(const GetFileInfoOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_info()->::PolarXRPC::PhysicalBackfill::TableInfo::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_disk_info()->::PolarXRPC::PhysicalBackfill::DiskInfo::MergeFrom(from._internal_disk_info());
    }
    if (cached_has_bits & 0x00000004u) {
      operator_type_ = from.operator_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetFileInfoOperator::CopyFrom(const GetFileInfoOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.GetFileInfoOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileInfoOperator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  if (_internal_has_disk_info()) {
    if (!disk_info_->IsInitialized()) return false;
  }
  return true;
}

void GetFileInfoOperator::InternalSwap(GetFileInfoOperator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFileInfoOperator, disk_info_)
      + sizeof(GetFileInfoOperator::disk_info_)
      - PROTOBUF_FIELD_OFFSET(GetFileInfoOperator, table_info_)>(
          reinterpret_cast<char*>(&table_info_),
          reinterpret_cast<char*>(&other->table_info_));
  swap(operator_type_, other->operator_type_);
}

std::string GetFileInfoOperator::GetTypeName() const {
  return "PolarXRPC.PhysicalBackfill.GetFileInfoOperator";
}


// ===================================================================

class TransferFileDataOperator::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferFileDataOperator>()._has_bits_);
  static void set_has_operator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PolarXRPC::PhysicalBackfill::FileInfo& file_info(const TransferFileDataOperator* msg);
  static void set_has_file_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PolarXRPC::PhysicalBackfill::DiskInfo& disk_info(const TransferFileDataOperator* msg);
  static void set_has_disk_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buffer_len(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003a) ^ 0x0000003a) != 0;
  }
};

const ::PolarXRPC::PhysicalBackfill::FileInfo&
TransferFileDataOperator::_Internal::file_info(const TransferFileDataOperator* msg) {
  return *msg->file_info_;
}
const ::PolarXRPC::PhysicalBackfill::DiskInfo&
TransferFileDataOperator::_Internal::disk_info(const TransferFileDataOperator* msg) {
  return *msg->disk_info_;
}
TransferFileDataOperator::TransferFileDataOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
}
TransferFileDataOperator::TransferFileDataOperator(const TransferFileDataOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buffer()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_file_info()) {
    file_info_ = new ::PolarXRPC::PhysicalBackfill::FileInfo(*from.file_info_);
  } else {
    file_info_ = nullptr;
  }
  if (from._internal_has_disk_info()) {
    disk_info_ = new ::PolarXRPC::PhysicalBackfill::DiskInfo(*from.disk_info_);
  } else {
    disk_info_ = nullptr;
  }
  ::memcpy(&buffer_len_, &from.buffer_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator_type_) -
    reinterpret_cast<char*>(&buffer_len_)) + sizeof(operator_type_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
}

inline void TransferFileDataOperator::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&file_info_)) + sizeof(offset_));
operator_type_ = 1;
}

TransferFileDataOperator::~TransferFileDataOperator() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TransferFileDataOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_info_;
  if (this != internal_default_instance()) delete disk_info_;
}

void TransferFileDataOperator::ArenaDtor(void* object) {
  TransferFileDataOperator* _this = reinterpret_cast< TransferFileDataOperator* >(object);
  (void)_this;
}
void TransferFileDataOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferFileDataOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferFileDataOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      buffer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(file_info_ != nullptr);
      file_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(disk_info_ != nullptr);
      disk_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&buffer_len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&buffer_len_)) + sizeof(offset_));
    operator_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TransferFileDataOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.PhysicalBackfill.TransferFileDataOperator.Type operator_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::PhysicalBackfill::TransferFileDataOperator_Type_IsValid(val))) {
            _internal_set_operator_type(static_cast<::PolarXRPC::PhysicalBackfill::TransferFileDataOperator_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .PolarXRPC.PhysicalBackfill.FileInfo file_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 buffer_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_buffer_len(&has_bits);
          buffer_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes buffer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferFileDataOperator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.PhysicalBackfill.TransferFileDataOperator.Type operator_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operator_type(), target);
  }

  // required .PolarXRPC.PhysicalBackfill.FileInfo file_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::file_info(this), target, stream);
  }

  // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::disk_info(this), target, stream);
  }

  // required uint64 buffer_len = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_buffer_len(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buffer(), target);
  }

  // required uint64 offset = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  return target;
}

size_t TransferFileDataOperator::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  size_t total_size = 0;

  if (_internal_has_file_info()) {
    // required .PolarXRPC.PhysicalBackfill.FileInfo file_info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_info_);
  }

  if (_internal_has_buffer_len()) {
    // required uint64 buffer_len = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_buffer_len());
  }

  if (_internal_has_offset()) {
    // required uint64 offset = 6;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  if (_internal_has_operator_type()) {
    // required .PolarXRPC.PhysicalBackfill.TransferFileDataOperator.Type operator_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());
  }

  return total_size;
}
size_t TransferFileDataOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003a) ^ 0x0000003a) == 0) {  // All required fields are present.
    // required .PolarXRPC.PhysicalBackfill.FileInfo file_info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_info_);

    // required uint64 buffer_len = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_buffer_len());

    // required uint64 offset = 6;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());

    // required .PolarXRPC.PhysicalBackfill.TransferFileDataOperator.Type operator_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes buffer = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // optional .PolarXRPC.PhysicalBackfill.DiskInfo disk_info = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disk_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferFileDataOperator::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransferFileDataOperator*>(
      &from));
}

void TransferFileDataOperator::MergeFrom(const TransferFileDataOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_buffer(from._internal_buffer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_file_info()->::PolarXRPC::PhysicalBackfill::FileInfo::MergeFrom(from._internal_file_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_disk_info()->::PolarXRPC::PhysicalBackfill::DiskInfo::MergeFrom(from._internal_disk_info());
    }
    if (cached_has_bits & 0x00000008u) {
      buffer_len_ = from.buffer_len_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      operator_type_ = from.operator_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TransferFileDataOperator::CopyFrom(const TransferFileDataOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.TransferFileDataOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferFileDataOperator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_file_info()) {
    if (!file_info_->IsInitialized()) return false;
  }
  if (_internal_has_disk_info()) {
    if (!disk_info_->IsInitialized()) return false;
  }
  return true;
}

void TransferFileDataOperator::InternalSwap(TransferFileDataOperator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferFileDataOperator, offset_)
      + sizeof(TransferFileDataOperator::offset_)
      - PROTOBUF_FIELD_OFFSET(TransferFileDataOperator, file_info_)>(
          reinterpret_cast<char*>(&file_info_),
          reinterpret_cast<char*>(&other->file_info_));
  swap(operator_type_, other->operator_type_);
}

std::string TransferFileDataOperator::GetTypeName() const {
  return "PolarXRPC.PhysicalBackfill.TransferFileDataOperator";
}


// ===================================================================

class FileManageOperator::_Internal {
 public:
  using HasBits = decltype(std::declval<FileManageOperator>()._has_bits_);
  static void set_has_operator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PolarXRPC::PhysicalBackfill::TableInfo& table_info(const FileManageOperator* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::PolarXRPC::PhysicalBackfill::TableInfo&
FileManageOperator::_Internal::table_info(const FileManageOperator* msg) {
  return *msg->table_info_;
}
FileManageOperator::FileManageOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.FileManageOperator)
}
FileManageOperator::FileManageOperator(const FileManageOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::PolarXRPC::PhysicalBackfill::TableInfo(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  operator_type_ = from.operator_type_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.FileManageOperator)
}

inline void FileManageOperator::SharedCtor() {
table_info_ = nullptr;
operator_type_ = 1;
}

FileManageOperator::~FileManageOperator() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.FileManageOperator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void FileManageOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
}

void FileManageOperator::ArenaDtor(void* object) {
  FileManageOperator* _this = reinterpret_cast< FileManageOperator* >(object);
  (void)_this;
}
void FileManageOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileManageOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileManageOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    operator_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FileManageOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.PhysicalBackfill.FileManageOperator.Type operator_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::PhysicalBackfill::FileManageOperator_Type_IsValid(val))) {
            _internal_set_operator_type(static_cast<::PolarXRPC::PhysicalBackfill::FileManageOperator_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileManageOperator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.PhysicalBackfill.FileManageOperator.Type operator_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operator_type(), target);
  }

  // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.FileManageOperator)
  return target;
}

size_t FileManageOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  size_t total_size = 0;

  // required .PolarXRPC.PhysicalBackfill.FileManageOperator.Type operator_type = 1;
  if (_internal_has_operator_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PolarXRPC.PhysicalBackfill.TableInfo table_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileManageOperator::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FileManageOperator*>(
      &from));
}

void FileManageOperator::MergeFrom(const FileManageOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_info()->::PolarXRPC::PhysicalBackfill::TableInfo::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      operator_type_ = from.operator_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FileManageOperator::CopyFrom(const FileManageOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.FileManageOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileManageOperator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  return true;
}

void FileManageOperator::InternalSwap(FileManageOperator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(table_info_, other->table_info_);
  swap(operator_type_, other->operator_type_);
}

std::string FileManageOperator::GetTypeName() const {
  return "PolarXRPC.PhysicalBackfill.FileManageOperator";
}


// ===================================================================

class FileManageOperatorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FileManageOperatorResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

FileManageOperatorResponse::FileManageOperatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
}
FileManageOperatorResponse::FileManageOperatorResponse(const FileManageOperatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detail()) {
    detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
}

inline void FileManageOperatorResponse::SharedCtor() {
detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = false;
}

FileManageOperatorResponse::~FileManageOperatorResponse() {
  // @@protoc_insertion_point(destructor:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void FileManageOperatorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileManageOperatorResponse::ArenaDtor(void* object) {
  FileManageOperatorResponse* _this = reinterpret_cast< FileManageOperatorResponse* >(object);
  (void)_this;
}
void FileManageOperatorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileManageOperatorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileManageOperatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    detail_.ClearNonDefaultToEmpty();
  }
  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FileManageOperatorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileManageOperatorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // optional string detail = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  return target;
}

size_t FileManageOperatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string detail = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileManageOperatorResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FileManageOperatorResponse*>(
      &from));
}

void FileManageOperatorResponse::MergeFrom(const FileManageOperatorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_detail(from._internal_detail());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FileManageOperatorResponse::CopyFrom(const FileManageOperatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.PhysicalBackfill.FileManageOperatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileManageOperatorResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FileManageOperatorResponse::InternalSwap(FileManageOperatorResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &detail_, lhs_arena,
      &other->detail_, rhs_arena
  );
  swap(result_, other->result_);
}

std::string FileManageOperatorResponse::GetTypeName() const {
  return "PolarXRPC.PhysicalBackfill.FileManageOperatorResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PhysicalBackfill
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::TableInfo* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::TableInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::TableInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::FileInfo* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::DiskInfo* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::DiskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::DiskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::GetFileInfoOperator* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::GetFileInfoOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::GetFileInfoOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::TransferFileDataOperator* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::TransferFileDataOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::TransferFileDataOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::FileManageOperator* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::FileManageOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::FileManageOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse* Arena::CreateMaybeMessage< ::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::PhysicalBackfill::FileManageOperatorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
