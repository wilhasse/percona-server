// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_resultset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_polarx_5fresultset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_polarx_5fresultset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_polarx_5fresultset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_polarx_5fresultset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace PolarXRPC {
namespace Resultset {
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class Column;
struct ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class ColumnMetaData;
struct ColumnMetaDataDefaultTypeInternal;
extern ColumnMetaDataDefaultTypeInternal _ColumnMetaData_default_instance_;
class FetchDone;
struct FetchDoneDefaultTypeInternal;
extern FetchDoneDefaultTypeInternal _FetchDone_default_instance_;
class FetchDoneMoreOutParams;
struct FetchDoneMoreOutParamsDefaultTypeInternal;
extern FetchDoneMoreOutParamsDefaultTypeInternal _FetchDoneMoreOutParams_default_instance_;
class FetchDoneMoreResultsets;
struct FetchDoneMoreResultsetsDefaultTypeInternal;
extern FetchDoneMoreResultsetsDefaultTypeInternal _FetchDoneMoreResultsets_default_instance_;
class FixedSizeColumn;
struct FixedSizeColumnDefaultTypeInternal;
extern FixedSizeColumnDefaultTypeInternal _FixedSizeColumn_default_instance_;
class Row;
struct RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class TokenDone;
struct TokenDoneDefaultTypeInternal;
extern TokenDoneDefaultTypeInternal _TokenDone_default_instance_;
class VariableSizeColumn;
struct VariableSizeColumnDefaultTypeInternal;
extern VariableSizeColumnDefaultTypeInternal _VariableSizeColumn_default_instance_;
}  // namespace Resultset
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::PolarXRPC::Resultset::Chunk* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::Chunk>(Arena*);
template<> ::PolarXRPC::Resultset::Column* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::Column>(Arena*);
template<> ::PolarXRPC::Resultset::ColumnMetaData* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::ColumnMetaData>(Arena*);
template<> ::PolarXRPC::Resultset::FetchDone* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::FetchDone>(Arena*);
template<> ::PolarXRPC::Resultset::FetchDoneMoreOutParams* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::FetchDoneMoreOutParams>(Arena*);
template<> ::PolarXRPC::Resultset::FetchDoneMoreResultsets* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::FetchDoneMoreResultsets>(Arena*);
template<> ::PolarXRPC::Resultset::FixedSizeColumn* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::FixedSizeColumn>(Arena*);
template<> ::PolarXRPC::Resultset::Row* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::Row>(Arena*);
template<> ::PolarXRPC::Resultset::TokenDone* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::TokenDone>(Arena*);
template<> ::PolarXRPC::Resultset::VariableSizeColumn* Arena::CreateMaybeMessage<::PolarXRPC::Resultset::VariableSizeColumn>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PolarXRPC {
namespace Resultset {

enum ColumnMetaData_FieldType : int {
  ColumnMetaData_FieldType_SINT = 1,
  ColumnMetaData_FieldType_UINT = 2,
  ColumnMetaData_FieldType_DOUBLE = 5,
  ColumnMetaData_FieldType_FLOAT = 6,
  ColumnMetaData_FieldType_BYTES = 7,
  ColumnMetaData_FieldType_TIME = 10,
  ColumnMetaData_FieldType_DATETIME = 12,
  ColumnMetaData_FieldType_SET = 15,
  ColumnMetaData_FieldType_ENUM = 16,
  ColumnMetaData_FieldType_BIT = 17,
  ColumnMetaData_FieldType_DECIMAL = 18
};
bool ColumnMetaData_FieldType_IsValid(int value);
constexpr ColumnMetaData_FieldType ColumnMetaData_FieldType_FieldType_MIN = ColumnMetaData_FieldType_SINT;
constexpr ColumnMetaData_FieldType ColumnMetaData_FieldType_FieldType_MAX = ColumnMetaData_FieldType_DECIMAL;
constexpr int ColumnMetaData_FieldType_FieldType_ARRAYSIZE = ColumnMetaData_FieldType_FieldType_MAX + 1;

const std::string& ColumnMetaData_FieldType_Name(ColumnMetaData_FieldType value);
template<typename T>
inline const std::string& ColumnMetaData_FieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColumnMetaData_FieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColumnMetaData_FieldType_Name.");
  return ColumnMetaData_FieldType_Name(static_cast<ColumnMetaData_FieldType>(enum_t_value));
}
bool ColumnMetaData_FieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColumnMetaData_FieldType* value);
enum ColumnMetaData_OriginalType : int {
  ColumnMetaData_OriginalType_MYSQL_TYPE_DECIMAL = 0,
  ColumnMetaData_OriginalType_MYSQL_TYPE_TINY = 1,
  ColumnMetaData_OriginalType_MYSQL_TYPE_SHORT = 2,
  ColumnMetaData_OriginalType_MYSQL_TYPE_LONG = 3,
  ColumnMetaData_OriginalType_MYSQL_TYPE_FLOAT = 4,
  ColumnMetaData_OriginalType_MYSQL_TYPE_DOUBLE = 5,
  ColumnMetaData_OriginalType_MYSQL_TYPE_NULL = 6,
  ColumnMetaData_OriginalType_MYSQL_TYPE_TIMESTAMP = 7,
  ColumnMetaData_OriginalType_MYSQL_TYPE_LONGLONG = 8,
  ColumnMetaData_OriginalType_MYSQL_TYPE_INT24 = 9,
  ColumnMetaData_OriginalType_MYSQL_TYPE_DATE = 10,
  ColumnMetaData_OriginalType_MYSQL_TYPE_TIME = 11,
  ColumnMetaData_OriginalType_MYSQL_TYPE_DATETIME = 12,
  ColumnMetaData_OriginalType_MYSQL_TYPE_YEAR = 13,
  ColumnMetaData_OriginalType_MYSQL_TYPE_NEWDATE = 14,
  ColumnMetaData_OriginalType_MYSQL_TYPE_VARCHAR = 15,
  ColumnMetaData_OriginalType_MYSQL_TYPE_BIT = 16,
  ColumnMetaData_OriginalType_MYSQL_TYPE_TIMESTAMP2 = 17,
  ColumnMetaData_OriginalType_MYSQL_TYPE_DATETIME2 = 18,
  ColumnMetaData_OriginalType_MYSQL_TYPE_TIME2 = 19,
  ColumnMetaData_OriginalType_MYSQL_TYPE_JSON = 245,
  ColumnMetaData_OriginalType_MYSQL_TYPE_NEWDECIMAL = 246,
  ColumnMetaData_OriginalType_MYSQL_TYPE_ENUM = 247,
  ColumnMetaData_OriginalType_MYSQL_TYPE_SET = 248,
  ColumnMetaData_OriginalType_MYSQL_TYPE_TINY_BLOB = 249,
  ColumnMetaData_OriginalType_MYSQL_TYPE_MEDIUM_BLOB = 250,
  ColumnMetaData_OriginalType_MYSQL_TYPE_LONG_BLOB = 251,
  ColumnMetaData_OriginalType_MYSQL_TYPE_BLOB = 252,
  ColumnMetaData_OriginalType_MYSQL_TYPE_VAR_STRING = 253,
  ColumnMetaData_OriginalType_MYSQL_TYPE_STRING = 254,
  ColumnMetaData_OriginalType_MYSQL_TYPE_GEOMETRY = 255
};
bool ColumnMetaData_OriginalType_IsValid(int value);
constexpr ColumnMetaData_OriginalType ColumnMetaData_OriginalType_OriginalType_MIN = ColumnMetaData_OriginalType_MYSQL_TYPE_DECIMAL;
constexpr ColumnMetaData_OriginalType ColumnMetaData_OriginalType_OriginalType_MAX = ColumnMetaData_OriginalType_MYSQL_TYPE_GEOMETRY;
constexpr int ColumnMetaData_OriginalType_OriginalType_ARRAYSIZE = ColumnMetaData_OriginalType_OriginalType_MAX + 1;

const std::string& ColumnMetaData_OriginalType_Name(ColumnMetaData_OriginalType value);
template<typename T>
inline const std::string& ColumnMetaData_OriginalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColumnMetaData_OriginalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColumnMetaData_OriginalType_Name.");
  return ColumnMetaData_OriginalType_Name(static_cast<ColumnMetaData_OriginalType>(enum_t_value));
}
bool ColumnMetaData_OriginalType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColumnMetaData_OriginalType* value);
// ===================================================================

class FetchDoneMoreOutParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.FetchDoneMoreOutParams) */ {
 public:
  inline FetchDoneMoreOutParams() : FetchDoneMoreOutParams(nullptr) {}
  ~FetchDoneMoreOutParams() override;
  explicit constexpr FetchDoneMoreOutParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchDoneMoreOutParams(const FetchDoneMoreOutParams& from);
  FetchDoneMoreOutParams(FetchDoneMoreOutParams&& from) noexcept
    : FetchDoneMoreOutParams() {
    *this = ::std::move(from);
  }

  inline FetchDoneMoreOutParams& operator=(const FetchDoneMoreOutParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDoneMoreOutParams& operator=(FetchDoneMoreOutParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FetchDoneMoreOutParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchDoneMoreOutParams* internal_default_instance() {
    return reinterpret_cast<const FetchDoneMoreOutParams*>(
               &_FetchDoneMoreOutParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FetchDoneMoreOutParams& a, FetchDoneMoreOutParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDoneMoreOutParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDoneMoreOutParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchDoneMoreOutParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchDoneMoreOutParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FetchDoneMoreOutParams& from);
  void MergeFrom(const FetchDoneMoreOutParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchDoneMoreOutParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.FetchDoneMoreOutParams";
  }
  protected:
  explicit FetchDoneMoreOutParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.FetchDoneMoreOutParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class FetchDoneMoreResultsets final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.FetchDoneMoreResultsets) */ {
 public:
  inline FetchDoneMoreResultsets() : FetchDoneMoreResultsets(nullptr) {}
  ~FetchDoneMoreResultsets() override;
  explicit constexpr FetchDoneMoreResultsets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchDoneMoreResultsets(const FetchDoneMoreResultsets& from);
  FetchDoneMoreResultsets(FetchDoneMoreResultsets&& from) noexcept
    : FetchDoneMoreResultsets() {
    *this = ::std::move(from);
  }

  inline FetchDoneMoreResultsets& operator=(const FetchDoneMoreResultsets& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDoneMoreResultsets& operator=(FetchDoneMoreResultsets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FetchDoneMoreResultsets& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchDoneMoreResultsets* internal_default_instance() {
    return reinterpret_cast<const FetchDoneMoreResultsets*>(
               &_FetchDoneMoreResultsets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FetchDoneMoreResultsets& a, FetchDoneMoreResultsets& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDoneMoreResultsets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDoneMoreResultsets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchDoneMoreResultsets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchDoneMoreResultsets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FetchDoneMoreResultsets& from);
  void MergeFrom(const FetchDoneMoreResultsets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchDoneMoreResultsets* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.FetchDoneMoreResultsets";
  }
  protected:
  explicit FetchDoneMoreResultsets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.FetchDoneMoreResultsets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class FetchDone final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.FetchDone) */ {
 public:
  inline FetchDone() : FetchDone(nullptr) {}
  ~FetchDone() override;
  explicit constexpr FetchDone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchDone(const FetchDone& from);
  FetchDone(FetchDone&& from) noexcept
    : FetchDone() {
    *this = ::std::move(from);
  }

  inline FetchDone& operator=(const FetchDone& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDone& operator=(FetchDone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FetchDone& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchDone* internal_default_instance() {
    return reinterpret_cast<const FetchDone*>(
               &_FetchDone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FetchDone& a, FetchDone& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchDone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchDone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FetchDone& from);
  void MergeFrom(const FetchDone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchDone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.FetchDone";
  }
  protected:
  explicit FetchDone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChosenIndexFieldNumber = 2,
    kExaminedRowCountFieldNumber = 1,
  };
  // optional bytes chosen_index = 2;
  bool has_chosen_index() const;
  private:
  bool _internal_has_chosen_index() const;
  public:
  void clear_chosen_index();
  const std::string& chosen_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chosen_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chosen_index();
  PROTOBUF_NODISCARD std::string* release_chosen_index();
  void set_allocated_chosen_index(std::string* chosen_index);
  private:
  const std::string& _internal_chosen_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chosen_index(const std::string& value);
  std::string* _internal_mutable_chosen_index();
  public:

  // optional uint64 examined_row_count = 1;
  bool has_examined_row_count() const;
  private:
  bool _internal_has_examined_row_count() const;
  public:
  void clear_examined_row_count();
  uint64_t examined_row_count() const;
  void set_examined_row_count(uint64_t value);
  private:
  uint64_t _internal_examined_row_count() const;
  void _internal_set_examined_row_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.FetchDone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chosen_index_;
  uint64_t examined_row_count_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class ColumnMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.ColumnMetaData) */ {
 public:
  inline ColumnMetaData() : ColumnMetaData(nullptr) {}
  ~ColumnMetaData() override;
  explicit constexpr ColumnMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnMetaData(const ColumnMetaData& from);
  ColumnMetaData(ColumnMetaData&& from) noexcept
    : ColumnMetaData() {
    *this = ::std::move(from);
  }

  inline ColumnMetaData& operator=(const ColumnMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnMetaData& operator=(ColumnMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ColumnMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnMetaData* internal_default_instance() {
    return reinterpret_cast<const ColumnMetaData*>(
               &_ColumnMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ColumnMetaData& a, ColumnMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnMetaData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ColumnMetaData& from);
  void MergeFrom(const ColumnMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColumnMetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.ColumnMetaData";
  }
  protected:
  explicit ColumnMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ColumnMetaData_FieldType FieldType;
  static constexpr FieldType SINT =
    ColumnMetaData_FieldType_SINT;
  static constexpr FieldType UINT =
    ColumnMetaData_FieldType_UINT;
  static constexpr FieldType DOUBLE =
    ColumnMetaData_FieldType_DOUBLE;
  static constexpr FieldType FLOAT =
    ColumnMetaData_FieldType_FLOAT;
  static constexpr FieldType BYTES =
    ColumnMetaData_FieldType_BYTES;
  static constexpr FieldType TIME =
    ColumnMetaData_FieldType_TIME;
  static constexpr FieldType DATETIME =
    ColumnMetaData_FieldType_DATETIME;
  static constexpr FieldType SET =
    ColumnMetaData_FieldType_SET;
  static constexpr FieldType ENUM =
    ColumnMetaData_FieldType_ENUM;
  static constexpr FieldType BIT =
    ColumnMetaData_FieldType_BIT;
  static constexpr FieldType DECIMAL =
    ColumnMetaData_FieldType_DECIMAL;
  static inline bool FieldType_IsValid(int value) {
    return ColumnMetaData_FieldType_IsValid(value);
  }
  static constexpr FieldType FieldType_MIN =
    ColumnMetaData_FieldType_FieldType_MIN;
  static constexpr FieldType FieldType_MAX =
    ColumnMetaData_FieldType_FieldType_MAX;
  static constexpr int FieldType_ARRAYSIZE =
    ColumnMetaData_FieldType_FieldType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FieldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FieldType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FieldType_Name.");
    return ColumnMetaData_FieldType_Name(enum_t_value);
  }
  static inline bool FieldType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FieldType* value) {
    return ColumnMetaData_FieldType_Parse(name, value);
  }

  typedef ColumnMetaData_OriginalType OriginalType;
  static constexpr OriginalType MYSQL_TYPE_DECIMAL =
    ColumnMetaData_OriginalType_MYSQL_TYPE_DECIMAL;
  static constexpr OriginalType MYSQL_TYPE_TINY =
    ColumnMetaData_OriginalType_MYSQL_TYPE_TINY;
  static constexpr OriginalType MYSQL_TYPE_SHORT =
    ColumnMetaData_OriginalType_MYSQL_TYPE_SHORT;
  static constexpr OriginalType MYSQL_TYPE_LONG =
    ColumnMetaData_OriginalType_MYSQL_TYPE_LONG;
  static constexpr OriginalType MYSQL_TYPE_FLOAT =
    ColumnMetaData_OriginalType_MYSQL_TYPE_FLOAT;
  static constexpr OriginalType MYSQL_TYPE_DOUBLE =
    ColumnMetaData_OriginalType_MYSQL_TYPE_DOUBLE;
  static constexpr OriginalType MYSQL_TYPE_NULL =
    ColumnMetaData_OriginalType_MYSQL_TYPE_NULL;
  static constexpr OriginalType MYSQL_TYPE_TIMESTAMP =
    ColumnMetaData_OriginalType_MYSQL_TYPE_TIMESTAMP;
  static constexpr OriginalType MYSQL_TYPE_LONGLONG =
    ColumnMetaData_OriginalType_MYSQL_TYPE_LONGLONG;
  static constexpr OriginalType MYSQL_TYPE_INT24 =
    ColumnMetaData_OriginalType_MYSQL_TYPE_INT24;
  static constexpr OriginalType MYSQL_TYPE_DATE =
    ColumnMetaData_OriginalType_MYSQL_TYPE_DATE;
  static constexpr OriginalType MYSQL_TYPE_TIME =
    ColumnMetaData_OriginalType_MYSQL_TYPE_TIME;
  static constexpr OriginalType MYSQL_TYPE_DATETIME =
    ColumnMetaData_OriginalType_MYSQL_TYPE_DATETIME;
  static constexpr OriginalType MYSQL_TYPE_YEAR =
    ColumnMetaData_OriginalType_MYSQL_TYPE_YEAR;
  static constexpr OriginalType MYSQL_TYPE_NEWDATE =
    ColumnMetaData_OriginalType_MYSQL_TYPE_NEWDATE;
  static constexpr OriginalType MYSQL_TYPE_VARCHAR =
    ColumnMetaData_OriginalType_MYSQL_TYPE_VARCHAR;
  static constexpr OriginalType MYSQL_TYPE_BIT =
    ColumnMetaData_OriginalType_MYSQL_TYPE_BIT;
  static constexpr OriginalType MYSQL_TYPE_TIMESTAMP2 =
    ColumnMetaData_OriginalType_MYSQL_TYPE_TIMESTAMP2;
  static constexpr OriginalType MYSQL_TYPE_DATETIME2 =
    ColumnMetaData_OriginalType_MYSQL_TYPE_DATETIME2;
  static constexpr OriginalType MYSQL_TYPE_TIME2 =
    ColumnMetaData_OriginalType_MYSQL_TYPE_TIME2;
  static constexpr OriginalType MYSQL_TYPE_JSON =
    ColumnMetaData_OriginalType_MYSQL_TYPE_JSON;
  static constexpr OriginalType MYSQL_TYPE_NEWDECIMAL =
    ColumnMetaData_OriginalType_MYSQL_TYPE_NEWDECIMAL;
  static constexpr OriginalType MYSQL_TYPE_ENUM =
    ColumnMetaData_OriginalType_MYSQL_TYPE_ENUM;
  static constexpr OriginalType MYSQL_TYPE_SET =
    ColumnMetaData_OriginalType_MYSQL_TYPE_SET;
  static constexpr OriginalType MYSQL_TYPE_TINY_BLOB =
    ColumnMetaData_OriginalType_MYSQL_TYPE_TINY_BLOB;
  static constexpr OriginalType MYSQL_TYPE_MEDIUM_BLOB =
    ColumnMetaData_OriginalType_MYSQL_TYPE_MEDIUM_BLOB;
  static constexpr OriginalType MYSQL_TYPE_LONG_BLOB =
    ColumnMetaData_OriginalType_MYSQL_TYPE_LONG_BLOB;
  static constexpr OriginalType MYSQL_TYPE_BLOB =
    ColumnMetaData_OriginalType_MYSQL_TYPE_BLOB;
  static constexpr OriginalType MYSQL_TYPE_VAR_STRING =
    ColumnMetaData_OriginalType_MYSQL_TYPE_VAR_STRING;
  static constexpr OriginalType MYSQL_TYPE_STRING =
    ColumnMetaData_OriginalType_MYSQL_TYPE_STRING;
  static constexpr OriginalType MYSQL_TYPE_GEOMETRY =
    ColumnMetaData_OriginalType_MYSQL_TYPE_GEOMETRY;
  static inline bool OriginalType_IsValid(int value) {
    return ColumnMetaData_OriginalType_IsValid(value);
  }
  static constexpr OriginalType OriginalType_MIN =
    ColumnMetaData_OriginalType_OriginalType_MIN;
  static constexpr OriginalType OriginalType_MAX =
    ColumnMetaData_OriginalType_OriginalType_MAX;
  static constexpr int OriginalType_ARRAYSIZE =
    ColumnMetaData_OriginalType_OriginalType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& OriginalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OriginalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OriginalType_Name.");
    return ColumnMetaData_OriginalType_Name(enum_t_value);
  }
  static inline bool OriginalType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OriginalType* value) {
    return ColumnMetaData_OriginalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kOriginalNameFieldNumber = 4,
    kTableFieldNumber = 5,
    kOriginalTableFieldNumber = 6,
    kSchemaFieldNumber = 7,
    kCatalogFieldNumber = 8,
    kOriginalTypeFieldNumber = 2,
    kFractionalDigitsFieldNumber = 10,
    kCollationFieldNumber = 9,
    kLengthFieldNumber = 11,
    kFlagsFieldNumber = 12,
    kContentTypeFieldNumber = 13,
    kOriginalFlagsFieldNumber = 14,
    kTypeFieldNumber = 1,
  };
  // optional bytes name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes original_name = 4;
  bool has_original_name() const;
  private:
  bool _internal_has_original_name() const;
  public:
  void clear_original_name();
  const std::string& original_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_name();
  PROTOBUF_NODISCARD std::string* release_original_name();
  void set_allocated_original_name(std::string* original_name);
  private:
  const std::string& _internal_original_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_name(const std::string& value);
  std::string* _internal_mutable_original_name();
  public:

  // optional bytes table = 5;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const std::string& table() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table();
  PROTOBUF_NODISCARD std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // optional bytes original_table = 6;
  bool has_original_table() const;
  private:
  bool _internal_has_original_table() const;
  public:
  void clear_original_table();
  const std::string& original_table() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_table(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_table();
  PROTOBUF_NODISCARD std::string* release_original_table();
  void set_allocated_original_table(std::string* original_table);
  private:
  const std::string& _internal_original_table() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_table(const std::string& value);
  std::string* _internal_mutable_original_table();
  public:

  // optional bytes schema = 7;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // optional bytes catalog = 8;
  bool has_catalog() const;
  private:
  bool _internal_has_catalog() const;
  public:
  void clear_catalog();
  const std::string& catalog() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_catalog(ArgT0&& arg0, ArgT... args);
  std::string* mutable_catalog();
  PROTOBUF_NODISCARD std::string* release_catalog();
  void set_allocated_catalog(std::string* catalog);
  private:
  const std::string& _internal_catalog() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_catalog(const std::string& value);
  std::string* _internal_mutable_catalog();
  public:

  // required .PolarXRPC.Resultset.ColumnMetaData.OriginalType original_type = 2;
  bool has_original_type() const;
  private:
  bool _internal_has_original_type() const;
  public:
  void clear_original_type();
  ::PolarXRPC::Resultset::ColumnMetaData_OriginalType original_type() const;
  void set_original_type(::PolarXRPC::Resultset::ColumnMetaData_OriginalType value);
  private:
  ::PolarXRPC::Resultset::ColumnMetaData_OriginalType _internal_original_type() const;
  void _internal_set_original_type(::PolarXRPC::Resultset::ColumnMetaData_OriginalType value);
  public:

  // optional uint32 fractional_digits = 10;
  bool has_fractional_digits() const;
  private:
  bool _internal_has_fractional_digits() const;
  public:
  void clear_fractional_digits();
  uint32_t fractional_digits() const;
  void set_fractional_digits(uint32_t value);
  private:
  uint32_t _internal_fractional_digits() const;
  void _internal_set_fractional_digits(uint32_t value);
  public:

  // optional uint64 collation = 9;
  bool has_collation() const;
  private:
  bool _internal_has_collation() const;
  public:
  void clear_collation();
  uint64_t collation() const;
  void set_collation(uint64_t value);
  private:
  uint64_t _internal_collation() const;
  void _internal_set_collation(uint64_t value);
  public:

  // optional uint32 length = 11;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // optional uint32 flags = 12;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 content_type = 13;
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  uint32_t content_type() const;
  void set_content_type(uint32_t value);
  private:
  uint32_t _internal_content_type() const;
  void _internal_set_content_type(uint32_t value);
  public:

  // optional uint32 original_flags = 14;
  bool has_original_flags() const;
  private:
  bool _internal_has_original_flags() const;
  public:
  void clear_original_flags();
  uint32_t original_flags() const;
  void set_original_flags(uint32_t value);
  private:
  uint32_t _internal_original_flags() const;
  void _internal_set_original_flags(uint32_t value);
  public:

  // required .PolarXRPC.Resultset.ColumnMetaData.FieldType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PolarXRPC::Resultset::ColumnMetaData_FieldType type() const;
  void set_type(::PolarXRPC::Resultset::ColumnMetaData_FieldType value);
  private:
  ::PolarXRPC::Resultset::ColumnMetaData_FieldType _internal_type() const;
  void _internal_set_type(::PolarXRPC::Resultset::ColumnMetaData_FieldType value);
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.ColumnMetaData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr catalog_;
  int original_type_;
  uint32_t fractional_digits_;
  uint64_t collation_;
  uint32_t length_;
  uint32_t flags_;
  uint32_t content_type_;
  uint32_t original_flags_;
  int type_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class Row final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  ~Row() override;
  explicit constexpr Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Row* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated bytes field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  const std::string& field(int index) const;
  std::string* mutable_field(int index);
  void set_field(int index, const std::string& value);
  void set_field(int index, std::string&& value);
  void set_field(int index, const char* value);
  void set_field(int index, const void* value, size_t size);
  std::string* add_field();
  void add_field(const std::string& value);
  void add_field(std::string&& value);
  void add_field(const char* value);
  void add_field(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field();
  private:
  const std::string& _internal_field(int index) const;
  std::string* _internal_add_field();
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class TokenDone final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.TokenDone) */ {
 public:
  inline TokenDone() : TokenDone(nullptr) {}
  ~TokenDone() override;
  explicit constexpr TokenDone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenDone(const TokenDone& from);
  TokenDone(TokenDone&& from) noexcept
    : TokenDone() {
    *this = ::std::move(from);
  }

  inline TokenDone& operator=(const TokenDone& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenDone& operator=(TokenDone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TokenDone& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenDone* internal_default_instance() {
    return reinterpret_cast<const TokenDone*>(
               &_TokenDone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TokenDone& a, TokenDone& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenDone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenDone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenDone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenDone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TokenDone& from);
  void MergeFrom(const TokenDone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TokenDone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.TokenDone";
  }
  protected:
  explicit TokenDone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenLeftFieldNumber = 1,
  };
  // optional int32 token_left = 1 [default = 0];
  bool has_token_left() const;
  private:
  bool _internal_has_token_left() const;
  public:
  void clear_token_left();
  int32_t token_left() const;
  void set_token_left(int32_t value);
  private:
  int32_t _internal_token_left() const;
  void _internal_set_token_left(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.TokenDone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t token_left_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class Chunk final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  ~Chunk() override;
  explicit constexpr Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Chunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 2,
    kRowCountFieldNumber = 1,
  };
  // repeated .PolarXRPC.Resultset.Column columns = 2;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::PolarXRPC::Resultset::Column* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Resultset::Column >*
      mutable_columns();
  private:
  const ::PolarXRPC::Resultset::Column& _internal_columns(int index) const;
  ::PolarXRPC::Resultset::Column* _internal_add_columns();
  public:
  const ::PolarXRPC::Resultset::Column& columns(int index) const;
  ::PolarXRPC::Resultset::Column* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Resultset::Column >&
      columns() const;

  // required uint32 row_count = 1;
  bool has_row_count() const;
  private:
  bool _internal_has_row_count() const;
  public:
  void clear_row_count();
  uint32_t row_count() const;
  void set_row_count(uint32_t value);
  private:
  uint32_t _internal_row_count() const;
  void _internal_set_row_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Resultset::Column > columns_;
  uint32_t row_count_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class Column final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  ~Column() override;
  explicit constexpr Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Column(const Column& from);
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.Column";
  }
  protected:
  explicit Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullBitmapFieldNumber = 1,
    kFixedSizeColumnFieldNumber = 2,
    kVariableSizeColumnFieldNumber = 3,
  };
  // optional bytes null_bitmap = 1;
  bool has_null_bitmap() const;
  private:
  bool _internal_has_null_bitmap() const;
  public:
  void clear_null_bitmap();
  const std::string& null_bitmap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_null_bitmap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_null_bitmap();
  PROTOBUF_NODISCARD std::string* release_null_bitmap();
  void set_allocated_null_bitmap(std::string* null_bitmap);
  private:
  const std::string& _internal_null_bitmap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_null_bitmap(const std::string& value);
  std::string* _internal_mutable_null_bitmap();
  public:

  // optional .PolarXRPC.Resultset.FixedSizeColumn fixed_size_column = 2;
  bool has_fixed_size_column() const;
  private:
  bool _internal_has_fixed_size_column() const;
  public:
  void clear_fixed_size_column();
  const ::PolarXRPC::Resultset::FixedSizeColumn& fixed_size_column() const;
  PROTOBUF_NODISCARD ::PolarXRPC::Resultset::FixedSizeColumn* release_fixed_size_column();
  ::PolarXRPC::Resultset::FixedSizeColumn* mutable_fixed_size_column();
  void set_allocated_fixed_size_column(::PolarXRPC::Resultset::FixedSizeColumn* fixed_size_column);
  private:
  const ::PolarXRPC::Resultset::FixedSizeColumn& _internal_fixed_size_column() const;
  ::PolarXRPC::Resultset::FixedSizeColumn* _internal_mutable_fixed_size_column();
  public:
  void unsafe_arena_set_allocated_fixed_size_column(
      ::PolarXRPC::Resultset::FixedSizeColumn* fixed_size_column);
  ::PolarXRPC::Resultset::FixedSizeColumn* unsafe_arena_release_fixed_size_column();

  // optional .PolarXRPC.Resultset.VariableSizeColumn variable_size_column = 3;
  bool has_variable_size_column() const;
  private:
  bool _internal_has_variable_size_column() const;
  public:
  void clear_variable_size_column();
  const ::PolarXRPC::Resultset::VariableSizeColumn& variable_size_column() const;
  PROTOBUF_NODISCARD ::PolarXRPC::Resultset::VariableSizeColumn* release_variable_size_column();
  ::PolarXRPC::Resultset::VariableSizeColumn* mutable_variable_size_column();
  void set_allocated_variable_size_column(::PolarXRPC::Resultset::VariableSizeColumn* variable_size_column);
  private:
  const ::PolarXRPC::Resultset::VariableSizeColumn& _internal_variable_size_column() const;
  ::PolarXRPC::Resultset::VariableSizeColumn* _internal_mutable_variable_size_column();
  public:
  void unsafe_arena_set_allocated_variable_size_column(
      ::PolarXRPC::Resultset::VariableSizeColumn* variable_size_column);
  ::PolarXRPC::Resultset::VariableSizeColumn* unsafe_arena_release_variable_size_column();

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr null_bitmap_;
  ::PolarXRPC::Resultset::FixedSizeColumn* fixed_size_column_;
  ::PolarXRPC::Resultset::VariableSizeColumn* variable_size_column_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class FixedSizeColumn final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.FixedSizeColumn) */ {
 public:
  inline FixedSizeColumn() : FixedSizeColumn(nullptr) {}
  ~FixedSizeColumn() override;
  explicit constexpr FixedSizeColumn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedSizeColumn(const FixedSizeColumn& from);
  FixedSizeColumn(FixedSizeColumn&& from) noexcept
    : FixedSizeColumn() {
    *this = ::std::move(from);
  }

  inline FixedSizeColumn& operator=(const FixedSizeColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedSizeColumn& operator=(FixedSizeColumn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FixedSizeColumn& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedSizeColumn* internal_default_instance() {
    return reinterpret_cast<const FixedSizeColumn*>(
               &_FixedSizeColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FixedSizeColumn& a, FixedSizeColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedSizeColumn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedSizeColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixedSizeColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FixedSizeColumn>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FixedSizeColumn& from);
  void MergeFrom(const FixedSizeColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FixedSizeColumn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.FixedSizeColumn";
  }
  protected:
  explicit FixedSizeColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // required bytes value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.FixedSizeColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class VariableSizeColumn final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PolarXRPC.Resultset.VariableSizeColumn) */ {
 public:
  inline VariableSizeColumn() : VariableSizeColumn(nullptr) {}
  ~VariableSizeColumn() override;
  explicit constexpr VariableSizeColumn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableSizeColumn(const VariableSizeColumn& from);
  VariableSizeColumn(VariableSizeColumn&& from) noexcept
    : VariableSizeColumn() {
    *this = ::std::move(from);
  }

  inline VariableSizeColumn& operator=(const VariableSizeColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableSizeColumn& operator=(VariableSizeColumn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VariableSizeColumn& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableSizeColumn* internal_default_instance() {
    return reinterpret_cast<const VariableSizeColumn*>(
               &_VariableSizeColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VariableSizeColumn& a, VariableSizeColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableSizeColumn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableSizeColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableSizeColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableSizeColumn>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VariableSizeColumn& from);
  void MergeFrom(const VariableSizeColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VariableSizeColumn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolarXRPC.Resultset.VariableSizeColumn";
  }
  protected:
  explicit VariableSizeColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // required bytes value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:PolarXRPC.Resultset.VariableSizeColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_polarx_5fresultset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FetchDoneMoreOutParams

// -------------------------------------------------------------------

// FetchDoneMoreResultsets

// -------------------------------------------------------------------

// FetchDone

// optional uint64 examined_row_count = 1;
inline bool FetchDone::_internal_has_examined_row_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FetchDone::has_examined_row_count() const {
  return _internal_has_examined_row_count();
}
inline void FetchDone::clear_examined_row_count() {
  examined_row_count_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t FetchDone::_internal_examined_row_count() const {
  return examined_row_count_;
}
inline uint64_t FetchDone::examined_row_count() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.FetchDone.examined_row_count)
  return _internal_examined_row_count();
}
inline void FetchDone::_internal_set_examined_row_count(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  examined_row_count_ = value;
}
inline void FetchDone::set_examined_row_count(uint64_t value) {
  _internal_set_examined_row_count(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.FetchDone.examined_row_count)
}

// optional bytes chosen_index = 2;
inline bool FetchDone::_internal_has_chosen_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FetchDone::has_chosen_index() const {
  return _internal_has_chosen_index();
}
inline void FetchDone::clear_chosen_index() {
  chosen_index_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FetchDone::chosen_index() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.FetchDone.chosen_index)
  return _internal_chosen_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchDone::set_chosen_index(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 chosen_index_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.FetchDone.chosen_index)
}
inline std::string* FetchDone::mutable_chosen_index() {
  std::string* _s = _internal_mutable_chosen_index();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.FetchDone.chosen_index)
  return _s;
}
inline const std::string& FetchDone::_internal_chosen_index() const {
  return chosen_index_.Get();
}
inline void FetchDone::_internal_set_chosen_index(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  chosen_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FetchDone::_internal_mutable_chosen_index() {
  _has_bits_[0] |= 0x00000001u;
  return chosen_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FetchDone::release_chosen_index() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.FetchDone.chosen_index)
  if (!_internal_has_chosen_index()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = chosen_index_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chosen_index_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chosen_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FetchDone::set_allocated_chosen_index(std::string* chosen_index) {
  if (chosen_index != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chosen_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chosen_index,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chosen_index_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chosen_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.FetchDone.chosen_index)
}

// -------------------------------------------------------------------

// ColumnMetaData

// required .PolarXRPC.Resultset.ColumnMetaData.FieldType type = 1;
inline bool ColumnMetaData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ColumnMetaData::has_type() const {
  return _internal_has_type();
}
inline void ColumnMetaData::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PolarXRPC::Resultset::ColumnMetaData_FieldType ColumnMetaData::_internal_type() const {
  return static_cast< ::PolarXRPC::Resultset::ColumnMetaData_FieldType >(type_);
}
inline ::PolarXRPC::Resultset::ColumnMetaData_FieldType ColumnMetaData::type() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.type)
  return _internal_type();
}
inline void ColumnMetaData::_internal_set_type(::PolarXRPC::Resultset::ColumnMetaData_FieldType value) {
  assert(::PolarXRPC::Resultset::ColumnMetaData_FieldType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  type_ = value;
}
inline void ColumnMetaData::set_type(::PolarXRPC::Resultset::ColumnMetaData_FieldType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.type)
}

// required .PolarXRPC.Resultset.ColumnMetaData.OriginalType original_type = 2;
inline bool ColumnMetaData::_internal_has_original_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ColumnMetaData::has_original_type() const {
  return _internal_has_original_type();
}
inline void ColumnMetaData::clear_original_type() {
  original_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PolarXRPC::Resultset::ColumnMetaData_OriginalType ColumnMetaData::_internal_original_type() const {
  return static_cast< ::PolarXRPC::Resultset::ColumnMetaData_OriginalType >(original_type_);
}
inline ::PolarXRPC::Resultset::ColumnMetaData_OriginalType ColumnMetaData::original_type() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.original_type)
  return _internal_original_type();
}
inline void ColumnMetaData::_internal_set_original_type(::PolarXRPC::Resultset::ColumnMetaData_OriginalType value) {
  assert(::PolarXRPC::Resultset::ColumnMetaData_OriginalType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  original_type_ = value;
}
inline void ColumnMetaData::set_original_type(::PolarXRPC::Resultset::ColumnMetaData_OriginalType value) {
  _internal_set_original_type(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.original_type)
}

// optional bytes name = 3;
inline bool ColumnMetaData::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColumnMetaData::has_name() const {
  return _internal_has_name();
}
inline void ColumnMetaData::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ColumnMetaData::name() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnMetaData::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.name)
}
inline std::string* ColumnMetaData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.ColumnMetaData.name)
  return _s;
}
inline const std::string& ColumnMetaData::_internal_name() const {
  return name_.Get();
}
inline void ColumnMetaData::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::release_name() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.ColumnMetaData.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColumnMetaData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.ColumnMetaData.name)
}

// optional bytes original_name = 4;
inline bool ColumnMetaData::_internal_has_original_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColumnMetaData::has_original_name() const {
  return _internal_has_original_name();
}
inline void ColumnMetaData::clear_original_name() {
  original_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ColumnMetaData::original_name() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.original_name)
  return _internal_original_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnMetaData::set_original_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 original_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.original_name)
}
inline std::string* ColumnMetaData::mutable_original_name() {
  std::string* _s = _internal_mutable_original_name();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.ColumnMetaData.original_name)
  return _s;
}
inline const std::string& ColumnMetaData::_internal_original_name() const {
  return original_name_.Get();
}
inline void ColumnMetaData::_internal_set_original_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  original_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::_internal_mutable_original_name() {
  _has_bits_[0] |= 0x00000002u;
  return original_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::release_original_name() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.ColumnMetaData.original_name)
  if (!_internal_has_original_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = original_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (original_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    original_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColumnMetaData::set_allocated_original_name(std::string* original_name) {
  if (original_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  original_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (original_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    original_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.ColumnMetaData.original_name)
}

// optional bytes table = 5;
inline bool ColumnMetaData::_internal_has_table() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColumnMetaData::has_table() const {
  return _internal_has_table();
}
inline void ColumnMetaData::clear_table() {
  table_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ColumnMetaData::table() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.table)
  return _internal_table();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnMetaData::set_table(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 table_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.table)
}
inline std::string* ColumnMetaData::mutable_table() {
  std::string* _s = _internal_mutable_table();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.ColumnMetaData.table)
  return _s;
}
inline const std::string& ColumnMetaData::_internal_table() const {
  return table_.Get();
}
inline void ColumnMetaData::_internal_set_table(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::_internal_mutable_table() {
  _has_bits_[0] |= 0x00000004u;
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::release_table() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.ColumnMetaData.table)
  if (!_internal_has_table()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = table_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColumnMetaData::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.ColumnMetaData.table)
}

// optional bytes original_table = 6;
inline bool ColumnMetaData::_internal_has_original_table() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColumnMetaData::has_original_table() const {
  return _internal_has_original_table();
}
inline void ColumnMetaData::clear_original_table() {
  original_table_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ColumnMetaData::original_table() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.original_table)
  return _internal_original_table();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnMetaData::set_original_table(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 original_table_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.original_table)
}
inline std::string* ColumnMetaData::mutable_original_table() {
  std::string* _s = _internal_mutable_original_table();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.ColumnMetaData.original_table)
  return _s;
}
inline const std::string& ColumnMetaData::_internal_original_table() const {
  return original_table_.Get();
}
inline void ColumnMetaData::_internal_set_original_table(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  original_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::_internal_mutable_original_table() {
  _has_bits_[0] |= 0x00000008u;
  return original_table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::release_original_table() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.ColumnMetaData.original_table)
  if (!_internal_has_original_table()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = original_table_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (original_table_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    original_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColumnMetaData::set_allocated_original_table(std::string* original_table) {
  if (original_table != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  original_table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_table,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (original_table_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    original_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.ColumnMetaData.original_table)
}

// optional bytes schema = 7;
inline bool ColumnMetaData::_internal_has_schema() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ColumnMetaData::has_schema() const {
  return _internal_has_schema();
}
inline void ColumnMetaData::clear_schema() {
  schema_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ColumnMetaData::schema() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnMetaData::set_schema(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 schema_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.schema)
}
inline std::string* ColumnMetaData::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.ColumnMetaData.schema)
  return _s;
}
inline const std::string& ColumnMetaData::_internal_schema() const {
  return schema_.Get();
}
inline void ColumnMetaData::_internal_set_schema(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::_internal_mutable_schema() {
  _has_bits_[0] |= 0x00000010u;
  return schema_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::release_schema() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.ColumnMetaData.schema)
  if (!_internal_has_schema()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = schema_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (schema_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColumnMetaData::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  schema_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (schema_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.ColumnMetaData.schema)
}

// optional bytes catalog = 8;
inline bool ColumnMetaData::_internal_has_catalog() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ColumnMetaData::has_catalog() const {
  return _internal_has_catalog();
}
inline void ColumnMetaData::clear_catalog() {
  catalog_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ColumnMetaData::catalog() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.catalog)
  return _internal_catalog();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnMetaData::set_catalog(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 catalog_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.catalog)
}
inline std::string* ColumnMetaData::mutable_catalog() {
  std::string* _s = _internal_mutable_catalog();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.ColumnMetaData.catalog)
  return _s;
}
inline const std::string& ColumnMetaData::_internal_catalog() const {
  return catalog_.Get();
}
inline void ColumnMetaData::_internal_set_catalog(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  catalog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::_internal_mutable_catalog() {
  _has_bits_[0] |= 0x00000020u;
  return catalog_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColumnMetaData::release_catalog() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.ColumnMetaData.catalog)
  if (!_internal_has_catalog()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = catalog_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (catalog_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    catalog_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColumnMetaData::set_allocated_catalog(std::string* catalog) {
  if (catalog != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  catalog_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), catalog,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (catalog_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    catalog_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.ColumnMetaData.catalog)
}

// optional uint64 collation = 9;
inline bool ColumnMetaData::_internal_has_collation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ColumnMetaData::has_collation() const {
  return _internal_has_collation();
}
inline void ColumnMetaData::clear_collation() {
  collation_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t ColumnMetaData::_internal_collation() const {
  return collation_;
}
inline uint64_t ColumnMetaData::collation() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.collation)
  return _internal_collation();
}
inline void ColumnMetaData::_internal_set_collation(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  collation_ = value;
}
inline void ColumnMetaData::set_collation(uint64_t value) {
  _internal_set_collation(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.collation)
}

// optional uint32 fractional_digits = 10;
inline bool ColumnMetaData::_internal_has_fractional_digits() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ColumnMetaData::has_fractional_digits() const {
  return _internal_has_fractional_digits();
}
inline void ColumnMetaData::clear_fractional_digits() {
  fractional_digits_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ColumnMetaData::_internal_fractional_digits() const {
  return fractional_digits_;
}
inline uint32_t ColumnMetaData::fractional_digits() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.fractional_digits)
  return _internal_fractional_digits();
}
inline void ColumnMetaData::_internal_set_fractional_digits(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  fractional_digits_ = value;
}
inline void ColumnMetaData::set_fractional_digits(uint32_t value) {
  _internal_set_fractional_digits(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.fractional_digits)
}

// optional uint32 length = 11;
inline bool ColumnMetaData::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ColumnMetaData::has_length() const {
  return _internal_has_length();
}
inline void ColumnMetaData::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t ColumnMetaData::_internal_length() const {
  return length_;
}
inline uint32_t ColumnMetaData::length() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.length)
  return _internal_length();
}
inline void ColumnMetaData::_internal_set_length(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  length_ = value;
}
inline void ColumnMetaData::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.length)
}

// optional uint32 flags = 12;
inline bool ColumnMetaData::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ColumnMetaData::has_flags() const {
  return _internal_has_flags();
}
inline void ColumnMetaData::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t ColumnMetaData::_internal_flags() const {
  return flags_;
}
inline uint32_t ColumnMetaData::flags() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.flags)
  return _internal_flags();
}
inline void ColumnMetaData::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  flags_ = value;
}
inline void ColumnMetaData::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.flags)
}

// optional uint32 content_type = 13;
inline bool ColumnMetaData::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ColumnMetaData::has_content_type() const {
  return _internal_has_content_type();
}
inline void ColumnMetaData::clear_content_type() {
  content_type_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t ColumnMetaData::_internal_content_type() const {
  return content_type_;
}
inline uint32_t ColumnMetaData::content_type() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.content_type)
  return _internal_content_type();
}
inline void ColumnMetaData::_internal_set_content_type(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  content_type_ = value;
}
inline void ColumnMetaData::set_content_type(uint32_t value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.content_type)
}

// optional uint32 original_flags = 14;
inline bool ColumnMetaData::_internal_has_original_flags() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ColumnMetaData::has_original_flags() const {
  return _internal_has_original_flags();
}
inline void ColumnMetaData::clear_original_flags() {
  original_flags_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t ColumnMetaData::_internal_original_flags() const {
  return original_flags_;
}
inline uint32_t ColumnMetaData::original_flags() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.ColumnMetaData.original_flags)
  return _internal_original_flags();
}
inline void ColumnMetaData::_internal_set_original_flags(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  original_flags_ = value;
}
inline void ColumnMetaData::set_original_flags(uint32_t value) {
  _internal_set_original_flags(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.ColumnMetaData.original_flags)
}

// -------------------------------------------------------------------

// Row

// repeated bytes field = 1;
inline int Row::_internal_field_size() const {
  return field_.size();
}
inline int Row::field_size() const {
  return _internal_field_size();
}
inline void Row::clear_field() {
  field_.Clear();
}
inline std::string* Row::add_field() {
  std::string* _s = _internal_add_field();
  // @@protoc_insertion_point(field_add_mutable:PolarXRPC.Resultset.Row.field)
  return _s;
}
inline const std::string& Row::_internal_field(int index) const {
  return field_.Get(index);
}
inline const std::string& Row::field(int index) const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.Row.field)
  return _internal_field(index);
}
inline std::string* Row::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.Row.field)
  return field_.Mutable(index);
}
inline void Row::set_field(int index, const std::string& value) {
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.Row.field)
}
inline void Row::set_field(int index, std::string&& value) {
  field_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.Row.field)
}
inline void Row::set_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PolarXRPC.Resultset.Row.field)
}
inline void Row::set_field(int index, const void* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PolarXRPC.Resultset.Row.field)
}
inline std::string* Row::_internal_add_field() {
  return field_.Add();
}
inline void Row::add_field(const std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PolarXRPC.Resultset.Row.field)
}
inline void Row::add_field(std::string&& value) {
  field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PolarXRPC.Resultset.Row.field)
}
inline void Row::add_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PolarXRPC.Resultset.Row.field)
}
inline void Row::add_field(const void* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PolarXRPC.Resultset.Row.field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Row::field() const {
  // @@protoc_insertion_point(field_list:PolarXRPC.Resultset.Row.field)
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Row::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:PolarXRPC.Resultset.Row.field)
  return &field_;
}

// -------------------------------------------------------------------

// TokenDone

// optional int32 token_left = 1 [default = 0];
inline bool TokenDone::_internal_has_token_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TokenDone::has_token_left() const {
  return _internal_has_token_left();
}
inline void TokenDone::clear_token_left() {
  token_left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TokenDone::_internal_token_left() const {
  return token_left_;
}
inline int32_t TokenDone::token_left() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.TokenDone.token_left)
  return _internal_token_left();
}
inline void TokenDone::_internal_set_token_left(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  token_left_ = value;
}
inline void TokenDone::set_token_left(int32_t value) {
  _internal_set_token_left(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.TokenDone.token_left)
}

// -------------------------------------------------------------------

// Chunk

// required uint32 row_count = 1;
inline bool Chunk::_internal_has_row_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chunk::has_row_count() const {
  return _internal_has_row_count();
}
inline void Chunk::clear_row_count() {
  row_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Chunk::_internal_row_count() const {
  return row_count_;
}
inline uint32_t Chunk::row_count() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.Chunk.row_count)
  return _internal_row_count();
}
inline void Chunk::_internal_set_row_count(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  row_count_ = value;
}
inline void Chunk::set_row_count(uint32_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.Chunk.row_count)
}

// repeated .PolarXRPC.Resultset.Column columns = 2;
inline int Chunk::_internal_columns_size() const {
  return columns_.size();
}
inline int Chunk::columns_size() const {
  return _internal_columns_size();
}
inline void Chunk::clear_columns() {
  columns_.Clear();
}
inline ::PolarXRPC::Resultset::Column* Chunk::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.Chunk.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Resultset::Column >*
Chunk::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:PolarXRPC.Resultset.Chunk.columns)
  return &columns_;
}
inline const ::PolarXRPC::Resultset::Column& Chunk::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::PolarXRPC::Resultset::Column& Chunk::columns(int index) const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.Chunk.columns)
  return _internal_columns(index);
}
inline ::PolarXRPC::Resultset::Column* Chunk::_internal_add_columns() {
  return columns_.Add();
}
inline ::PolarXRPC::Resultset::Column* Chunk::add_columns() {
  ::PolarXRPC::Resultset::Column* _add = _internal_add_columns();
  // @@protoc_insertion_point(field_add:PolarXRPC.Resultset.Chunk.columns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PolarXRPC::Resultset::Column >&
Chunk::columns() const {
  // @@protoc_insertion_point(field_list:PolarXRPC.Resultset.Chunk.columns)
  return columns_;
}

// -------------------------------------------------------------------

// Column

// optional bytes null_bitmap = 1;
inline bool Column::_internal_has_null_bitmap() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Column::has_null_bitmap() const {
  return _internal_has_null_bitmap();
}
inline void Column::clear_null_bitmap() {
  null_bitmap_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Column::null_bitmap() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.Column.null_bitmap)
  return _internal_null_bitmap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_null_bitmap(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 null_bitmap_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.Column.null_bitmap)
}
inline std::string* Column::mutable_null_bitmap() {
  std::string* _s = _internal_mutable_null_bitmap();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.Column.null_bitmap)
  return _s;
}
inline const std::string& Column::_internal_null_bitmap() const {
  return null_bitmap_.Get();
}
inline void Column::_internal_set_null_bitmap(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  null_bitmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_null_bitmap() {
  _has_bits_[0] |= 0x00000001u;
  return null_bitmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Column::release_null_bitmap() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.Column.null_bitmap)
  if (!_internal_has_null_bitmap()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = null_bitmap_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (null_bitmap_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    null_bitmap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Column::set_allocated_null_bitmap(std::string* null_bitmap) {
  if (null_bitmap != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  null_bitmap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), null_bitmap,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (null_bitmap_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    null_bitmap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.Column.null_bitmap)
}

// optional .PolarXRPC.Resultset.FixedSizeColumn fixed_size_column = 2;
inline bool Column::_internal_has_fixed_size_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || fixed_size_column_ != nullptr);
  return value;
}
inline bool Column::has_fixed_size_column() const {
  return _internal_has_fixed_size_column();
}
inline void Column::clear_fixed_size_column() {
  if (fixed_size_column_ != nullptr) fixed_size_column_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::PolarXRPC::Resultset::FixedSizeColumn& Column::_internal_fixed_size_column() const {
  const ::PolarXRPC::Resultset::FixedSizeColumn* p = fixed_size_column_;
  return p != nullptr ? *p : reinterpret_cast<const ::PolarXRPC::Resultset::FixedSizeColumn&>(
      ::PolarXRPC::Resultset::_FixedSizeColumn_default_instance_);
}
inline const ::PolarXRPC::Resultset::FixedSizeColumn& Column::fixed_size_column() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.Column.fixed_size_column)
  return _internal_fixed_size_column();
}
inline void Column::unsafe_arena_set_allocated_fixed_size_column(
    ::PolarXRPC::Resultset::FixedSizeColumn* fixed_size_column) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_size_column_);
  }
  fixed_size_column_ = fixed_size_column;
  if (fixed_size_column) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PolarXRPC.Resultset.Column.fixed_size_column)
}
inline ::PolarXRPC::Resultset::FixedSizeColumn* Column::release_fixed_size_column() {
  _has_bits_[0] &= ~0x00000002u;
  ::PolarXRPC::Resultset::FixedSizeColumn* temp = fixed_size_column_;
  fixed_size_column_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PolarXRPC::Resultset::FixedSizeColumn* Column::unsafe_arena_release_fixed_size_column() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.Column.fixed_size_column)
  _has_bits_[0] &= ~0x00000002u;
  ::PolarXRPC::Resultset::FixedSizeColumn* temp = fixed_size_column_;
  fixed_size_column_ = nullptr;
  return temp;
}
inline ::PolarXRPC::Resultset::FixedSizeColumn* Column::_internal_mutable_fixed_size_column() {
  _has_bits_[0] |= 0x00000002u;
  if (fixed_size_column_ == nullptr) {
    auto* p = CreateMaybeMessage<::PolarXRPC::Resultset::FixedSizeColumn>(GetArenaForAllocation());
    fixed_size_column_ = p;
  }
  return fixed_size_column_;
}
inline ::PolarXRPC::Resultset::FixedSizeColumn* Column::mutable_fixed_size_column() {
  ::PolarXRPC::Resultset::FixedSizeColumn* _msg = _internal_mutable_fixed_size_column();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.Column.fixed_size_column)
  return _msg;
}
inline void Column::set_allocated_fixed_size_column(::PolarXRPC::Resultset::FixedSizeColumn* fixed_size_column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fixed_size_column_;
  }
  if (fixed_size_column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PolarXRPC::Resultset::FixedSizeColumn>::GetOwningArena(fixed_size_column);
    if (message_arena != submessage_arena) {
      fixed_size_column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_size_column, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fixed_size_column_ = fixed_size_column;
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.Column.fixed_size_column)
}

// optional .PolarXRPC.Resultset.VariableSizeColumn variable_size_column = 3;
inline bool Column::_internal_has_variable_size_column() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || variable_size_column_ != nullptr);
  return value;
}
inline bool Column::has_variable_size_column() const {
  return _internal_has_variable_size_column();
}
inline void Column::clear_variable_size_column() {
  if (variable_size_column_ != nullptr) variable_size_column_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::PolarXRPC::Resultset::VariableSizeColumn& Column::_internal_variable_size_column() const {
  const ::PolarXRPC::Resultset::VariableSizeColumn* p = variable_size_column_;
  return p != nullptr ? *p : reinterpret_cast<const ::PolarXRPC::Resultset::VariableSizeColumn&>(
      ::PolarXRPC::Resultset::_VariableSizeColumn_default_instance_);
}
inline const ::PolarXRPC::Resultset::VariableSizeColumn& Column::variable_size_column() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.Column.variable_size_column)
  return _internal_variable_size_column();
}
inline void Column::unsafe_arena_set_allocated_variable_size_column(
    ::PolarXRPC::Resultset::VariableSizeColumn* variable_size_column) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variable_size_column_);
  }
  variable_size_column_ = variable_size_column;
  if (variable_size_column) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PolarXRPC.Resultset.Column.variable_size_column)
}
inline ::PolarXRPC::Resultset::VariableSizeColumn* Column::release_variable_size_column() {
  _has_bits_[0] &= ~0x00000004u;
  ::PolarXRPC::Resultset::VariableSizeColumn* temp = variable_size_column_;
  variable_size_column_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PolarXRPC::Resultset::VariableSizeColumn* Column::unsafe_arena_release_variable_size_column() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.Column.variable_size_column)
  _has_bits_[0] &= ~0x00000004u;
  ::PolarXRPC::Resultset::VariableSizeColumn* temp = variable_size_column_;
  variable_size_column_ = nullptr;
  return temp;
}
inline ::PolarXRPC::Resultset::VariableSizeColumn* Column::_internal_mutable_variable_size_column() {
  _has_bits_[0] |= 0x00000004u;
  if (variable_size_column_ == nullptr) {
    auto* p = CreateMaybeMessage<::PolarXRPC::Resultset::VariableSizeColumn>(GetArenaForAllocation());
    variable_size_column_ = p;
  }
  return variable_size_column_;
}
inline ::PolarXRPC::Resultset::VariableSizeColumn* Column::mutable_variable_size_column() {
  ::PolarXRPC::Resultset::VariableSizeColumn* _msg = _internal_mutable_variable_size_column();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.Column.variable_size_column)
  return _msg;
}
inline void Column::set_allocated_variable_size_column(::PolarXRPC::Resultset::VariableSizeColumn* variable_size_column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete variable_size_column_;
  }
  if (variable_size_column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PolarXRPC::Resultset::VariableSizeColumn>::GetOwningArena(variable_size_column);
    if (message_arena != submessage_arena) {
      variable_size_column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_size_column, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  variable_size_column_ = variable_size_column;
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.Column.variable_size_column)
}

// -------------------------------------------------------------------

// FixedSizeColumn

// required bytes value = 1;
inline bool FixedSizeColumn::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FixedSizeColumn::has_value() const {
  return _internal_has_value();
}
inline void FixedSizeColumn::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FixedSizeColumn::value() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.FixedSizeColumn.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FixedSizeColumn::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.FixedSizeColumn.value)
}
inline std::string* FixedSizeColumn::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.FixedSizeColumn.value)
  return _s;
}
inline const std::string& FixedSizeColumn::_internal_value() const {
  return value_.Get();
}
inline void FixedSizeColumn::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FixedSizeColumn::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FixedSizeColumn::release_value() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.FixedSizeColumn.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FixedSizeColumn::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.FixedSizeColumn.value)
}

// -------------------------------------------------------------------

// VariableSizeColumn

// required bytes value = 1;
inline bool VariableSizeColumn::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VariableSizeColumn::has_value() const {
  return _internal_has_value();
}
inline void VariableSizeColumn::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VariableSizeColumn::value() const {
  // @@protoc_insertion_point(field_get:PolarXRPC.Resultset.VariableSizeColumn.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableSizeColumn::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PolarXRPC.Resultset.VariableSizeColumn.value)
}
inline std::string* VariableSizeColumn::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PolarXRPC.Resultset.VariableSizeColumn.value)
  return _s;
}
inline const std::string& VariableSizeColumn::_internal_value() const {
  return value_.Get();
}
inline void VariableSizeColumn::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableSizeColumn::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableSizeColumn::release_value() {
  // @@protoc_insertion_point(field_release:PolarXRPC.Resultset.VariableSizeColumn.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VariableSizeColumn::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PolarXRPC.Resultset.VariableSizeColumn.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Resultset
}  // namespace PolarXRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PolarXRPC::Resultset::ColumnMetaData_FieldType> : ::std::true_type {};
template <> struct is_proto_enum< ::PolarXRPC::Resultset::ColumnMetaData_OriginalType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_polarx_5fresultset_2eproto
