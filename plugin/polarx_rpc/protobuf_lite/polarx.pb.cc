// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx.proto

#include "polarx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
constexpr ClientMessages::ClientMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClientMessagesDefaultTypeInternal {
  constexpr ClientMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientMessagesDefaultTypeInternal() {}
  union {
    ClientMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientMessagesDefaultTypeInternal _ClientMessages_default_instance_;
constexpr ServerMessages::ServerMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerMessagesDefaultTypeInternal {
  constexpr ServerMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerMessagesDefaultTypeInternal() {}
  union {
    ServerMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerMessagesDefaultTypeInternal _ServerMessages_default_instance_;
constexpr Ok::Ok(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OkDefaultTypeInternal {
  constexpr OkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OkDefaultTypeInternal() {}
  union {
    Ok _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OkDefaultTypeInternal _Ok_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sql_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , severity_(0)

  , code_(0u){}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
}  // namespace PolarXRPC
namespace PolarXRPC {
bool ClientMessages_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 12:
    case 17:
    case 18:
    case 19:
    case 20:
    case 24:
    case 25:
    case 100:
    case 101:
    case 110:
    case 111:
    case 112:
    case 113:
    case 115:
    case 116:
    case 117:
    case 118:
    case 127:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientMessages_Type_strings[25] = {};

static const char ClientMessages_Type_names[] =
  "AUTO_SP"
  "CON_CAPABILITIES_GET"
  "CON_CAPABILITIES_SET"
  "CON_CLOSE"
  "CRUD_DELETE"
  "CRUD_FIND"
  "CRUD_INSERT"
  "CRUD_UPDATE"
  "EXEC_PLAN_READ"
  "EXEC_SQL"
  "EXPECT_CLOSE"
  "EXPECT_OPEN"
  "FILE_OPERATION_FILE_MANAGE"
  "FILE_OPERATION_GET_FILE_INFO"
  "FILE_OPERATION_TRANSFER_FILE_DATA"
  "GET_TSO"
  "MSG_MAX"
  "SESS_AUTHENTICATE_CONTINUE"
  "SESS_AUTHENTICATE_START"
  "SESS_CLOSE"
  "SESS_KILL"
  "SESS_NEW"
  "SESS_RESET"
  "SQL_STMT_EXECUTE"
  "TOKEN_OFFER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientMessages_Type_entries[] = {
  { {ClientMessages_Type_names + 0, 7}, 115 },
  { {ClientMessages_Type_names + 7, 20}, 1 },
  { {ClientMessages_Type_names + 27, 20}, 2 },
  { {ClientMessages_Type_names + 47, 9}, 3 },
  { {ClientMessages_Type_names + 56, 11}, 20 },
  { {ClientMessages_Type_names + 67, 9}, 17 },
  { {ClientMessages_Type_names + 76, 11}, 18 },
  { {ClientMessages_Type_names + 87, 11}, 19 },
  { {ClientMessages_Type_names + 98, 14}, 100 },
  { {ClientMessages_Type_names + 112, 8}, 101 },
  { {ClientMessages_Type_names + 120, 12}, 25 },
  { {ClientMessages_Type_names + 132, 11}, 24 },
  { {ClientMessages_Type_names + 143, 26}, 118 },
  { {ClientMessages_Type_names + 169, 28}, 116 },
  { {ClientMessages_Type_names + 197, 33}, 117 },
  { {ClientMessages_Type_names + 230, 7}, 113 },
  { {ClientMessages_Type_names + 237, 7}, 127 },
  { {ClientMessages_Type_names + 244, 26}, 5 },
  { {ClientMessages_Type_names + 270, 23}, 4 },
  { {ClientMessages_Type_names + 293, 10}, 7 },
  { {ClientMessages_Type_names + 303, 9}, 111 },
  { {ClientMessages_Type_names + 312, 8}, 110 },
  { {ClientMessages_Type_names + 320, 10}, 6 },
  { {ClientMessages_Type_names + 330, 16}, 12 },
  { {ClientMessages_Type_names + 346, 11}, 112 },
};

static const int ClientMessages_Type_entries_by_number[] = {
  1, // 1 -> CON_CAPABILITIES_GET
  2, // 2 -> CON_CAPABILITIES_SET
  3, // 3 -> CON_CLOSE
  18, // 4 -> SESS_AUTHENTICATE_START
  17, // 5 -> SESS_AUTHENTICATE_CONTINUE
  22, // 6 -> SESS_RESET
  19, // 7 -> SESS_CLOSE
  23, // 12 -> SQL_STMT_EXECUTE
  5, // 17 -> CRUD_FIND
  6, // 18 -> CRUD_INSERT
  7, // 19 -> CRUD_UPDATE
  4, // 20 -> CRUD_DELETE
  11, // 24 -> EXPECT_OPEN
  10, // 25 -> EXPECT_CLOSE
  8, // 100 -> EXEC_PLAN_READ
  9, // 101 -> EXEC_SQL
  21, // 110 -> SESS_NEW
  20, // 111 -> SESS_KILL
  24, // 112 -> TOKEN_OFFER
  15, // 113 -> GET_TSO
  0, // 115 -> AUTO_SP
  13, // 116 -> FILE_OPERATION_GET_FILE_INFO
  14, // 117 -> FILE_OPERATION_TRANSFER_FILE_DATA
  12, // 118 -> FILE_OPERATION_FILE_MANAGE
  16, // 127 -> MSG_MAX
};

const std::string& ClientMessages_Type_Name(
    ClientMessages_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientMessages_Type_entries,
          ClientMessages_Type_entries_by_number,
          25, ClientMessages_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientMessages_Type_entries,
      ClientMessages_Type_entries_by_number,
      25, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientMessages_Type_strings[idx].get();
}
bool ClientMessages_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientMessages_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientMessages_Type_entries, 25, name, &int_value);
  if (success) {
    *value = static_cast<ClientMessages_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientMessages_Type ClientMessages::CON_CAPABILITIES_GET;
constexpr ClientMessages_Type ClientMessages::CON_CAPABILITIES_SET;
constexpr ClientMessages_Type ClientMessages::CON_CLOSE;
constexpr ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_START;
constexpr ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_CONTINUE;
constexpr ClientMessages_Type ClientMessages::SESS_RESET;
constexpr ClientMessages_Type ClientMessages::SESS_CLOSE;
constexpr ClientMessages_Type ClientMessages::SQL_STMT_EXECUTE;
constexpr ClientMessages_Type ClientMessages::CRUD_FIND;
constexpr ClientMessages_Type ClientMessages::CRUD_INSERT;
constexpr ClientMessages_Type ClientMessages::CRUD_UPDATE;
constexpr ClientMessages_Type ClientMessages::CRUD_DELETE;
constexpr ClientMessages_Type ClientMessages::EXPECT_OPEN;
constexpr ClientMessages_Type ClientMessages::EXPECT_CLOSE;
constexpr ClientMessages_Type ClientMessages::EXEC_PLAN_READ;
constexpr ClientMessages_Type ClientMessages::EXEC_SQL;
constexpr ClientMessages_Type ClientMessages::SESS_NEW;
constexpr ClientMessages_Type ClientMessages::SESS_KILL;
constexpr ClientMessages_Type ClientMessages::TOKEN_OFFER;
constexpr ClientMessages_Type ClientMessages::GET_TSO;
constexpr ClientMessages_Type ClientMessages::AUTO_SP;
constexpr ClientMessages_Type ClientMessages::FILE_OPERATION_GET_FILE_INFO;
constexpr ClientMessages_Type ClientMessages::FILE_OPERATION_TRANSFER_FILE_DATA;
constexpr ClientMessages_Type ClientMessages::FILE_OPERATION_FILE_MANAGE;
constexpr ClientMessages_Type ClientMessages::MSG_MAX;
constexpr ClientMessages_Type ClientMessages::Type_MIN;
constexpr ClientMessages_Type ClientMessages::Type_MAX;
constexpr int ClientMessages::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ServerMessages_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServerMessages_Type_strings[19] = {};

static const char ServerMessages_Type_names[] =
  "CONN_CAPABILITIES"
  "ERROR"
  "NOTICE"
  "OK"
  "RESULTSET_CHUNK"
  "RESULTSET_COLUMN_META_DATA"
  "RESULTSET_FETCH_DONE"
  "RESULTSET_FETCH_DONE_MORE_OUT_PARAMS"
  "RESULTSET_FETCH_DONE_MORE_RESULTSETS"
  "RESULTSET_FETCH_SUSPENDED"
  "RESULTSET_FILE_MANAGE_OK"
  "RESULTSET_GET_FILE_INFO_OK"
  "RESULTSET_ROW"
  "RESULTSET_TOKEN_DONE"
  "RESULTSET_TRANSFER_FILE_DATA_OK"
  "RESULTSET_TSO"
  "SESS_AUTHENTICATE_CONTINUE"
  "SESS_AUTHENTICATE_OK"
  "SQL_STMT_EXECUTE_OK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServerMessages_Type_entries[] = {
  { {ServerMessages_Type_names + 0, 17}, 2 },
  { {ServerMessages_Type_names + 17, 5}, 1 },
  { {ServerMessages_Type_names + 22, 6}, 11 },
  { {ServerMessages_Type_names + 28, 2}, 0 },
  { {ServerMessages_Type_names + 30, 15}, 21 },
  { {ServerMessages_Type_names + 45, 26}, 12 },
  { {ServerMessages_Type_names + 71, 20}, 14 },
  { {ServerMessages_Type_names + 91, 36}, 18 },
  { {ServerMessages_Type_names + 127, 36}, 16 },
  { {ServerMessages_Type_names + 163, 25}, 15 },
  { {ServerMessages_Type_names + 188, 24}, 24 },
  { {ServerMessages_Type_names + 212, 26}, 22 },
  { {ServerMessages_Type_names + 238, 13}, 13 },
  { {ServerMessages_Type_names + 251, 20}, 19 },
  { {ServerMessages_Type_names + 271, 31}, 23 },
  { {ServerMessages_Type_names + 302, 13}, 20 },
  { {ServerMessages_Type_names + 315, 26}, 3 },
  { {ServerMessages_Type_names + 341, 20}, 4 },
  { {ServerMessages_Type_names + 361, 19}, 17 },
};

static const int ServerMessages_Type_entries_by_number[] = {
  3, // 0 -> OK
  1, // 1 -> ERROR
  0, // 2 -> CONN_CAPABILITIES
  16, // 3 -> SESS_AUTHENTICATE_CONTINUE
  17, // 4 -> SESS_AUTHENTICATE_OK
  2, // 11 -> NOTICE
  5, // 12 -> RESULTSET_COLUMN_META_DATA
  12, // 13 -> RESULTSET_ROW
  6, // 14 -> RESULTSET_FETCH_DONE
  9, // 15 -> RESULTSET_FETCH_SUSPENDED
  8, // 16 -> RESULTSET_FETCH_DONE_MORE_RESULTSETS
  18, // 17 -> SQL_STMT_EXECUTE_OK
  7, // 18 -> RESULTSET_FETCH_DONE_MORE_OUT_PARAMS
  13, // 19 -> RESULTSET_TOKEN_DONE
  15, // 20 -> RESULTSET_TSO
  4, // 21 -> RESULTSET_CHUNK
  11, // 22 -> RESULTSET_GET_FILE_INFO_OK
  14, // 23 -> RESULTSET_TRANSFER_FILE_DATA_OK
  10, // 24 -> RESULTSET_FILE_MANAGE_OK
};

const std::string& ServerMessages_Type_Name(
    ServerMessages_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServerMessages_Type_entries,
          ServerMessages_Type_entries_by_number,
          19, ServerMessages_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServerMessages_Type_entries,
      ServerMessages_Type_entries_by_number,
      19, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServerMessages_Type_strings[idx].get();
}
bool ServerMessages_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerMessages_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServerMessages_Type_entries, 19, name, &int_value);
  if (success) {
    *value = static_cast<ServerMessages_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerMessages_Type ServerMessages::OK;
constexpr ServerMessages_Type ServerMessages::ERROR;
constexpr ServerMessages_Type ServerMessages::CONN_CAPABILITIES;
constexpr ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_CONTINUE;
constexpr ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_OK;
constexpr ServerMessages_Type ServerMessages::NOTICE;
constexpr ServerMessages_Type ServerMessages::RESULTSET_COLUMN_META_DATA;
constexpr ServerMessages_Type ServerMessages::RESULTSET_ROW;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_SUSPENDED;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_RESULTSETS;
constexpr ServerMessages_Type ServerMessages::SQL_STMT_EXECUTE_OK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
constexpr ServerMessages_Type ServerMessages::RESULTSET_TOKEN_DONE;
constexpr ServerMessages_Type ServerMessages::RESULTSET_TSO;
constexpr ServerMessages_Type ServerMessages::RESULTSET_CHUNK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_GET_FILE_INFO_OK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_TRANSFER_FILE_DATA_OK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FILE_MANAGE_OK;
constexpr ServerMessages_Type ServerMessages::Type_MIN;
constexpr ServerMessages_Type ServerMessages::Type_MAX;
constexpr int ServerMessages::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Error_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Error_Severity_strings[2] = {};

static const char Error_Severity_names[] =
  "ERROR"
  "FATAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Error_Severity_entries[] = {
  { {Error_Severity_names + 0, 5}, 0 },
  { {Error_Severity_names + 5, 5}, 1 },
};

static const int Error_Severity_entries_by_number[] = {
  0, // 0 -> ERROR
  1, // 1 -> FATAL
};

const std::string& Error_Severity_Name(
    Error_Severity value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Error_Severity_entries,
          Error_Severity_entries_by_number,
          2, Error_Severity_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Error_Severity_entries,
      Error_Severity_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Error_Severity_strings[idx].get();
}
bool Error_Severity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Severity* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Error_Severity_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Error_Severity>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Error_Severity Error::ERROR;
constexpr Error_Severity Error::FATAL;
constexpr Error_Severity Error::Severity_MIN;
constexpr Error_Severity Error::Severity_MAX;
constexpr int Error::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ClientMessages::_Internal {
 public:
};

ClientMessages::ClientMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.ClientMessages)
}
ClientMessages::ClientMessages(const ClientMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.ClientMessages)
}

inline void ClientMessages::SharedCtor() {
}

ClientMessages::~ClientMessages() {
  // @@protoc_insertion_point(destructor:PolarXRPC.ClientMessages)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void ClientMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientMessages::ArenaDtor(void* object) {
  ClientMessages* _this = reinterpret_cast< ClientMessages* >(object);
  (void)_this;
}
void ClientMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.ClientMessages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClientMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientMessages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.ClientMessages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.ClientMessages)
  return target;
}

size_t ClientMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.ClientMessages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessages::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientMessages*>(
      &from));
}

void ClientMessages::MergeFrom(const ClientMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.ClientMessages)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientMessages::CopyFrom(const ClientMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.ClientMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessages::IsInitialized() const {
  return true;
}

void ClientMessages::InternalSwap(ClientMessages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string ClientMessages::GetTypeName() const {
  return "PolarXRPC.ClientMessages";
}


// ===================================================================

class ServerMessages::_Internal {
 public:
};

ServerMessages::ServerMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.ServerMessages)
}
ServerMessages::ServerMessages(const ServerMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.ServerMessages)
}

inline void ServerMessages::SharedCtor() {
}

ServerMessages::~ServerMessages() {
  // @@protoc_insertion_point(destructor:PolarXRPC.ServerMessages)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void ServerMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMessages::ArenaDtor(void* object) {
  ServerMessages* _this = reinterpret_cast< ServerMessages* >(object);
  (void)_this;
}
void ServerMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.ServerMessages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ServerMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMessages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.ServerMessages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.ServerMessages)
  return target;
}

size_t ServerMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.ServerMessages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessages::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerMessages*>(
      &from));
}

void ServerMessages::MergeFrom(const ServerMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.ServerMessages)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerMessages::CopyFrom(const ServerMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.ServerMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessages::IsInitialized() const {
  return true;
}

void ServerMessages::InternalSwap(ServerMessages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string ServerMessages::GetTypeName() const {
  return "PolarXRPC.ServerMessages";
}


// ===================================================================

class Ok::_Internal {
 public:
  using HasBits = decltype(std::declval<Ok>()._has_bits_);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Ok::Ok(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Ok)
}
Ok::Ok(const Ok& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Ok)
}

inline void Ok::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ok::~Ok() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Ok)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Ok::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ok::ArenaDtor(void* object) {
  Ok* _this = reinterpret_cast< Ok* >(object);
  (void)_this;
}
void Ok::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ok::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ok::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Ok)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ok::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ok::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Ok)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Ok)
  return target;
}

size_t Ok::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Ok)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ok::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Ok*>(
      &from));
}

void Ok::MergeFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Ok)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ok::CopyFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Ok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ok::IsInitialized() const {
  return true;
}

void Ok::InternalSwap(Ok* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

std::string Ok::GetTypeName() const {
  return "PolarXRPC.Ok";
}


// ===================================================================

class Error::_Internal {
 public:
  using HasBits = decltype(std::declval<Error>()._has_bits_);
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sql_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  sql_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sql_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql_state()) {
    sql_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sql_state(), 
      GetArenaForAllocation());
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Error)
}

inline void Error::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sql_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sql_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&severity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(code_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sql_state_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&severity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&severity_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PolarXRPC.Error.Severity severity = 1 [default = ERROR];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Error_Severity_IsValid(val))) {
            _internal_set_severity(static_cast<::PolarXRPC::Error_Severity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string sql_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sql_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PolarXRPC.Error.Severity severity = 1 [default = ERROR];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_severity(), target);
  }

  // required uint32 code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // required string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // required string sql_state = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sql_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Error)
  return target;
}

size_t Error::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.Error)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_sql_state()) {
    // required string sql_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_state());
  }

  if (_internal_has_code()) {
    // required uint32 code = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return total_size;
}
size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Error)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required string sql_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_state());

    // required uint32 code = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PolarXRPC.Error.Severity severity = 1 [default = ERROR];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Error*>(
      &from));
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sql_state(from._internal_sql_state());
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sql_state_, lhs_arena,
      &other->sql_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error, code_)
      + sizeof(Error::code_)
      - PROTOBUF_FIELD_OFFSET(Error, severity_)>(
          reinterpret_cast<char*>(&severity_),
          reinterpret_cast<char*>(&other->severity_));
}

std::string Error::GetTypeName() const {
  return "PolarXRPC.Error";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::ClientMessages* Arena::CreateMaybeMessage< ::PolarXRPC::ClientMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::ClientMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::ServerMessages* Arena::CreateMaybeMessage< ::PolarXRPC::ServerMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::ServerMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Ok* Arena::CreateMaybeMessage< ::PolarXRPC::Ok >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Ok >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Error* Arena::CreateMaybeMessage< ::PolarXRPC::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Error >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
