// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polarx_notice.proto

#include "polarx_notice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PolarXRPC {
namespace Notice {
constexpr Frame::Frame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u)
  , scope_(1)
{}
struct FrameDefaultTypeInternal {
  constexpr FrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameDefaultTypeInternal _Frame_default_instance_;
constexpr Warning::Warning(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0u)
  , level_(2)
{}
struct WarningDefaultTypeInternal {
  constexpr WarningDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WarningDefaultTypeInternal() {}
  union {
    Warning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WarningDefaultTypeInternal _Warning_default_instance_;
constexpr SessionVariableChanged::SessionVariableChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct SessionVariableChangedDefaultTypeInternal {
  constexpr SessionVariableChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionVariableChangedDefaultTypeInternal() {}
  union {
    SessionVariableChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionVariableChangedDefaultTypeInternal _SessionVariableChanged_default_instance_;
constexpr SessionStateChanged::SessionStateChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr)
  , param_(1)
{}
struct SessionStateChangedDefaultTypeInternal {
  constexpr SessionStateChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionStateChangedDefaultTypeInternal() {}
  union {
    SessionStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionStateChangedDefaultTypeInternal _SessionStateChanged_default_instance_;
}  // namespace Notice
}  // namespace PolarXRPC
namespace PolarXRPC {
namespace Notice {
bool Frame_Scope_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Frame_Scope_strings[2] = {};

static const char Frame_Scope_names[] =
  "GLOBAL"
  "LOCAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Frame_Scope_entries[] = {
  { {Frame_Scope_names + 0, 6}, 1 },
  { {Frame_Scope_names + 6, 5}, 2 },
};

static const int Frame_Scope_entries_by_number[] = {
  0, // 1 -> GLOBAL
  1, // 2 -> LOCAL
};

const std::string& Frame_Scope_Name(
    Frame_Scope value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Frame_Scope_entries,
          Frame_Scope_entries_by_number,
          2, Frame_Scope_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Frame_Scope_entries,
      Frame_Scope_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Frame_Scope_strings[idx].get();
}
bool Frame_Scope_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Frame_Scope* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Frame_Scope_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Frame_Scope>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Frame_Scope Frame::GLOBAL;
constexpr Frame_Scope Frame::LOCAL;
constexpr Frame_Scope Frame::Scope_MIN;
constexpr Frame_Scope Frame::Scope_MAX;
constexpr int Frame::Scope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Frame_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Frame_Type_strings[5] = {};

static const char Frame_Type_names[] =
  "GROUP_REPLICATION_STATE_CHANGED"
  "SERVER_HELLO"
  "SESSION_STATE_CHANGED"
  "SESSION_VARIABLE_CHANGED"
  "WARNING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Frame_Type_entries[] = {
  { {Frame_Type_names + 0, 31}, 4 },
  { {Frame_Type_names + 31, 12}, 5 },
  { {Frame_Type_names + 43, 21}, 3 },
  { {Frame_Type_names + 64, 24}, 2 },
  { {Frame_Type_names + 88, 7}, 1 },
};

static const int Frame_Type_entries_by_number[] = {
  4, // 1 -> WARNING
  3, // 2 -> SESSION_VARIABLE_CHANGED
  2, // 3 -> SESSION_STATE_CHANGED
  0, // 4 -> GROUP_REPLICATION_STATE_CHANGED
  1, // 5 -> SERVER_HELLO
};

const std::string& Frame_Type_Name(
    Frame_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Frame_Type_entries,
          Frame_Type_entries_by_number,
          5, Frame_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Frame_Type_entries,
      Frame_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Frame_Type_strings[idx].get();
}
bool Frame_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Frame_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Frame_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Frame_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Frame_Type Frame::WARNING;
constexpr Frame_Type Frame::SESSION_VARIABLE_CHANGED;
constexpr Frame_Type Frame::SESSION_STATE_CHANGED;
constexpr Frame_Type Frame::GROUP_REPLICATION_STATE_CHANGED;
constexpr Frame_Type Frame::SERVER_HELLO;
constexpr Frame_Type Frame::Type_MIN;
constexpr Frame_Type Frame::Type_MAX;
constexpr int Frame::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Warning_Level_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Warning_Level_strings[3] = {};

static const char Warning_Level_names[] =
  "ERROR"
  "NOTE"
  "WARNING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Warning_Level_entries[] = {
  { {Warning_Level_names + 0, 5}, 3 },
  { {Warning_Level_names + 5, 4}, 1 },
  { {Warning_Level_names + 9, 7}, 2 },
};

static const int Warning_Level_entries_by_number[] = {
  1, // 1 -> NOTE
  2, // 2 -> WARNING
  0, // 3 -> ERROR
};

const std::string& Warning_Level_Name(
    Warning_Level value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Warning_Level_entries,
          Warning_Level_entries_by_number,
          3, Warning_Level_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Warning_Level_entries,
      Warning_Level_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Warning_Level_strings[idx].get();
}
bool Warning_Level_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Warning_Level* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Warning_Level_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Warning_Level>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Warning_Level Warning::NOTE;
constexpr Warning_Level Warning::WARNING;
constexpr Warning_Level Warning::ERROR;
constexpr Warning_Level Warning::Level_MIN;
constexpr Warning_Level Warning::Level_MAX;
constexpr int Warning::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SessionStateChanged_Parameter_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SessionStateChanged_Parameter_strings[10] = {};

static const char SessionStateChanged_Parameter_names[] =
  "ACCOUNT_EXPIRED"
  "CLIENT_ID_ASSIGNED"
  "CURRENT_SCHEMA"
  "GENERATED_INSERT_ID"
  "PRODUCED_MESSAGE"
  "ROWS_AFFECTED"
  "ROWS_FOUND"
  "ROWS_MATCHED"
  "TRX_COMMITTED"
  "TRX_ROLLEDBACK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SessionStateChanged_Parameter_entries[] = {
  { {SessionStateChanged_Parameter_names + 0, 15}, 2 },
  { {SessionStateChanged_Parameter_names + 15, 18}, 11 },
  { {SessionStateChanged_Parameter_names + 33, 14}, 1 },
  { {SessionStateChanged_Parameter_names + 47, 19}, 3 },
  { {SessionStateChanged_Parameter_names + 66, 16}, 10 },
  { {SessionStateChanged_Parameter_names + 82, 13}, 4 },
  { {SessionStateChanged_Parameter_names + 95, 10}, 5 },
  { {SessionStateChanged_Parameter_names + 105, 12}, 6 },
  { {SessionStateChanged_Parameter_names + 117, 13}, 7 },
  { {SessionStateChanged_Parameter_names + 130, 14}, 9 },
};

static const int SessionStateChanged_Parameter_entries_by_number[] = {
  2, // 1 -> CURRENT_SCHEMA
  0, // 2 -> ACCOUNT_EXPIRED
  3, // 3 -> GENERATED_INSERT_ID
  5, // 4 -> ROWS_AFFECTED
  6, // 5 -> ROWS_FOUND
  7, // 6 -> ROWS_MATCHED
  8, // 7 -> TRX_COMMITTED
  9, // 9 -> TRX_ROLLEDBACK
  4, // 10 -> PRODUCED_MESSAGE
  1, // 11 -> CLIENT_ID_ASSIGNED
};

const std::string& SessionStateChanged_Parameter_Name(
    SessionStateChanged_Parameter value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SessionStateChanged_Parameter_entries,
          SessionStateChanged_Parameter_entries_by_number,
          10, SessionStateChanged_Parameter_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SessionStateChanged_Parameter_entries,
      SessionStateChanged_Parameter_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SessionStateChanged_Parameter_strings[idx].get();
}
bool SessionStateChanged_Parameter_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionStateChanged_Parameter* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SessionStateChanged_Parameter_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<SessionStateChanged_Parameter>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SessionStateChanged_Parameter SessionStateChanged::CURRENT_SCHEMA;
constexpr SessionStateChanged_Parameter SessionStateChanged::ACCOUNT_EXPIRED;
constexpr SessionStateChanged_Parameter SessionStateChanged::GENERATED_INSERT_ID;
constexpr SessionStateChanged_Parameter SessionStateChanged::ROWS_AFFECTED;
constexpr SessionStateChanged_Parameter SessionStateChanged::ROWS_FOUND;
constexpr SessionStateChanged_Parameter SessionStateChanged::ROWS_MATCHED;
constexpr SessionStateChanged_Parameter SessionStateChanged::TRX_COMMITTED;
constexpr SessionStateChanged_Parameter SessionStateChanged::TRX_ROLLEDBACK;
constexpr SessionStateChanged_Parameter SessionStateChanged::PRODUCED_MESSAGE;
constexpr SessionStateChanged_Parameter SessionStateChanged::CLIENT_ID_ASSIGNED;
constexpr SessionStateChanged_Parameter SessionStateChanged::Parameter_MIN;
constexpr SessionStateChanged_Parameter SessionStateChanged::Parameter_MAX;
constexpr int SessionStateChanged::Parameter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Frame::_Internal {
 public:
  using HasBits = decltype(std::declval<Frame>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Notice.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&scope_) -
    reinterpret_cast<char*>(&type_)) + sizeof(scope_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Notice.Frame)
}

inline void Frame::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0u;
scope_ = 1;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Notice.Frame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Notice.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    type_ = 0u;
    scope_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Notice.Frame.Scope scope = 2 [default = GLOBAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Notice::Frame_Scope_IsValid(val))) {
            _internal_set_scope(static_cast<::PolarXRPC::Notice::Frame_Scope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Notice.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional .PolarXRPC.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scope(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Notice.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Notice.Frame)
  size_t total_size = 0;

  // required uint32 type = 1;
  if (_internal_has_type()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes payload = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // optional .PolarXRPC.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scope());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Frame*>(
      &from));
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Notice.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Notice.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(type_, other->type_);
  swap(scope_, other->scope_);
}

std::string Frame::GetTypeName() const {
  return "PolarXRPC.Notice.Frame";
}


// ===================================================================

class Warning::_Internal {
 public:
  using HasBits = decltype(std::declval<Warning>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Warning::Warning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Notice.Warning)
}
Warning::Warning(const Warning& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&code_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Notice.Warning)
}

inline void Warning::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0u;
level_ = 2;
}

Warning::~Warning() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Notice.Warning)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Warning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Warning::ArenaDtor(void* object) {
  Warning* _this = reinterpret_cast< Warning* >(object);
  (void)_this;
}
void Warning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Warning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Warning::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Notice.Warning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    code_ = 0u;
    level_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Warning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PolarXRPC.Notice.Warning.Level level = 1 [default = WARNING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Notice::Warning_Level_IsValid(val))) {
            _internal_set_level(static_cast<::PolarXRPC::Notice::Warning_Level>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Warning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Notice.Warning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PolarXRPC.Notice.Warning.Level level = 1 [default = WARNING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // required uint32 code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // required string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Notice.Warning)
  return target;
}

size_t Warning::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PolarXRPC.Notice.Warning)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_code()) {
    // required uint32 code = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return total_size;
}
size_t Warning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Notice.Warning)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required uint32 code = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PolarXRPC.Notice.Warning.Level level = 1 [default = WARNING];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Warning::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Warning*>(
      &from));
}

void Warning::MergeFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Notice.Warning)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Warning::CopyFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Notice.Warning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warning::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Warning::InternalSwap(Warning* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(code_, other->code_);
  swap(level_, other->level_);
}

std::string Warning::GetTypeName() const {
  return "PolarXRPC.Notice.Warning";
}


// ===================================================================

class SessionVariableChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionVariableChanged>()._has_bits_);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PolarXRPC::Datatypes::Scalar& value(const SessionVariableChanged* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PolarXRPC::Datatypes::Scalar&
SessionVariableChanged::_Internal::value(const SessionVariableChanged* msg) {
  return *msg->value_;
}
void SessionVariableChanged::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SessionVariableChanged::SessionVariableChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Notice.SessionVariableChanged)
}
SessionVariableChanged::SessionVariableChanged(const SessionVariableChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_param()) {
    param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::PolarXRPC::Datatypes::Scalar(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Notice.SessionVariableChanged)
}

inline void SessionVariableChanged::SharedCtor() {
param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = nullptr;
}

SessionVariableChanged::~SessionVariableChanged() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Notice.SessionVariableChanged)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SessionVariableChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void SessionVariableChanged::ArenaDtor(void* object) {
  SessionVariableChanged* _this = reinterpret_cast< SessionVariableChanged* >(object);
  (void)_this;
}
void SessionVariableChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionVariableChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionVariableChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Notice.SessionVariableChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      param_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SessionVariableChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Datatypes.Scalar value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionVariableChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Notice.SessionVariableChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_param(), target);
  }

  // optional .PolarXRPC.Datatypes.Scalar value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Notice.SessionVariableChanged)
  return target;
}

size_t SessionVariableChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Notice.SessionVariableChanged)
  size_t total_size = 0;

  // required string param = 1;
  if (_internal_has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PolarXRPC.Datatypes.Scalar value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionVariableChanged::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SessionVariableChanged*>(
      &from));
}

void SessionVariableChanged::MergeFrom(const SessionVariableChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Notice.SessionVariableChanged)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_param(from._internal_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::PolarXRPC::Datatypes::Scalar::MergeFrom(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionVariableChanged::CopyFrom(const SessionVariableChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Notice.SessionVariableChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionVariableChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void SessionVariableChanged::InternalSwap(SessionVariableChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &param_, lhs_arena,
      &other->param_, rhs_arena
  );
  swap(value_, other->value_);
}

std::string SessionVariableChanged::GetTypeName() const {
  return "PolarXRPC.Notice.SessionVariableChanged";
}


// ===================================================================

class SessionStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionStateChanged>()._has_bits_);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PolarXRPC::Datatypes::Scalar& value(const SessionStateChanged* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::PolarXRPC::Datatypes::Scalar&
SessionStateChanged::_Internal::value(const SessionStateChanged* msg) {
  return *msg->value_;
}
void SessionStateChanged::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SessionStateChanged::SessionStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PolarXRPC.Notice.SessionStateChanged)
}
SessionStateChanged::SessionStateChanged(const SessionStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::PolarXRPC::Datatypes::Scalar(*from.value_);
  } else {
    value_ = nullptr;
  }
  param_ = from.param_;
  // @@protoc_insertion_point(copy_constructor:PolarXRPC.Notice.SessionStateChanged)
}

inline void SessionStateChanged::SharedCtor() {
value_ = nullptr;
param_ = 1;
}

SessionStateChanged::~SessionStateChanged() {
  // @@protoc_insertion_point(destructor:PolarXRPC.Notice.SessionStateChanged)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SessionStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void SessionStateChanged::ArenaDtor(void* object) {
  SessionStateChanged* _this = reinterpret_cast< SessionStateChanged* >(object);
  (void)_this;
}
void SessionStateChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:PolarXRPC.Notice.SessionStateChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
    param_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SessionStateChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PolarXRPC.Notice.SessionStateChanged.Parameter param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PolarXRPC::Notice::SessionStateChanged_Parameter_IsValid(val))) {
            _internal_set_param(static_cast<::PolarXRPC::Notice::SessionStateChanged_Parameter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .PolarXRPC.Datatypes.Scalar value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionStateChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolarXRPC.Notice.SessionStateChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PolarXRPC.Notice.SessionStateChanged.Parameter param = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_param(), target);
  }

  // optional .PolarXRPC.Datatypes.Scalar value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolarXRPC.Notice.SessionStateChanged)
  return target;
}

size_t SessionStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolarXRPC.Notice.SessionStateChanged)
  size_t total_size = 0;

  // required .PolarXRPC.Notice.SessionStateChanged.Parameter param = 1;
  if (_internal_has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_param());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PolarXRPC.Datatypes.Scalar value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionStateChanged::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SessionStateChanged*>(
      &from));
}

void SessionStateChanged::MergeFrom(const SessionStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolarXRPC.Notice.SessionStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_value()->::PolarXRPC::Datatypes::Scalar::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      param_ = from.param_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionStateChanged::CopyFrom(const SessionStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolarXRPC.Notice.SessionStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStateChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void SessionStateChanged::InternalSwap(SessionStateChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
  swap(param_, other->param_);
}

std::string SessionStateChanged::GetTypeName() const {
  return "PolarXRPC.Notice.SessionStateChanged";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Notice
}  // namespace PolarXRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PolarXRPC::Notice::Frame* Arena::CreateMaybeMessage< ::PolarXRPC::Notice::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Notice::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Notice::Warning* Arena::CreateMaybeMessage< ::PolarXRPC::Notice::Warning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Notice::Warning >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Notice::SessionVariableChanged* Arena::CreateMaybeMessage< ::PolarXRPC::Notice::SessionVariableChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Notice::SessionVariableChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::PolarXRPC::Notice::SessionStateChanged* Arena::CreateMaybeMessage< ::PolarXRPC::Notice::SessionStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolarXRPC::Notice::SessionStateChanged >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
