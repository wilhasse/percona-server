# Test that lack of the user used by Percona Telemetry Component
# doesn't cause hangs during server restart and no orphaned sessions are created.
# Ensure that the user is recreated if needed.
# Ensure that user privileges are fixed during the server startup.
# Ensure that the user is deleted if the server is started with telemetry disabled.


--source include/have_percona_telemetry.inc

--let $telemetry_root_dir = $MYSQL_TMP_DIR/telemetry_dir
--let $grace_interval = 30
--let $scrape_interval = 30

--mkdir $telemetry_root_dir

# Record percona.telemetry user privileges
SHOW GRANTS FOR 'percona.telemetry'@'localhost';

# restart the server with custom telemetry file path and timeouts
--let $restart_parameters = "restart:--percona_telemetry.grace_interval=$grace_interval --percona_telemetry.scrape_interval=$scrape_interval --percona_telemetry.telemetry_root_dir=$telemetry_root_dir"
--replace_regex /telemetry_root_dir=.*telemetry_dir/telemetry_root_dir=<telemetry_root_dir>/
--source include/restart_mysqld.inc

# Rename 'root' user (1st version of Percona Telemetry Component used 'root' user)
# 1st version will not collect any data and will not create telemetry file and the restart will hang.
# Fixed version will work properly as it doesn't use 'root' user.
RENAME USER 'root'@'localhost' to 'root.tmp'@'localhost';

# sleep more than grace_interval and check that telemetry file was created
--let $timeout = `select $grace_interval + 10`
--sleep $timeout

--echo 'root' user used by component's 1st verison does not exist. Telemetry dir should contain 1 file.
--exec ls -1 $telemetry_root_dir | wc -l

#
# It should be possible to restart the server.
#
RENAME USER 'root.tmp'@'localhost' to 'root'@'localhost';
--let $restart_parameters = "restart:--percona_telemetry.grace_interval=$grace_interval --percona_telemetry.scrape_interval=$scrape_interval --percona_telemetry.telemetry_root_dir=$telemetry_root_dir"
--replace_regex /telemetry_root_dir=.*telemetry_dir/telemetry_root_dir=<telemetry_root_dir>/
--source include/restart_mysqld.inc


#
# Now rename the user used by component
#
RENAME USER 'percona.telemetry'@'localhost' to 'percona.telemetry.tmp'@'localhost';

# Wait a few cycles and ensure that SHOW PROCESSLIST does not contain rows related to orphaned sessions.
--let $timeout = `select $grace_interval + 3 * $scrape_interval`
--sleep $timeout

--let $assert_text = No orphaned sessions expected in processlist
--let $assert_cond = [SELECT COUNT(*) as Result FROM performance_schema.processlist WHERE user = "percona.telemetry";, Result, 1] = 0
--source include/assert.inc

# Check that no new telemetry file was created
--echo 'percona.telemetry' user used by component does not exist. Telemetry dir should still contain 1 file.
--exec ls -1 $telemetry_root_dir | wc -l


#
# It should be still possible to restart the server.
#
RENAME USER 'percona.telemetry.tmp'@'localhost' to 'percona.telemetry'@'localhost';
--let $restart_parameters = "restart:--percona_telemetry.grace_interval=$grace_interval --percona_telemetry.scrape_interval=$scrape_interval --percona_telemetry.telemetry_root_dir=$telemetry_root_dir"
--replace_regex /telemetry_root_dir=.*telemetry_dir/telemetry_root_dir=<telemetry_root_dir>/
--source include/restart_mysqld.inc

#
# If the user is deleted, it is recreated after the server restart
#
DROP USER 'percona.telemetry'@'localhost';
--let $restart_parameters = "restart:--percona_telemetry.grace_interval=$grace_interval --percona_telemetry.scrape_interval=$scrape_interval --percona_telemetry.telemetry_root_dir=$telemetry_root_dir"
--replace_regex /telemetry_root_dir=.*telemetry_dir/telemetry_root_dir=<telemetry_root_dir>/
--source include/restart_mysqld.inc

--let $assert_text = Telemetry user should be recreated
--let $assert_cond = [SELECT COUNT(*) as Result FROM mysql.user WHERE user = "percona.telemetry";, Result, 1] = 1
--source include/assert.inc

#
# If privileges are dropped, they are restored after restart
#
REVOKE SELECT ON *.* from 'percona.telemetry'@'localhost';
SHOW GRANTS FOR 'percona.telemetry'@'localhost';
--let $restart_parameters = "restart:--percona_telemetry.grace_interval=$grace_interval --percona_telemetry.scrape_interval=$scrape_interval --percona_telemetry.telemetry_root_dir=$telemetry_root_dir"
--replace_regex /telemetry_root_dir=.*telemetry_dir/telemetry_root_dir=<telemetry_root_dir>/
--source include/restart_mysqld.inc
SHOW GRANTS FOR 'percona.telemetry'@'localhost';

#
# If the server is restarted with --percona-telemetry-disable=1, the user is deleted
#
--let $restart_parameters = "restart:--percona-telemetry-disable=1"
--source include/restart_mysqld.inc

--let $assert_text = Telemetry user should be deleted
--let $assert_cond = [SELECT COUNT(*) as Result FROM mysql.user WHERE user = "percona.telemetry";, Result, 1] = 0
--source include/assert.inc


# cleanup
--force-rmdir $telemetry_root_dir

